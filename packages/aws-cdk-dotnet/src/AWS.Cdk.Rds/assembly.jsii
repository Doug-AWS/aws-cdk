{
  "schema": "jsii/1.0",
  "types": {
    "jsii$_aws_cdk_rds$.DatabaseClusterProps": {
      "docs": {
        "comment": "Properties for a new database cluster"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "What kind of database to start"
          },
          "name": "engine",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterEngine"
          }
        },
        {
          "docs": {
            "default": "2",
            "comment": "How many replicas/instances to create\n\nHas to be at least 1."
          },
          "name": "instances",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Settings for the individual instances that are launched"
          },
          "name": "instanceProps",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.InstanceProps"
          }
        },
        {
          "docs": {
            "comment": "Username and password for the administrative user"
          },
          "name": "masterUser",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Login"
          }
        },
        {
          "docs": {
            "comment": "Backup settings"
          },
          "name": "backup",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.BackupProps",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "What port to listen on\n\nIf not supplied, the default for the engine is used."
          },
          "name": "port",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An optional identifier for the cluster\n\nIf not supplied, a name is automatically generated."
          },
          "name": "clusterIdentifier",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Base identifier for instances\n\nEvery replica is named by appending the replica number to this string, 1-based.\n\nIf not given, the clusterIdentifier is used with the word \"Instance\" appended.\n\nIf clusterIdentifier is also not given, the identifier is automatically generated."
          },
          "name": "instanceIdentifierBase",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Name of a database which is automatically created inside the cluster"
          },
          "name": "defaultDatabaseName",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "ARN of KMS key if you want to enable storage encryption"
          },
          "name": "kmsKeyArn",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.kms.KeyArn",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A daily time range in 24-hours UTC format in which backups preferably execute.\n\nMust be at least 30 minutes long.\n\nExample: '01:00-02:00'"
          },
          "name": "preferredMaintenanceWindow",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Additional parameters to pass to the database engine"
          },
          "name": "parameters",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterProps",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "DatabaseClusterProps",
      "datatype": true
    },
    "jsii$_aws_cdk_rds$.DatabaseCluster": {
      "docs": {
        "comment": "Create a clustered database with a given number of instances."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Identifier of the cluster"
          },
          "name": "clusterIdentifier",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.ClusterIdentifier"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Identifiers of the replicas"
          },
          "name": "instanceIdentifiers",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_rds$.InstanceIdentifier"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The endpoint to use for read/write operations"
          },
          "name": "clusterEndpoint",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Endpoint"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Endpoint to use for load-balanced read-only operations."
          },
          "name": "readerEndpoint",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Endpoint"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Endpoints which address each individual replica."
          },
          "name": "instanceEndpoints",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_rds$.Endpoint"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Default port to connect to this database"
          },
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Access to the network connections"
          },
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.DefaultConnections"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Security group identifier of this database"
          },
          "name": "securityGroupId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId"
          },
          "protected": true
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.DatabaseCluster",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "DatabaseCluster",
      "base": {
        "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterRef"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.DatabaseClusterRef": {
      "docs": {
        "comment": "Create a clustered database with a given number of instances."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Default port to connect to this database"
          },
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Access to the network connections"
          },
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.DefaultConnections"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Identifier of the cluster"
          },
          "name": "clusterIdentifier",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.ClusterIdentifier"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Identifiers of the replicas"
          },
          "name": "instanceIdentifiers",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_rds$.InstanceIdentifier"
              },
              "kind": "array"
            }
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "The endpoint to use for read/write operations"
          },
          "name": "clusterEndpoint",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Endpoint"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Endpoint to use for load-balanced read-only operations."
          },
          "name": "readerEndpoint",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Endpoint"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Endpoints which address each individual replica."
          },
          "name": "instanceEndpoints",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_rds$.Endpoint"
              },
              "kind": "array"
            }
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "The security group for this database cluster"
          },
          "name": "securityGroupId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId"
          },
          "immutable": true,
          "protected": true,
          "abstract": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterRefProps"
              }
            }
          ],
          "docs": {
            "comment": "Import an existing DatabaseCluster from properties"
          },
          "name": "import",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterRef"
          }
        },
        {
          "docs": {
            "comment": "Export a Database Cluster for importing in another stack"
          },
          "name": "export",
          "returns": {
            "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterRefProps"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable"
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterRef",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "DatabaseClusterRef",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.DatabaseClusterRefProps": {
      "docs": {
        "comment": "Properties that describe an existing cluster instance"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The database port"
          },
          "name": "port",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Port"
          }
        },
        {
          "docs": {
            "comment": "The security group for this database cluster"
          },
          "name": "securityGroupId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId"
          }
        },
        {
          "docs": {
            "comment": "Identifier for the cluster"
          },
          "name": "clusterIdentifier",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.ClusterIdentifier"
          }
        },
        {
          "docs": {
            "comment": "Identifier for the instances"
          },
          "name": "instanceIdentifiers",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_rds$.InstanceIdentifier"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Cluster endpoint address"
          },
          "name": "clusterEndpointAddress",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress"
          }
        },
        {
          "docs": {
            "comment": "Reader endpoint address"
          },
          "name": "readerEndpointAddress",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress"
          }
        },
        {
          "docs": {
            "comment": "Endpoint addresses of individual instances"
          },
          "name": "instanceEndpointAddresses",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress"
              },
              "kind": "array"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterRefProps",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "DatabaseClusterRefProps",
      "datatype": true
    },
    "jsii$_aws_cdk_rds$.ClusterIdentifier": {
      "docs": {
        "comment": "Identifier of a cluster"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.ClusterIdentifier",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "ClusterIdentifier",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.InstanceIdentifier": {
      "docs": {
        "comment": "Identifier of an instance"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.InstanceIdentifier",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "InstanceIdentifier",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.Port": {
      "docs": {
        "comment": "Port part of an address"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.Port",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "Port",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.SocketAddress": {
      "docs": {
        "comment": "A complete socket address (hostname + \":\" + port)"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.SocketAddress",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "SocketAddress",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.Endpoint": {
      "docs": {
        "comment": "Connection endpoint of a database cluster or instance\n\nConsists of a combination of hostname and port."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The hostname of the endpoint"
          },
          "name": "hostname",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The port of the endpoint"
          },
          "name": "port",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Port"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The combination of \"HOSTNAME:PORT\" for this endpoint"
          },
          "name": "socketAddress",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.SocketAddress"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.Endpoint",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "Endpoint",
      "initializer": {
        "parameters": [
          {
            "name": "address",
            "type": {
              "fqn": "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress"
            }
          },
          {
            "name": "port",
            "type": {
              "fqn": "jsii$_aws_cdk_rds$.Port"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.DatabaseInstance": {
      "docs": {
        "comment": "Create a database instance\n\nThis can be a standalone database instance, or part of a cluster."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.DatabaseInstance",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "DatabaseInstance",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.DatabaseClusterEngine": {
      "docs": {
        "comment": "The engine for the database cluster"
      },
      "kind": "enum",
      "members": [
        {
          "name": "Aurora"
        },
        {
          "name": "Neptune"
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.DatabaseClusterEngine",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "DatabaseClusterEngine"
    },
    "jsii$_aws_cdk_rds$.InstanceProps": {
      "docs": {
        "comment": "Instance properties for database instances"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "What type of instance to start for the replicas"
          },
          "name": "instanceType",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.InstanceType"
          }
        },
        {
          "docs": {
            "comment": "What subnets to run the RDS instances in.\n\nMust be at least 2 subnets in two different AZs."
          },
          "name": "vpc",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
          }
        },
        {
          "docs": {
            "comment": "Where to place the instances within the VPC"
          },
          "name": "vpcPlacement",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.InstanceProps",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "InstanceProps",
      "datatype": true
    },
    "jsii$_aws_cdk_rds$.BackupProps": {
      "docs": {
        "comment": "Backup configuration for RDS databases"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "How many days to retain the backup"
          },
          "name": "retentionDays",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "A daily time range in 24-hours UTC format in which backups preferably execute.\n\nMust be at least 30 minutes long.\n\nExample: '01:00-02:00'"
          },
          "name": "preferredWindow",
          "type": {
            "primitive": "string",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.BackupProps",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "BackupProps",
      "datatype": true
    },
    "jsii$_aws_cdk_rds$.Login": {
      "docs": {
        "comment": "Username and password combination"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Username"
          },
          "name": "username",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Username"
          }
        },
        {
          "docs": {
            "comment": "Password\n\nDo not put passwords in your CDK code directly. Import it from a Stack\nParameter or the SSM Parameter Store instead."
          },
          "name": "password",
          "type": {
            "fqn": "jsii$_aws_cdk_rds$.Password"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_rds$.Login",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "Login",
      "datatype": true
    },
    "jsii$_aws_cdk_rds$.Username": {
      "docs": {
        "comment": "An RDS username"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.Username",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "Username",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_rds$.Password": {
      "docs": {
        "comment": "An RDS password"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_rds$.Password",
      "module": "jsii$_aws_cdk_rds$",
      "namespace": "jsii$_aws_cdk_rds$",
      "name": "Password",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    }
  },
  "nametree": {
    "jsii$_aws_cdk_rds$": {
      "DatabaseClusterProps": {
        "_": "jsii$_aws_cdk_rds$.DatabaseClusterProps"
      },
      "DatabaseCluster": {
        "_": "jsii$_aws_cdk_rds$.DatabaseCluster"
      },
      "DatabaseClusterRef": {
        "_": "jsii$_aws_cdk_rds$.DatabaseClusterRef"
      },
      "DatabaseClusterRefProps": {
        "_": "jsii$_aws_cdk_rds$.DatabaseClusterRefProps"
      },
      "ClusterIdentifier": {
        "_": "jsii$_aws_cdk_rds$.ClusterIdentifier"
      },
      "InstanceIdentifier": {
        "_": "jsii$_aws_cdk_rds$.InstanceIdentifier"
      },
      "Port": {
        "_": "jsii$_aws_cdk_rds$.Port"
      },
      "SocketAddress": {
        "_": "jsii$_aws_cdk_rds$.SocketAddress"
      },
      "Endpoint": {
        "_": "jsii$_aws_cdk_rds$.Endpoint"
      },
      "DatabaseInstance": {
        "_": "jsii$_aws_cdk_rds$.DatabaseInstance"
      },
      "DatabaseClusterEngine": {
        "_": "jsii$_aws_cdk_rds$.DatabaseClusterEngine"
      },
      "InstanceProps": {
        "_": "jsii$_aws_cdk_rds$.InstanceProps"
      },
      "BackupProps": {
        "_": "jsii$_aws_cdk_rds$.BackupProps"
      },
      "Login": {
        "_": "jsii$_aws_cdk_rds$.Login"
      },
      "Username": {
        "_": "jsii$_aws_cdk_rds$.Username"
      },
      "Password": {
        "_": "jsii$_aws_cdk_rds$.Password"
      }
    }
  },
  "typecount": 16,
  "externalTypes": {
    "jsii$_aws_cdk_resources$.kms.KeyArn": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.kms.KeyArn",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.kms",
      "name": "KeyArn",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Arn"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Construct": {
      "docs": {
        "comment": "Represents the building block of the construct graph.\nWhen a construct is created, it is always added as a child"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Returns the parent of this node or undefined if this is a root node."
          },
          "name": "parent",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Construct",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The name of this construct"
          },
          "name": "name",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "All direct children of this construct."
          },
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "returns": "/-separated path of this Construct.",
            "comment": "Returns the path of all constructs from root to this construct, in string form."
          },
          "name": "path",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "An array of metadata objects associated with this construct.\nThis can be used, for example, to implement support for deprecation notices, source mapping, etc."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.MetadataEntry"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of this construct."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "depth",
              "type": {
                "primitive": "number",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Returns a string with a tree representation of this construct and it's children."
          },
          "name": "toTreeString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "a child by path or undefined if not found.",
            "comment": "Return a descendant by path, or undefined"
          },
          "name": "tryFindChild",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct",
            "optional": true
          }
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "Child with the given path.",
            "comment": "Return a descendant by path\n\nThrows an exception if the descendant is not found."
          },
          "name": "findChild",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key The context key",
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "value The context value",
                "comment": "The context value"
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "This can be used to set contextual values.\nContext must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden."
          },
          "name": "setContext"
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key The context key",
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The context value or undefined",
            "comment": "Retrieves a value from tree context.\n\nContext is usually initialized at the root, but can be overridden at any point in the tree."
          },
          "name": "getContext",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Retrieve a value from tree-global context\n\nIt is an error if the context object is not available."
          },
          "name": "requireContext",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "type a string denoting the type of metadata",
                "comment": "a string denoting the type of metadata"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.",
                "comment": "the value of the metadata (can be a Token). If null/undefined, metadata will not be added."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "param": "from a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)",
                "comment": "a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)"
              },
              "name": "from",
              "type": {
                "primitive": "any",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Adds a metadata entry to this construct.\nEntries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics."
          },
          "name": "addMetadata",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "message The warning message.",
                "comment": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Adds a { warning: <message> } metadata entry to this construct."
          },
          "name": "addWarning",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "docs": {
            "returns": "An array of validation error messages, or an empty array if there the construct is valid.",
            "comment": "This method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis."
          },
          "name": "validate",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "returns": "A list of validation errors. If the list is empty, all constructs are valid.",
            "comment": "Invokes 'validate' on all child constructs and then on this construct (depth-first)."
          },
          "name": "validateTree",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.ValidationError"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "name": "upTo",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Return the ancestors (including self) of this Construct up until and excluding the indicated component"
          },
          "name": "ancestors",
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "props The props bag.",
                "comment": "The props bag."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "param": "name The name of the required property.",
                "comment": "The name of the required property."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Throws if the `props` bag doesn't include the property `name`.\nIn the future we can add some type-checking here, maybe even auto-generate during compilation."
          },
          "name": "required",
          "protected": true,
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "child The child construct",
                "comment": "The child construct"
              },
              "name": "child",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The resolved path part name of the child",
            "comment": "Adds a child construct to this node."
          },
          "name": "addChild",
          "protected": true
        },
        {
          "docs": {
            "comment": "Locks this construct from allowing more children to be added. After this\ncall, no more children can be added to this construct or to any children."
          },
          "name": "lock",
          "protected": true
        },
        {
          "docs": {
            "comment": "Unlocks this costruct and allows mutations (adding children)."
          },
          "name": "unlock",
          "protected": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Construct",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Construct",
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.IPortRange": {
      "docs": {
        "comment": "Interface for classes that provide the connection-specification parts of a security group rule"
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IPortRange",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IPortRange"
    },
    "jsii$_aws_cdk_ec2$.DefaultConnections": {
      "docs": {
        "comment": "A class to orchestrate connections that already has default ports"
      },
      "kind": "class",
      "properties": [
        {
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections from the peer on our default port\n\nEven if the peer has a default port, we will always use our default port."
          },
          "name": "allowDefaultPortFrom"
        },
        {
          "parameters": [
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow hosts inside the security group to connect to each other"
          },
          "name": "allowDefaultPortInternally"
        },
        {
          "parameters": [
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow default connections from all IPv4 ranges"
          },
          "name": "allowDefaultPortFromAnyIpv4"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.DefaultConnections",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "DefaultConnections",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.Connections"
      },
      "initializer": {
        "parameters": [
          {
            "name": "securityGroup",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.ISecurityGroup"
            }
          },
          {
            "name": "defaultPortRangeProvider",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.ec2.SecurityGroupId": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.ec2",
      "name": "SecurityGroupId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.IDefaultConnectable": {
      "docs": {
        "comment": "An object that has a Connections object as well as a default port range."
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "properties": [
        {
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IDefaultConnectable",
      "datatype": true
    },
    "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.rds.DBClusterEndpointAddress",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.rds",
      "name": "DBClusterEndpointAddress",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Token": {
      "docs": {
        "comment": "Represents a lazy-evaluated value. Can be used to delay evaluation of a certain value\nin case, for example, that it requires some context or late-bound data."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "returns": "The resolved value for this token."
          },
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Token",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Token",
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.InstanceType": {
      "docs": {
        "comment": "Instance type for EC2 instances\n\nThis class takes a literal string, good if you already\nknow the identifier of the type you want."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return the instance type as a dotted string"
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.InstanceType",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "InstanceType",
      "initializer": {
        "parameters": [
          {
            "name": "instanceTypeIdentifier",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcNetworkRef": {
      "docs": {
        "comment": "A new or imported VPC"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Identifier for this VPC"
          },
          "name": "vpcId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkId"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "List of public subnets in this VPC"
          },
          "name": "publicSubnets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "List of private subnets in this VPC"
          },
          "name": "privateSubnets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Parts of the VPC that constitute full construction"
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRefProps"
              }
            }
          ],
          "docs": {
            "comment": "Import an exported VPC"
          },
          "name": "import",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
          }
        },
        {
          "parameters": [
            {
              "name": "placement",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Return the subnets appropriate for the placement strategy"
          },
          "name": "subnets",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Export this VPC from the stack"
          },
          "name": "export",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRefProps"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_core$.IDependable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcNetworkRef",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcPlacementStrategy": {
      "docs": {
        "comment": "Customize how instances are placed inside a VPC\n\nConstructs that allow customization of VPC placement use parameters of this\ntype to provide placement settings."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "default": "false",
            "comment": "Whether to use the VPC's public subnets to start instances\n\nIf false, the instances are started in the private subnets."
          },
          "name": "usePublicSubnets",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcPlacementStrategy",
      "datatype": true
    }
  },
  "name": "jsii$_aws_cdk_rds$",
  "package": "@aws-cdk/rds",
  "version": "0.7.2-beta",
  "dependencies": {
    "jsii$_aws_cdk_core$": {
      "package": "@aws-cdk/core",
      "version": "0.7.2-beta"
    },
    "jsii$_aws_cdk_ec2$": {
      "package": "@aws-cdk/ec2",
      "version": "0.7.2-beta"
    },
    "jsii$_aws_cdk_iam$": {
      "package": "@aws-cdk/iam",
      "version": "0.7.2-beta"
    },
    "jsii$_aws_cdk_resources$": {
      "package": "@aws-cdk/resources",
      "version": "0.7.2-beta"
    }
  },
  "names": {
    "java": "com.amazonaws.cdk.rds",
    "dotnet": "AWS.Cdk.Rds",
    "js": "@aws-cdk/rds"
  },
  "nativenames": {
    "jsii$_aws_cdk_core$": {
      "java": "com.amazonaws.cdk",
      "dotnet": "AWS.Cdk",
      "js": "@aws-cdk/core"
    },
    "jsii$_aws_cdk_ec2$": {
      "java": "com.amazonaws.cdk.ec2",
      "dotnet": "AWS.Cdk.Ec2",
      "js": "@aws-cdk/ec2"
    },
    "jsii$_aws_cdk_iam$": {
      "java": "com.amazonaws.cdk.iam",
      "dotnet": "AWS.Cdk.Iam",
      "js": "@aws-cdk/iam"
    },
    "jsii$_aws_cdk_resources$": {
      "java": "com.amazonaws.cdk.resources",
      "dotnet": "AWS.Cdk.Resources",
      "js": "@aws-cdk/resources"
    },
    "jsii$_aws_cdk_rds$": {
      "java": "com.amazonaws.cdk.rds",
      "dotnet": "AWS.Cdk.Rds",
      "js": "@aws-cdk/rds"
    }
  },
  "readme": {
    "markdown": "## AWS RDS Construct Library\n\nThe `aws-cdk-rds` package contains Constructs for setting up RDS instances.\n\nSupported:\n\n* Clustered databases\n\nNot supported:\n\n* Instance databases\n* Setting up from a snapshot\n\n\n### Starting a Clustered Database\n\nTo set up a clustered database (like Aurora), create an instance of `DatabaseCluster`. You must\nalways launch a database in a VPC. Use the `vpcPlacement` attribute to control whether\nyour instances will be launched privately or publicly:\n\n```ts\nconst cluster = new DatabaseCluster(stack, 'Database', {\n    engine: DatabaseClusterEngine.Aurora,\n    masterUser: {\n        username: 'admin',\n        password: '7959866cacc02c2d243ecfe177464fe6',\n    },\n    instanceProps: {\n        instanceType: new InstanceTypePair(InstanceClass.Burstable2, InstanceSize.Small),\n        vpcPlacement: {\n            usePublicSubnets: true\n        },\n        vpc\n    }\n});\n```\n\nYour cluster will be empty by default. To add a default database upon construction, specify the\n`defaultDatabaseName` attribute.\n\n### Connecting\n\nTo control who can access the cluster, use the `.connections` attribute. RDS database have\na default port, so you don't need to specify the port:\n\n```ts\ncluster.connections.allowFromAnyIpv4('Open to the world');\n```\n\nThe endpoints to access your database will be available as the `.clusterEndpoint` and `.readerEndpoint`\nattributes:\n\n```ts\nconst writeAddress = cluster.clusterEndpoint.socketAddress;   // \"HOSTNAME:PORT\"\n```\n"
  },
  "code": "var jsii$_aws_cdk_rds$ =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_core$;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_ec2$;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\nconst ec2_1 = __webpack_require__(1);\n/**\n * Create a clustered database with a given number of instances.\n */\nclass DatabaseClusterRef extends core_1.Construct {\n    constructor() {\n        super(...arguments);\n        /**\n         * Identifiers of the replicas\n         */\n        this.instanceIdentifiers = [];\n        /**\n         * Endpoints which address each individual replica.\n         */\n        this.instanceEndpoints = [];\n    }\n    /**\n     * Import an existing DatabaseCluster from properties\n     */\n    static import(parent, name, props) {\n        return new ImportedDatabaseCluster(parent, name, props);\n    }\n    /**\n     * Export a Database Cluster for importing in another stack\n     */\n    export() {\n        return {\n            port: new core_1.Output(this, 'Port', { value: this.clusterEndpoint.port, }).makeImportValue(),\n            securityGroupId: new core_1.Output(this, 'SecurityGroupId', { value: this.securityGroupId, }).makeImportValue(),\n            clusterIdentifier: new core_1.Output(this, 'ClusterIdentifier', { value: this.clusterIdentifier, }).makeImportValue(),\n            instanceIdentifiers: new core_1.StringListOutput(this, 'InstanceIdentifiers', { values: this.instanceIdentifiers }).makeImportValues(),\n            clusterEndpointAddress: new core_1.Output(this, 'ClusterEndpointAddress', { value: this.clusterEndpoint.hostname, }).makeImportValue(),\n            readerEndpointAddress: new core_1.Output(this, 'ReaderEndpointAddress', { value: this.readerEndpoint.hostname, }).makeImportValue(),\n            // tslint:disable-next-line:max-line-length\n            instanceEndpointAddresses: new core_1.StringListOutput(this, 'InstanceEndpointAddresses', { values: this.instanceEndpoints.map(e => e.hostname) }).makeImportValues(),\n        };\n    }\n}\nexports.DatabaseClusterRef = DatabaseClusterRef;\n/**\n * An imported Database Cluster\n */\nclass ImportedDatabaseCluster extends DatabaseClusterRef {\n    constructor(parent, name, props) {\n        super(parent, name);\n        /**\n         * Identifiers of the replicas\n         */\n        this.instanceIdentifiers = [];\n        /**\n         * Endpoints which address each individual replica.\n         */\n        this.instanceEndpoints = [];\n        this.securityGroupId = props.securityGroupId;\n        this.defaultPortRange = new ec2_1.TcpPortFromAttribute(props.port);\n        this.connections = new ec2_1.DefaultConnections(new ec2_1.SecurityGroupRef(this, 'SecurityGroup', props), this);\n        this.clusterIdentifier = props.clusterIdentifier;\n        this.clusterEndpoint = new Endpoint(props.clusterEndpointAddress, props.port);\n        this.readerEndpoint = new Endpoint(props.readerEndpointAddress, props.port);\n        this.instanceEndpoints = props.instanceEndpointAddresses.map(a => new Endpoint(a, props.port));\n    }\n}\n/**\n * Identifier of a cluster\n */\nclass ClusterIdentifier extends core_1.Token {\n}\nexports.ClusterIdentifier = ClusterIdentifier;\n/**\n * Identifier of an instance\n */\nclass InstanceIdentifier extends core_1.Token {\n}\nexports.InstanceIdentifier = InstanceIdentifier;\n/**\n * Port part of an address\n */\nclass Port extends core_1.Token {\n}\nexports.Port = Port;\n/**\n * A complete socket address (hostname + \":\" + port)\n */\nclass SocketAddress extends core_1.Token {\n}\nexports.SocketAddress = SocketAddress;\n/**\n * Connection endpoint of a database cluster or instance\n *\n * Consists of a combination of hostname and port.\n */\nclass Endpoint {\n    constructor(address, port) {\n        this.hostname = address;\n        this.port = port;\n        this.socketAddress = new core_1.FnJoin(\":\", address, port);\n    }\n}\nexports.Endpoint = Endpoint;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(4));\n__export(__webpack_require__(2));\n__export(__webpack_require__(6));\n__export(__webpack_require__(7));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ec2_1 = __webpack_require__(1);\nconst resources_1 = __webpack_require__(5);\nconst cluster_ref_1 = __webpack_require__(2);\n/**\n * Create a clustered database with a given number of instances.\n */\nclass DatabaseCluster extends cluster_ref_1.DatabaseClusterRef {\n    constructor(parent, name, props) {\n        super(parent, name);\n        /**\n         * Identifiers of the replicas\n         */\n        this.instanceIdentifiers = [];\n        /**\n         * Endpoints which address each individual replica.\n         */\n        this.instanceEndpoints = [];\n        const subnets = props.instanceProps.vpc.subnets(props.instanceProps.vpcPlacement);\n        // Cannot test whether the subnets are in different AZs, but at least we can test the amount.\n        if (subnets.length < 2) {\n            throw new Error(`Cluster requires at least 2 subnets, got ${subnets.length}`);\n        }\n        const subnetGroup = new resources_1.rds.DBSubnetGroupResource(this, 'Subnets', {\n            dbSubnetGroupDescription: `Subnets for ${name} database`,\n            subnetIds: subnets.map(s => s.subnetId)\n        });\n        const securityGroup = new ec2_1.SecurityGroup(this, 'SecurityGroup', {\n            description: 'RDS security group',\n            vpc: props.instanceProps.vpc\n        });\n        this.securityGroupId = securityGroup.securityGroupId;\n        const cluster = new resources_1.rds.DBClusterResource(this, 'Resource', {\n            // Basic\n            engine: props.engine,\n            dbClusterIdentifier: props.clusterIdentifier,\n            dbSubnetGroupName: subnetGroup.ref,\n            vpcSecurityGroupIds: [this.securityGroupId],\n            port: props.port,\n            // Admin\n            masterUsername: props.masterUser.username,\n            masterUserPassword: props.masterUser.password,\n            backupRetentionPeriod: props.backup && props.backup.retentionDays,\n            preferredBackupWindow: props.backup && props.backup.preferredWindow,\n            preferredMaintenanceWindow: props.preferredMaintenanceWindow,\n            databaseName: props.defaultDatabaseName,\n            // Encryption\n            kmsKeyId: props.kmsKeyArn,\n            storageEncrypted: props.kmsKeyArn ? true : false,\n        });\n        this.clusterIdentifier = cluster.ref;\n        this.clusterEndpoint = new cluster_ref_1.Endpoint(cluster.dbClusterEndpointAddress, cluster.dbClusterEndpointPort);\n        this.readerEndpoint = new cluster_ref_1.Endpoint(cluster.dbClusterReadEndpointAddress, cluster.dbClusterEndpointPort);\n        const instanceCount = props.instances != null ? props.instances : 2;\n        if (instanceCount <= 1) {\n            throw new Error('At least one instance is required');\n        }\n        for (let i = 0; i < instanceCount; i++) {\n            const instanceIndex = i + 1;\n            const instanceIdentifier = props.instanceIdentifierBase != null ? `${props.instanceIdentifierBase}${instanceIndex}` :\n                props.clusterIdentifier != null ? `${props.clusterIdentifier}instance${instanceIndex}` :\n                    undefined;\n            const publiclyAccessible = props.instanceProps.vpcPlacement && props.instanceProps.vpcPlacement.usePublicSubnets;\n            const instance = new resources_1.rds.DBInstanceResource(this, `Instance${instanceIndex}`, {\n                // Link to cluster\n                engine: props.engine,\n                dbClusterIdentifier: cluster.ref,\n                dbInstanceIdentifier: instanceIdentifier,\n                // Instance properties\n                dbInstanceClass: databaseInstanceType(props.instanceProps.instanceType),\n                publiclyAccessible,\n                // This is already set on the Cluster. Unclear to me whether it should be repeated or not. Better yes.\n                dbSubnetGroupName: subnetGroup.ref,\n            });\n            if (publiclyAccessible) {\n                // We must have a dependency on the NAT gateway provider here to\n                // create things in the right order. To be safe (and because we\n                // cannot express it differently), take a dependency on the\n                // whole VPC.\n                instance.addDependency(props.instanceProps.vpc);\n            }\n            this.instanceIdentifiers.push(instance.ref);\n            this.instanceEndpoints.push(new cluster_ref_1.Endpoint(instance.dbInstanceEndpointAddress, instance.dbInstanceEndpointPort));\n        }\n        this.defaultPortRange = new ec2_1.TcpPortFromAttribute(this.clusterEndpoint.port);\n        this.connections = new ec2_1.DefaultConnections(securityGroup, this);\n    }\n}\nexports.DatabaseCluster = DatabaseCluster;\n/**\n * Turn a regular instance type into a database instance type\n */\nfunction databaseInstanceType(instanceType) {\n    return 'db.' + instanceType.toString();\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_resources$;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\n/**\n * Create a database instance\n *\n * This can be a standalone database instance, or part of a cluster.\n */\nclass DatabaseInstance extends core_1.Construct {\n}\nexports.DatabaseInstance = DatabaseInstance;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\n/**\n * The engine for the database cluster\n */\nvar DatabaseClusterEngine;\n(function (DatabaseClusterEngine) {\n    DatabaseClusterEngine[\"Aurora\"] = \"aurora\";\n    DatabaseClusterEngine[\"Neptune\"] = \"neptune\";\n})(DatabaseClusterEngine = exports.DatabaseClusterEngine || (exports.DatabaseClusterEngine = {}));\n/**\n * An RDS username\n */\nclass Username extends core_1.Token {\n}\nexports.Username = Username;\n/**\n * An RDS password\n */\nclass Password extends core_1.Token {\n}\nexports.Password = Password;\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
}
