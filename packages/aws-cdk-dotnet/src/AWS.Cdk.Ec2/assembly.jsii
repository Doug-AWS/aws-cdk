{
  "schema": "jsii/1.0",
  "types": {
    "jsii$_aws_cdk_ec2$.IConnectionPeer": {
      "docs": {
        "comment": "Interface for classes that provide the peer-specification parts of a security group rule"
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress rule JSON for the given connection"
          },
          "name": "toIngressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Produce the egress rule JSON for the given connection"
          },
          "name": "toEgressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "properties": [
        {
          "docs": {
            "comment": "Whether the rule can be inlined into a SecurityGroup or not"
          },
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IConnectionPeer"
    },
    "jsii$_aws_cdk_ec2$.CidrIp": {
      "docs": {
        "comment": "A connection to and from a given IP range"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Whether the rule can be inlined into a SecurityGroup or not"
          },
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnections"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress rule JSON for the given connection"
          },
          "name": "toIngressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Produce the egress rule JSON for the given connection"
          },
          "name": "toEgressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
        },
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.CidrIp",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "CidrIp",
      "initializer": {
        "parameters": [
          {
            "name": "cidrIp",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.AnyIPv4": {
      "docs": {
        "comment": "Any IPv4 address"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_ec2$.AnyIPv4",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AnyIPv4",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.CidrIp"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.CidrIpv6": {
      "docs": {
        "comment": "A connection to a from a given IPv6 range"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Whether the rule can be inlined into a SecurityGroup or not"
          },
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnections"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress rule JSON for the given connection"
          },
          "name": "toIngressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Produce the egress rule JSON for the given connection"
          },
          "name": "toEgressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
        },
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.CidrIpv6",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "CidrIpv6",
      "initializer": {
        "parameters": [
          {
            "name": "cidrIpv6",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.AnyIPv6": {
      "docs": {
        "comment": "Any IPv6 address"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_ec2$.AnyIPv6",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AnyIPv6",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.CidrIpv6"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.PrefixList": {
      "docs": {
        "comment": "A prefix list\n\nPrefix lists are used to allow traffic to VPC-local service endpoints.\n\nFor more information, see this page:\n\nhttps://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Whether the rule can be inlined into a SecurityGroup or not"
          },
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnections"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress rule JSON for the given connection"
          },
          "name": "toIngressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Produce the egress rule JSON for the given connection"
          },
          "name": "toEgressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
        },
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.PrefixList",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "PrefixList",
      "initializer": {
        "parameters": [
          {
            "name": "prefixListId",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.IPortRange": {
      "docs": {
        "comment": "Interface for classes that provide the connection-specification parts of a security group rule"
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IPortRange",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IPortRange"
    },
    "jsii$_aws_cdk_ec2$.Protocol": {
      "docs": {
        "comment": "Protocol for use in Connection Rules"
      },
      "kind": "enum",
      "members": [
        {
          "name": "All"
        },
        {
          "name": "Tcp"
        },
        {
          "name": "Udp"
        },
        {
          "name": "Icmp"
        },
        {
          "name": "Icmpv6"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.Protocol",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "Protocol"
    },
    "jsii$_aws_cdk_ec2$.TcpPort": {
      "docs": {
        "comment": "A single TCP port"
      },
      "kind": "class",
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.TcpPort",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "TcpPort",
      "initializer": {
        "parameters": [
          {
            "name": "port",
            "type": {
              "primitive": "number"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.TcpPortFromAttribute": {
      "docs": {
        "comment": "A single TCP port that is provided by a resource attribute"
      },
      "kind": "class",
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.TcpPortFromAttribute",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "TcpPortFromAttribute",
      "initializer": {
        "parameters": [
          {
            "name": "port",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Token"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.TcpPortRange": {
      "docs": {
        "comment": "A TCP port range"
      },
      "kind": "class",
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.TcpPortRange",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "TcpPortRange",
      "initializer": {
        "parameters": [
          {
            "name": "startPort",
            "type": {
              "primitive": "number"
            }
          },
          {
            "name": "endPort",
            "type": {
              "primitive": "number"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.TcpAllPorts": {
      "docs": {
        "comment": "All TCP Ports"
      },
      "kind": "class",
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.TcpAllPorts",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "TcpAllPorts",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.AllConnections": {
      "docs": {
        "comment": "All TCP Ports"
      },
      "kind": "class",
      "properties": [
        {
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Produce the ingress/egress rule JSON for the given connection"
          },
          "name": "toRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.AllConnections",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AllConnections",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.IConnectable": {
      "docs": {
        "comment": "The goal of this module is to make possible to write statements like this:\n\n    ```ts\n *    database.connections.allowFrom(fleet);\n *    fleet.connections.allowTo(database);\n *    rdgw.connections.allowFromCidrIp('0.3.1.5/86');\n *    rgdw.connections.allowTrafficTo(fleet, new AllPorts());\n *    ```\n\nThe insight here is that some connecting peers have information on what ports should\nbe involved in the connection, and some don't.\n\nConstructs will make their `connections` property to be equal to an instance of\neither `Connections` or `ConnectionsWithDefault`.\nAn object that has a Connections object"
      },
      "kind": "interface",
      "properties": [
        {
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnections"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IConnectable",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IConnectable",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.IDefaultConnectable": {
      "docs": {
        "comment": "An object that has a Connections object as well as a default port range."
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "properties": [
        {
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IDefaultConnectable",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.IConnections": {
      "docs": {
        "comment": "An object that encapsulates connection logic\n\nThe IConnections object both has knowledge on what peer to use,\nas well as how to add connection rules."
      },
      "kind": "interface",
      "methods": [
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections to the peer on the given port"
          },
          "name": "allowTo"
        },
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections from the peer on the given port"
          },
          "name": "allowFrom"
        }
      ],
      "properties": [
        {
          "docs": {
            "comment": "Access to the peer that we're connecting to\n\nIt's convenient to put this on the Connections object since\nall participants in this protocol have one anyway, and the Connections\nobjects have access to it, so they don't need to implement two interfaces."
          },
          "name": "connectionPeer",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IConnections",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IConnections"
    },
    "jsii$_aws_cdk_ec2$.Connections": {
      "docs": {
        "comment": "Connections for an object that does not have default ports"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Access to the peer that we're connecting to\n\nIt's convenient to put this on the Connections object since\nall participants in this protocol have one anyway, and the Connections\nobjects have access to it, so they don't need to implement two interfaces."
          },
          "name": "connectionPeer",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections to the peer on their default port"
          },
          "name": "allowToDefaultPort"
        },
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections to the peer on the given port"
          },
          "name": "allowTo"
        },
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections from the peer on the given port"
          },
          "name": "allowFrom"
        },
        {
          "parameters": [
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow hosts inside the security group to connect to each other on the given port"
          },
          "name": "allowInternally"
        },
        {
          "parameters": [
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow to all IPv4 ranges"
          },
          "name": "allowToAnyIpv4"
        },
        {
          "parameters": [
            {
              "name": "portRange",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow from any IPv4 ranges"
          },
          "name": "allowFromAnyIpv4"
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnections"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.Connections",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "Connections",
      "initializer": {
        "parameters": [
          {
            "name": "securityGroup",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.ISecurityGroup"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.DefaultConnections": {
      "docs": {
        "comment": "A class to orchestrate connections that already has default ports"
      },
      "kind": "class",
      "properties": [
        {
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections from the peer on our default port\n\nEven if the peer has a default port, we will always use our default port."
          },
          "name": "allowDefaultPortFrom"
        },
        {
          "parameters": [
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow hosts inside the security group to connect to each other"
          },
          "name": "allowDefaultPortInternally"
        },
        {
          "parameters": [
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow default connections from all IPv4 ranges"
          },
          "name": "allowDefaultPortFromAnyIpv4"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.DefaultConnections",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "DefaultConnections",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.Connections"
      },
      "initializer": {
        "parameters": [
          {
            "name": "securityGroup",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.ISecurityGroup"
            }
          },
          {
            "name": "defaultPortRangeProvider",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.SecurityGrouplessConnections": {
      "docs": {
        "comment": "This object is used by peers who don't allow reverse connections\n\nIt still has an associated connection peer, but that peer does not\nhave any security groups to add connections to."
      },
      "kind": "class",
      "properties": [
        {
          "name": "connectionPeer",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "_other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "_connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "_description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections to the peer on the given port"
          },
          "name": "allowTo"
        },
        {
          "parameters": [
            {
              "name": "_other",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              }
            },
            {
              "name": "_connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "_description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Allow connections from the peer on the given port"
          },
          "name": "allowFrom"
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnections"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.SecurityGrouplessConnections",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "SecurityGrouplessConnections",
      "initializer": {
        "parameters": [
          {
            "name": "connectionPeer",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.FleetProps": {
      "docs": {
        "comment": "Properties of a Fleet"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Type of instance to launch"
          },
          "name": "instanceType",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.InstanceType"
          }
        },
        {
          "docs": {
            "default": "1",
            "comment": "Minimum number of instances in the fleet"
          },
          "name": "minSize",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "1",
            "comment": "Maximum number of instances in the fleet"
          },
          "name": "maxSize",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "1",
            "comment": "Initial amount of instances in the fleet"
          },
          "name": "desiredCapacity",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "No SSH access will be possible",
            "comment": "Name of SSH keypair to grant access to instances"
          },
          "name": "keyName",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "AMI to launch"
          },
          "name": "machineImage",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IMachineImageSource"
          }
        },
        {
          "docs": {
            "comment": "VPC to launch these instances in."
          },
          "name": "vpc",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
          }
        },
        {
          "docs": {
            "comment": "Where to place instances within the VPC"
          },
          "name": "vpcPlacement",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "No fleet change notifications will be sent.",
            "comment": "SNS topic to send notifications about fleet changes"
          },
          "name": "notificationsTopic",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.sns.TopicResource",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "true",
            "comment": "Whether the instances can initiate connections to anywhere by default"
          },
          "name": "allowAllOutbound",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.FleetProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "FleetProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.Fleet": {
      "docs": {
        "comment": "A Fleet represents a managed set of EC2 instances\n\nThe Fleet models a number of AutoScalingGroups, a launch configuration, a\nsecurity group and an instance role.\n\nIt allows adding arbitrary commands to the startup scripts of the instances\nin the fleet.\n\nThe ASG spans all availability zones."
      },
      "kind": "class",
      "properties": [
        {
          "name": "connectionPeer",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The type of OS instances of this fleet are running."
          },
          "name": "osType",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.OperatingSystemType"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Allows specify security group connections for instances of this fleet."
          },
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.Connections"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The IAM role assumed by instances of this fleet."
          },
          "name": "role",
          "type": {
            "fqn": "jsii$_aws_cdk_iam$.Role"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "loadBalancer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancer"
              }
            }
          ],
          "docs": {
            "comment": "Attach load-balanced target to a classic ELB"
          },
          "name": "attachToClassicLB"
        },
        {
          "parameters": [
            {
              "name": "script",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Add command to the startup script of fleet instances.\nThe command must be in the scripting language supported by the fleet's OS (i.e. Linux/Windows)."
          },
          "name": "addUserData"
        },
        {
          "name": "autoScalingGroupName",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          }
        },
        {
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
              }
            }
          ],
          "docs": {
            "comment": "Adds a statement to the IAM role assumed by instances of this fleet."
          },
          "name": "addToRolePolicy"
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IClassicLoadBalancerTarget"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.Fleet",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "Fleet",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.FleetProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.InstanceClass": {
      "docs": {
        "comment": "What class and generation of instance to use\n\nWe have both symbolic and concrete enums for every type.\n\nThe first are for people that want to specify by purpose,\nthe second one are for people who already know exactly what\n'R4' means."
      },
      "kind": "enum",
      "members": [
        {
          "name": "Standard3"
        },
        {
          "name": "M3"
        },
        {
          "name": "Standard4"
        },
        {
          "name": "M4"
        },
        {
          "name": "Standard5"
        },
        {
          "name": "M5"
        },
        {
          "name": "Memory3"
        },
        {
          "name": "R3"
        },
        {
          "name": "Memory4"
        },
        {
          "name": "R4"
        },
        {
          "name": "Compute3"
        },
        {
          "name": "C3"
        },
        {
          "name": "Compute4"
        },
        {
          "name": "C4"
        },
        {
          "name": "Compute5"
        },
        {
          "name": "C5"
        },
        {
          "name": "Storage2"
        },
        {
          "name": "D2"
        },
        {
          "name": "StorageCompute1"
        },
        {
          "name": "H1"
        },
        {
          "name": "Io3"
        },
        {
          "name": "I3"
        },
        {
          "name": "Burstable2"
        },
        {
          "name": "T2"
        },
        {
          "name": "MemoryIntensive1"
        },
        {
          "name": "X1"
        },
        {
          "name": "MemoryIntensive1Extended"
        },
        {
          "name": "X1e"
        },
        {
          "name": "Fpga1"
        },
        {
          "name": "F1"
        },
        {
          "name": "Graphics3"
        },
        {
          "name": "G3"
        },
        {
          "name": "Parallel2"
        },
        {
          "name": "P2"
        },
        {
          "name": "Parallel3"
        },
        {
          "name": "P3"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.InstanceClass",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "InstanceClass"
    },
    "jsii$_aws_cdk_ec2$.InstanceSize": {
      "docs": {
        "comment": "What size of instance to use"
      },
      "kind": "enum",
      "members": [
        {
          "name": "Micro"
        },
        {
          "name": "Small"
        },
        {
          "name": "Medium"
        },
        {
          "name": "Large"
        },
        {
          "name": "XLarge"
        },
        {
          "name": "XLarge2"
        },
        {
          "name": "XLarge4"
        },
        {
          "name": "XLarge8"
        },
        {
          "name": "XLarge9"
        },
        {
          "name": "XLarge10"
        },
        {
          "name": "XLarge12"
        },
        {
          "name": "XLarge16"
        },
        {
          "name": "XLarge18"
        },
        {
          "name": "XLarge24"
        },
        {
          "name": "XLarge32"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.InstanceSize",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "InstanceSize"
    },
    "jsii$_aws_cdk_ec2$.InstanceType": {
      "docs": {
        "comment": "Instance type for EC2 instances\n\nThis class takes a literal string, good if you already\nknow the identifier of the type you want."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return the instance type as a dotted string"
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.InstanceType",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "InstanceType",
      "initializer": {
        "parameters": [
          {
            "name": "instanceTypeIdentifier",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.InstanceTypePair": {
      "docs": {
        "comment": "Instance type for EC2 instances\n\nThis class takes a combination of a class and size.\n\nBe aware that not all combinations of class and size are available, and not all\nclasses are available in all regions."
      },
      "kind": "class",
      "properties": [
        {
          "name": "instanceClass",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.InstanceClass"
          },
          "immutable": true
        },
        {
          "name": "instanceSize",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.InstanceSize"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.InstanceTypePair",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "InstanceTypePair",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.InstanceType"
      },
      "initializer": {
        "parameters": [
          {
            "name": "instanceClass",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.InstanceClass"
            }
          },
          {
            "name": "instanceSize",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.InstanceSize"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.ClassicLoadBalancerProps": {
      "docs": {
        "comment": "Construction properties for a ClassicLoadBalancer"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "VPC network of the fleet instances"
          },
          "name": "vpc",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
          }
        },
        {
          "docs": {
            "default": "false",
            "comment": "Whether this is an internet-facing Load Balancer\n\nThis controls whether the LB has a public IP address assigned. It does\nnot open up the Load Balancer's security groups to public internet access."
          },
          "name": "internetFacing",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "What listeners to set up for the load balancer.\n\nCan also be added by .addListener()"
          },
          "name": "listeners",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerListener"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "What targets to load balance to.\n\nCan also be added by .addTarget()"
          },
          "name": "targets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.IClassicLoadBalancerTarget"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Health check settings for the load balancing targets.\n\nNot required but recommended."
          },
          "name": "healthCheck",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.HealthCheck",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "ClassicLoadBalancerProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.HealthCheck": {
      "docs": {
        "comment": "Describe the health check to a load balancer"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "What port number to health check on"
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "default": "Automatic",
            "comment": "What protocol to use for health checking\n\nThe protocol is automatically determined from the port if it's not supplied."
          },
          "name": "protocol",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "\"/\"",
            "comment": "What path to use for HTTP or HTTPS health check (must return 200)\n\nFor SSL and TCP health checks, accepting connections is enough to be considered\nhealthy."
          },
          "name": "path",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "2",
            "comment": "After how many successful checks is an instance considered healthy"
          },
          "name": "healthyThreshold",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "5",
            "comment": "After how many unsuccessful checks is an instance considered unhealthy"
          },
          "name": "unhealthyThreshold",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "30",
            "comment": "Number of seconds between health checks"
          },
          "name": "interval",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "5",
            "comment": "Health check timeout"
          },
          "name": "timeout",
          "type": {
            "primitive": "number",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.HealthCheck",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "HealthCheck",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.IClassicLoadBalancerTarget": {
      "docs": {
        "comment": "Interface that is going to be implemented by constructs that you can load balance to"
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "loadBalancer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancer"
              }
            }
          ],
          "docs": {
            "comment": "Attach load-balanced target to a classic ELB"
          },
          "name": "attachToClassicLB"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IClassicLoadBalancerTarget",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IClassicLoadBalancerTarget"
    },
    "jsii$_aws_cdk_ec2$.ClassicLoadBalancerListener": {
      "docs": {
        "comment": "Add a backend to the load balancer"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "External listening port"
          },
          "name": "externalPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "What public protocol to use for load balancing\n\nEither 'tcp', 'ssl', 'http' or 'https'.\n\nMay be omitted if the external port is either 80 or 443."
          },
          "name": "externalProtocol",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "externalPort",
            "comment": "Instance listening port\n\nSame as the externalPort if not specified."
          },
          "name": "internalPort",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "What public protocol to use for load balancing\n\nEither 'tcp', 'ssl', 'http' or 'https'.\n\nMay be omitted if the internal port is either 80 or 443.\n\nThe instance protocol is 'tcp' if the front-end protocol\nis 'tcp' or 'ssl', the instance protocol is 'http' if the\nfront-end protocol is 'https'."
          },
          "name": "internalProtocol",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "SSL policy names"
          },
          "name": "policyNames",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "ID of SSL certificate"
          },
          "name": "sslCertificateId",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Arn",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "Anywhere",
            "comment": "Allow connections to the load balancer from the given set of connection peers\n\nBy default, connections will be allowed from anywhere. Set this to an empty list\nto deny connections, or supply a custom list of peers to allow connections from\n(IP ranges or security groups)."
          },
          "name": "allowConnectionsFrom",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerListener",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "ClassicLoadBalancerListener",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.LoadBalancingProtocol": {
      "kind": "enum",
      "members": [
        {
          "name": "Tcp"
        },
        {
          "name": "Ssl"
        },
        {
          "name": "Http"
        },
        {
          "name": "Https"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.LoadBalancingProtocol",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "LoadBalancingProtocol"
    },
    "jsii$_aws_cdk_ec2$.ClassicLoadBalancer": {
      "docs": {
        "comment": "A load balancer with a single listener\n\nRoutes to a fleet of of instances in a VPC."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Control all connections from and to this load balancer"
          },
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.Connections"
          },
          "immutable": true
        },
        {
          "name": "connectionPeer",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "An object controlling specifically the connections for each listener added to this load balancer"
          },
          "name": "listenerPorts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.ClassicListenerPort"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "name": "loadBalancerName",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          },
          "immutable": true
        },
        {
          "name": "loadBalancerCanonicalHostedZoneName",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerCanonicalHostedZoneName"
          },
          "immutable": true
        },
        {
          "name": "loadBalancerDnsName",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerDnsName"
          },
          "immutable": true
        },
        {
          "name": "loadBalancerSourceSecurityGroupGroupName",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerSourceSecurityGroupGroupName"
          },
          "immutable": true
        },
        {
          "name": "loadBalancerSourceSecurityGroupOwnerAlias",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerSourceSecurityGroupOwnerAlias"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "listener",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerListener"
              }
            }
          ],
          "docs": {
            "returns": "A ClassicListenerPort object that controls connections to the listener port",
            "comment": "Add a backend to the load balancer"
          },
          "name": "addListener",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.ClassicListenerPort"
          }
        },
        {
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IClassicLoadBalancerTarget"
              }
            }
          ],
          "name": "addTarget"
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancer",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "ClassicLoadBalancer",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.ClassicListenerPort": {
      "docs": {
        "comment": "Reference to a listener's port just created\n\nThis class exists to make it convenient to add port ranges to the load\nbalancer's security group just for the port ranges that are involved in the\nlistener."
      },
      "kind": "class",
      "properties": [
        {
          "name": "connections",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.DefaultConnections"
          },
          "immutable": true
        },
        {
          "name": "defaultPortRange",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
          },
          "immutable": true
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IDefaultConnectable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.ClassicListenerPort",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "ClassicListenerPort",
      "initializer": {
        "parameters": [
          {
            "name": "securityGroup",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.ISecurityGroup"
            }
          },
          {
            "name": "defaultPortRange",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.IMachineImageSource": {
      "docs": {
        "comment": "Interface for classes that can select an appropriate machine image to use"
      },
      "kind": "interface",
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            }
          ],
          "docs": {
            "comment": "Return the image to use in the given context"
          },
          "name": "getImage",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.MachineImage"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.IMachineImageSource",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "IMachineImageSource"
    },
    "jsii$_aws_cdk_ec2$.WindowsImage": {
      "docs": {
        "comment": "Select the latest version of the indicated Windows version\n\nThe AMI ID is selected using the values published to the SSM parameter store.\n\nhttps://aws.amazon.com/blogs/mt/query-for-the-latest-windows-ami-using-systems-manager-parameter-store/"
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            }
          ],
          "docs": {
            "comment": "Return the image to use in the given context"
          },
          "name": "getImage",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.MachineImage"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IMachineImageSource"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.WindowsImage",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "WindowsImage",
      "initializer": {
        "parameters": [
          {
            "name": "version",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.WindowsVersion"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.AmazonLinuxImageProps": {
      "docs": {
        "comment": "Amazon Linux image properties"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "default": "Standard",
            "comment": "What edition of Amazon Linux to use"
          },
          "name": "edition",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "HVM",
            "comment": "Virtualization type"
          },
          "name": "virtualization",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "GeneralPurpose",
            "comment": "What storage backed image to use"
          },
          "name": "storage",
          "type": {
            "primitive": "string",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.AmazonLinuxImageProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AmazonLinuxImageProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.AmazonLinuxImage": {
      "docs": {
        "comment": "Selects the latest version of Amazon Linux\n\nThe AMI ID is selected using the values published to the SSM parameter store."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            }
          ],
          "docs": {
            "comment": "Return the image to use in the given context"
          },
          "name": "getImage",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.MachineImage"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IMachineImageSource"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.AmazonLinuxImage",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AmazonLinuxImage",
      "initializer": {
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.AmazonLinuxImageProps",
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.AmazonLinuxEdition": {
      "docs": {
        "comment": "Amazon Linux edition"
      },
      "kind": "enum",
      "members": [
        {
          "name": "Standard"
        },
        {
          "name": "Minimal"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.AmazonLinuxEdition",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AmazonLinuxEdition"
    },
    "jsii$_aws_cdk_ec2$.AmazonLinuxVirt": {
      "docs": {
        "comment": "Virtualization type for Amazon Linux"
      },
      "kind": "enum",
      "members": [
        {
          "name": "HVM"
        },
        {
          "name": "PV"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.AmazonLinuxVirt",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AmazonLinuxVirt"
    },
    "jsii$_aws_cdk_ec2$.AmazonLinuxStorage": {
      "kind": "enum",
      "members": [
        {
          "name": "EBS"
        },
        {
          "name": "S3"
        },
        {
          "name": "GeneralPurpose"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.AmazonLinuxStorage",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "AmazonLinuxStorage"
    },
    "jsii$_aws_cdk_ec2$.GenericLinuxImage": {
      "docs": {
        "comment": "Construct a Linux machine image from an AMI map\n\nLinux images IDs are not published to SSM parameter store yet, so you'll have to\nmanually specify an AMI map."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            }
          ],
          "docs": {
            "comment": "Return the image to use in the given context"
          },
          "name": "getImage",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.MachineImage"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IMachineImageSource"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.GenericLinuxImage",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "GenericLinuxImage",
      "initializer": {
        "parameters": [
          {
            "name": "amiMap",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.WindowsVersion": {
      "docs": {
        "comment": "The Windows version to use for the WindowsImage"
      },
      "kind": "enum",
      "members": [
        {
          "name": "WindowsServer2016TurksihFullBase"
        },
        {
          "name": "WindowsServer2016SwedishFullBase"
        },
        {
          "name": "WindowsServer2016SpanishFullBase"
        },
        {
          "name": "WindowsServer2016RussianFullBase"
        },
        {
          "name": "WindowsServer2016PortuguesePortugalFullBase"
        },
        {
          "name": "WindowsServer2016PortugueseBrazilFullBase"
        },
        {
          "name": "WindowsServer2016PolishFullBase"
        },
        {
          "name": "WindowsServer2016KoreanFullSQL2016Base"
        },
        {
          "name": "WindowsServer2016KoreanFullBase"
        },
        {
          "name": "WindowsServer2016JapaneseFullSQL2016Web"
        },
        {
          "name": "WindowsServer2016JapaneseFullSQL2016Standard"
        },
        {
          "name": "WindowsServer2016JapaneseFullSQL2016Express"
        },
        {
          "name": "WindowsServer2016JapaneseFullSQL2016Enterprise"
        },
        {
          "name": "WindowsServer2016JapaneseFullBase"
        },
        {
          "name": "WindowsServer2016ItalianFullBase"
        },
        {
          "name": "WindowsServer2016HungarianFullBase"
        },
        {
          "name": "WindowsServer2016GermanFullBase"
        },
        {
          "name": "WindowsServer2016FrenchFullBase"
        },
        {
          "name": "WindowsServer2016EnglishNanoBase"
        },
        {
          "name": "WindowsServer2016EnglishFullSQL2017Web"
        },
        {
          "name": "WindowsServer2016EnglishFullSQL2017Standard"
        },
        {
          "name": "WindowsServer2016EnglishFullSQL2017Express"
        },
        {
          "name": "WindowsServer2016EnglishFullSQL2017Enterprise"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.WindowsVersion",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "WindowsVersion"
    },
    "jsii$_aws_cdk_ec2$.MachineImage": {
      "docs": {
        "comment": "Representation of a machine to be launched\n\nCombines an AMI ID with an OS."
      },
      "kind": "class",
      "properties": [
        {
          "name": "imageId",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "name": "os",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.OperatingSystem"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.MachineImage",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "MachineImage",
      "initializer": {
        "parameters": [
          {
            "name": "imageId",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "os",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.OperatingSystem"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.OperatingSystemType": {
      "docs": {
        "comment": "The OS type of a particular image"
      },
      "kind": "enum",
      "members": [
        {
          "name": "Linux"
        },
        {
          "name": "Windows"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.OperatingSystemType",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "OperatingSystemType"
    },
    "jsii$_aws_cdk_ec2$.OperatingSystem": {
      "docs": {
        "comment": "Abstraction of OS features we need to be aware of"
      },
      "kind": "class",
      "properties": [
        {
          "name": "type",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.OperatingSystemType"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "scripts",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "name": "createUserData",
          "abstract": true,
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.OperatingSystem",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "OperatingSystem",
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.WindowsOS": {
      "docs": {
        "comment": "OS features specialized for Windows"
      },
      "kind": "class",
      "properties": [
        {
          "name": "type",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.OperatingSystemType"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "scripts",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "name": "createUserData",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.WindowsOS",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "WindowsOS",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.OperatingSystem"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.LinuxOS": {
      "docs": {
        "comment": "OS features specialized for Linux"
      },
      "kind": "class",
      "properties": [
        {
          "name": "type",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.OperatingSystemType"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "scripts",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "name": "createUserData",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.LinuxOS",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "LinuxOS",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.OperatingSystem"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.SecurityGroupRefProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "ID of security group"
          },
          "name": "securityGroupId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupRefProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "SecurityGroupRefProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.ISecurityGroup": {
      "docs": {
        "comment": "Basic interface for security groups"
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "peer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
              }
            },
            {
              "name": "connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addIngressRule"
        },
        {
          "parameters": [
            {
              "name": "peer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
              }
            },
            {
              "name": "connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addEgressRule"
        }
      ],
      "properties": [
        {
          "name": "securityGroupId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Whether the rule can be inlined into a SecurityGroup or not"
          },
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.ISecurityGroup",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "ISecurityGroup"
    },
    "jsii$_aws_cdk_ec2$.SecurityGroupRef": {
      "docs": {
        "comment": "A SecurityGroup that is not created in this template"
      },
      "kind": "class",
      "properties": [
        {
          "name": "securityGroupId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Whether the rule can be inlined into a SecurityGroup or not"
          },
          "name": "canInlineRule",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "peer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
              }
            },
            {
              "name": "connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addIngressRule"
        },
        {
          "parameters": [
            {
              "name": "peer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
              }
            },
            {
              "name": "connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addEgressRule"
        },
        {
          "docs": {
            "comment": "Produce the ingress rule JSON for the given connection"
          },
          "name": "toIngressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Produce the egress rule JSON for the given connection"
          },
          "name": "toEgressRuleJSON",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_ec2$.ISecurityGroup"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupRef",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "SecurityGroupRef",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupRefProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.SecurityGroupProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "default": "If you don't specify a GroupName, AWS CloudFormation generates a\nunique physical ID and uses that ID for the group name.",
            "comment": "The name of the security group. For valid values, see the GroupName\nparameter of the CreateSecurityGroup action in the Amazon EC2 API\nReference.\n\nIt is not recommended to use an explicit group name."
          },
          "name": "groupName",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "The default name will be the construct's CDK path.",
            "comment": "A description of the security group."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The VPC in which to create the security group."
          },
          "name": "vpc",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "SecurityGroupProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.SecurityGroup": {
      "docs": {
        "comment": "Creates an Amazon EC2 security group within a VPC.\n\nThis class has an additional optimization over SecurityGroupRef that it can also create\ninline ingress and egress rule (which saves on the total number of resources inside\nthe template)."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "An attribute that represents the security group name."
          },
          "name": "groupName",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupName"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "An attribute that represents the physical VPC ID this security group is part of."
          },
          "name": "vpcId",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupVpcId"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "peer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
              }
            },
            {
              "name": "connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addIngressRule"
        },
        {
          "parameters": [
            {
              "name": "peer",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IConnectionPeer"
              }
            },
            {
              "name": "connection",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.IPortRange"
              }
            },
            {
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addEgressRule"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.SecurityGroup",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "SecurityGroup",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupRef"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.SecurityGroupName": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_ec2$.SecurityGroupName",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "SecurityGroupName",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.ConnectionRule": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "default": "tcp",
            "comment": "The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers).\nUse -1 to specify all protocols. If you specify -1, or a protocol number\nother than tcp, udp, icmp, or 58 (ICMPv6), traffic on all ports is\nallowed, regardless of any ports you specify. For tcp, udp, and icmp, you\nmust specify a port range. For protocol 58 (ICMPv6), you can optionally\nspecify a port range; if you don't, traffic for all types and codes is\nallowed."
          },
          "name": "protocol",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Start of port range for the TCP and UDP protocols, or an ICMP type number.\n\nIf you specify icmp for the IpProtocol property, you can specify\n-1 as a wildcard (i.e., any ICMP type number)."
          },
          "name": "fromPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "default": "If toPort is not specified, it will be the same as fromPort.",
            "comment": "End of port range for the TCP and UDP protocols, or an ICMP code.\n\nIf you specify icmp for the IpProtocol property, you can specify -1 as a\nwildcard (i.e., any ICMP code)."
          },
          "name": "toPort",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "No description",
            "comment": "Description of this connection. It is applied to both the ingress rule\nand the egress rule."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.ConnectionRule",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "ConnectionRule",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.VpcNetworkProps": {
      "docs": {
        "comment": "VpcNetworkProps allows you to specify configuration options for a VPC"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The CIDR range to use for the VPC (e.g. '10.0.0.0/16'). Should be a minimum of /28 and maximum size of /16.\nThe range will be split evenly into two subnets per Availability Zone (one public, one private)."
          },
          "name": "cidr",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Indicates whether the instances launched in the VPC get public DNS hostnames.\nIf this attribute is true, instances in the VPC get public DNS hostnames,\nbut only if the enableDnsSupport attribute is also set to true."
          },
          "name": "enableDnsHostnames",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Indicates whether the DNS resolution is supported for the VPC. If this attribute\nis false, the Amazon-provided DNS server in the VPC that resolves public DNS hostnames\nto IP addresses is not enabled. If this attribute is true, queries to the Amazon\nprovided DNS server at the 169.254.169.253 IP address, or the reserved IP address\nat the base of the VPC IPv4 network range plus two will succeed."
          },
          "name": "enableDnsSupport",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The default tenancy of instances launched into the VPC.\nBy default, instances will be launched with default (shared) tenancy.\nBy setting this to dedicated tenancy, instances will be launched on hardware dedicated\nto a single AWS customer, unless specifically specified at instance launch time.\nPlease note, not all instance types are usable with Dedicated tenancy."
          },
          "name": "defaultInstanceTenancy",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The AWS resource tags to associate with the VPC."
          },
          "name": "tags",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Tag"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Defines whether the VPC is configured to route outbound traffic from private and/or public subnets.\nBy default, outbound traffic will be allowed from public and private subnets."
          },
          "name": "outboundTraffic",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "All AZs in the region",
            "comment": "Define the maximum number of AZs to use in this region\n\nIf the region has more AZs than you want to use (for example, because of EIP limits),\npick a lower number here. The AZs will be sorted and picked from the start of the list."
          },
          "name": "maxAZs",
          "type": {
            "primitive": "number",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcNetworkProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.DefaultInstanceTenancy": {
      "docs": {
        "comment": "The default tenancy of instances launched into the VPC."
      },
      "kind": "enum",
      "members": [
        {
          "name": "Default"
        },
        {
          "name": "Dedicated"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.DefaultInstanceTenancy",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "DefaultInstanceTenancy"
    },
    "jsii$_aws_cdk_ec2$.OutboundTrafficMode": {
      "docs": {
        "comment": "The outbound traffic mode defines whether the VPC is configured to route outbound traffic."
      },
      "kind": "enum",
      "members": [
        {
          "name": "None"
        },
        {
          "name": "FromPublicSubnetsOnly"
        },
        {
          "name": "FromPublicAndPrivateSubnets"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.OutboundTrafficMode",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "OutboundTrafficMode"
    },
    "jsii$_aws_cdk_ec2$.VpcNetwork": {
      "docs": {
        "comment": "VpcNetwork deploys an AWS VPC, with public and private subnets per Availability Zone.\nFor example:\n\nimport { VpcNetwork } from '@aws-cdk/ec2'\n\nconst vpc = new VpcNetwork(this, {\n     cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the public subnets\nfor (let subnet of vpc.publicSubnets) {\n\n}\n\n// Iterate the private subnets\nfor (let subnet of vpc.privateSubnets) {\n\n}"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The default CIDR range used when creating VPCs.\nThis can be overridden using VpcNetworkProps when creating a VPCNetwork resource.\ne.g. new VpcResource(this, { cidr: '192.168.0.0./16' })"
          },
          "name": "DEFAULT_CIDR_RANGE",
          "static": true,
          "type": {
            "primitive": "string"
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Identifier for this VPC"
          },
          "name": "vpcId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkId"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "List of public subnets in this VPC"
          },
          "name": "publicSubnets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "List of private subnets in this VPC"
          },
          "name": "privateSubnets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "returns": "The IPv4 CidrBlock as returned by the VPC"
          },
          "name": "cidr",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcNetwork",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcNetwork",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "VpcNetwork creates a VPC that spans a whole region.\nIt will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.\nNetwork routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.\nNetwork routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ)."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcSubnetProps": {
      "docs": {
        "comment": "Specify configuration parameters for a VPC subnet"
      },
      "kind": "interface",
      "properties": [
        {
          "name": "availabilityZone",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "vpcId",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          }
        },
        {
          "name": "cidrBlock",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "mapPublicIpOnLaunch",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcSubnetProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.VpcSubnet": {
      "docs": {
        "comment": "Represents a new VPC subnet resource"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The Availability Zone the subnet is located in"
          },
          "name": "availabilityZone",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The subnetId for this particular subnet"
          },
          "name": "subnetId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetId"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "natGatewayId",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Token"
              }
            }
          ],
          "name": "addDefaultRouteToNAT",
          "protected": true
        },
        {
          "parameters": [
            {
              "name": "gatewayId",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Token"
              }
            }
          ],
          "name": "addDefaultRouteToIGW",
          "protected": true
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcSubnet",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcSubnet",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcPublicSubnet": {
      "docs": {
        "comment": "Represents a public VPC subnet resource"
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "gatewayId",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Token"
              }
            }
          ],
          "docs": {
            "comment": "Create a default route that points to a passed IGW"
          },
          "name": "addDefaultIGWRouteEntry"
        },
        {
          "docs": {
            "comment": "Creates a new managed NAT gateway attached to this public subnet.\nAlso adds the EIP for the managed NAT.\nReturns the NAT Gateway ref"
          },
          "name": "addNatGateway",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcPublicSubnet",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcPublicSubnet",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.VpcSubnet"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcPrivateSubnet": {
      "docs": {
        "comment": "Represents a private VPC subnet resource"
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "natGatewayId",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Token"
              }
            }
          ],
          "docs": {
            "comment": "Adds an entry to this subnets route table that points to the passed NATGatwayId"
          },
          "name": "addDefaultNatRouteEntry"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcPrivateSubnet",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcPrivateSubnet",
      "base": {
        "fqn": "jsii$_aws_cdk_ec2$.VpcSubnet"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcPlacementStrategy": {
      "docs": {
        "comment": "Customize how instances are placed inside a VPC\n\nConstructs that allow customization of VPC placement use parameters of this\ntype to provide placement settings."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "default": "false",
            "comment": "Whether to use the VPC's public subnets to start instances\n\nIf false, the instances are started in the private subnets."
          },
          "name": "usePublicSubnets",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcPlacementStrategy",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.VpcNetworkRef": {
      "docs": {
        "comment": "A new or imported VPC"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Identifier for this VPC"
          },
          "name": "vpcId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkId"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "List of public subnets in this VPC"
          },
          "name": "publicSubnets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "List of private subnets in this VPC"
          },
          "name": "privateSubnets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Parts of the VPC that constitute full construction"
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRefProps"
              }
            }
          ],
          "docs": {
            "comment": "Import an exported VPC"
          },
          "name": "import",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
          }
        },
        {
          "parameters": [
            {
              "name": "placement",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Return the subnets appropriate for the placement strategy"
          },
          "name": "subnets",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Export this VPC from the stack"
          },
          "name": "export",
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRefProps"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_core$.IDependable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRef",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcNetworkRef",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcNetworkRefProps": {
      "docs": {
        "comment": "Properties that reference an external VpcNetwork"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "VPC's identifier"
          },
          "name": "vpcId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkId"
          }
        },
        {
          "docs": {
            "comment": "List of a availability zones, one for every subnet.\n\nThe first half are for the public subnets, the second half are for\nthe private subnets."
          },
          "name": "availabilityZones",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "List of public subnet IDs, one for every subnet\n\nMust match the availability zones and private subnet ids in length and order."
          },
          "name": "publicSubnetIds",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetId"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "List of private subnet IDs, one for every subnet\n\nMust match the availability zones and public subnet ids in length and order."
          },
          "name": "privateSubnetIds",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetId"
              },
              "kind": "array"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkRefProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcNetworkRefProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.VpcNetworkId": {
      "docs": {
        "comment": "Identifier for a VPC"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_ec2$.VpcNetworkId",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcNetworkId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcSubnetRef": {
      "docs": {
        "comment": "A new or imported VPC Subnet"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The Availability Zone the subnet is located in"
          },
          "name": "availabilityZone",
          "type": {
            "primitive": "string"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "The subnetId for this particular subnet"
          },
          "name": "subnetId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetId"
          },
          "immutable": true,
          "abstract": true
        },
        {
          "docs": {
            "comment": "Parts of this VPC subnet"
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "parent",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRefProps"
              }
            }
          ],
          "name": "import",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_core$.IDependable"
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRef",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcSubnetRef",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_ec2$.VpcSubnetRefProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The Availability Zone the subnet is located in"
          },
          "name": "availabilityZone",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The subnetId for this particular subnet"
          },
          "name": "subnetId",
          "type": {
            "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetId"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetRefProps",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcSubnetRefProps",
      "datatype": true
    },
    "jsii$_aws_cdk_ec2$.VpcSubnetId": {
      "docs": {
        "comment": "Id of a VPC Subnet"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_ec2$.VpcSubnetId",
      "module": "jsii$_aws_cdk_ec2$",
      "namespace": "jsii$_aws_cdk_ec2$",
      "name": "VpcSubnetId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    }
  },
  "nametree": {
    "jsii$_aws_cdk_ec2$": {
      "IConnectionPeer": {
        "_": "jsii$_aws_cdk_ec2$.IConnectionPeer"
      },
      "CidrIp": {
        "_": "jsii$_aws_cdk_ec2$.CidrIp"
      },
      "AnyIPv4": {
        "_": "jsii$_aws_cdk_ec2$.AnyIPv4"
      },
      "CidrIpv6": {
        "_": "jsii$_aws_cdk_ec2$.CidrIpv6"
      },
      "AnyIPv6": {
        "_": "jsii$_aws_cdk_ec2$.AnyIPv6"
      },
      "PrefixList": {
        "_": "jsii$_aws_cdk_ec2$.PrefixList"
      },
      "IPortRange": {
        "_": "jsii$_aws_cdk_ec2$.IPortRange"
      },
      "Protocol": {
        "_": "jsii$_aws_cdk_ec2$.Protocol"
      },
      "TcpPort": {
        "_": "jsii$_aws_cdk_ec2$.TcpPort"
      },
      "TcpPortFromAttribute": {
        "_": "jsii$_aws_cdk_ec2$.TcpPortFromAttribute"
      },
      "TcpPortRange": {
        "_": "jsii$_aws_cdk_ec2$.TcpPortRange"
      },
      "TcpAllPorts": {
        "_": "jsii$_aws_cdk_ec2$.TcpAllPorts"
      },
      "AllConnections": {
        "_": "jsii$_aws_cdk_ec2$.AllConnections"
      },
      "IConnectable": {
        "_": "jsii$_aws_cdk_ec2$.IConnectable"
      },
      "IDefaultConnectable": {
        "_": "jsii$_aws_cdk_ec2$.IDefaultConnectable"
      },
      "IConnections": {
        "_": "jsii$_aws_cdk_ec2$.IConnections"
      },
      "Connections": {
        "_": "jsii$_aws_cdk_ec2$.Connections"
      },
      "DefaultConnections": {
        "_": "jsii$_aws_cdk_ec2$.DefaultConnections"
      },
      "SecurityGrouplessConnections": {
        "_": "jsii$_aws_cdk_ec2$.SecurityGrouplessConnections"
      },
      "FleetProps": {
        "_": "jsii$_aws_cdk_ec2$.FleetProps"
      },
      "Fleet": {
        "_": "jsii$_aws_cdk_ec2$.Fleet"
      },
      "InstanceClass": {
        "_": "jsii$_aws_cdk_ec2$.InstanceClass"
      },
      "InstanceSize": {
        "_": "jsii$_aws_cdk_ec2$.InstanceSize"
      },
      "InstanceType": {
        "_": "jsii$_aws_cdk_ec2$.InstanceType"
      },
      "InstanceTypePair": {
        "_": "jsii$_aws_cdk_ec2$.InstanceTypePair"
      },
      "ClassicLoadBalancerProps": {
        "_": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerProps"
      },
      "HealthCheck": {
        "_": "jsii$_aws_cdk_ec2$.HealthCheck"
      },
      "IClassicLoadBalancerTarget": {
        "_": "jsii$_aws_cdk_ec2$.IClassicLoadBalancerTarget"
      },
      "ClassicLoadBalancerListener": {
        "_": "jsii$_aws_cdk_ec2$.ClassicLoadBalancerListener"
      },
      "LoadBalancingProtocol": {
        "_": "jsii$_aws_cdk_ec2$.LoadBalancingProtocol"
      },
      "ClassicLoadBalancer": {
        "_": "jsii$_aws_cdk_ec2$.ClassicLoadBalancer"
      },
      "ClassicListenerPort": {
        "_": "jsii$_aws_cdk_ec2$.ClassicListenerPort"
      },
      "IMachineImageSource": {
        "_": "jsii$_aws_cdk_ec2$.IMachineImageSource"
      },
      "WindowsImage": {
        "_": "jsii$_aws_cdk_ec2$.WindowsImage"
      },
      "AmazonLinuxImageProps": {
        "_": "jsii$_aws_cdk_ec2$.AmazonLinuxImageProps"
      },
      "AmazonLinuxImage": {
        "_": "jsii$_aws_cdk_ec2$.AmazonLinuxImage"
      },
      "AmazonLinuxEdition": {
        "_": "jsii$_aws_cdk_ec2$.AmazonLinuxEdition"
      },
      "AmazonLinuxVirt": {
        "_": "jsii$_aws_cdk_ec2$.AmazonLinuxVirt"
      },
      "AmazonLinuxStorage": {
        "_": "jsii$_aws_cdk_ec2$.AmazonLinuxStorage"
      },
      "GenericLinuxImage": {
        "_": "jsii$_aws_cdk_ec2$.GenericLinuxImage"
      },
      "WindowsVersion": {
        "_": "jsii$_aws_cdk_ec2$.WindowsVersion"
      },
      "MachineImage": {
        "_": "jsii$_aws_cdk_ec2$.MachineImage"
      },
      "OperatingSystemType": {
        "_": "jsii$_aws_cdk_ec2$.OperatingSystemType"
      },
      "OperatingSystem": {
        "_": "jsii$_aws_cdk_ec2$.OperatingSystem"
      },
      "WindowsOS": {
        "_": "jsii$_aws_cdk_ec2$.WindowsOS"
      },
      "LinuxOS": {
        "_": "jsii$_aws_cdk_ec2$.LinuxOS"
      },
      "SecurityGroupRefProps": {
        "_": "jsii$_aws_cdk_ec2$.SecurityGroupRefProps"
      },
      "ISecurityGroup": {
        "_": "jsii$_aws_cdk_ec2$.ISecurityGroup"
      },
      "SecurityGroupRef": {
        "_": "jsii$_aws_cdk_ec2$.SecurityGroupRef"
      },
      "SecurityGroupProps": {
        "_": "jsii$_aws_cdk_ec2$.SecurityGroupProps"
      },
      "SecurityGroup": {
        "_": "jsii$_aws_cdk_ec2$.SecurityGroup"
      },
      "SecurityGroupName": {
        "_": "jsii$_aws_cdk_ec2$.SecurityGroupName"
      },
      "ConnectionRule": {
        "_": "jsii$_aws_cdk_ec2$.ConnectionRule"
      },
      "VpcNetworkProps": {
        "_": "jsii$_aws_cdk_ec2$.VpcNetworkProps"
      },
      "DefaultInstanceTenancy": {
        "_": "jsii$_aws_cdk_ec2$.DefaultInstanceTenancy"
      },
      "OutboundTrafficMode": {
        "_": "jsii$_aws_cdk_ec2$.OutboundTrafficMode"
      },
      "VpcNetwork": {
        "_": "jsii$_aws_cdk_ec2$.VpcNetwork"
      },
      "VpcSubnetProps": {
        "_": "jsii$_aws_cdk_ec2$.VpcSubnetProps"
      },
      "VpcSubnet": {
        "_": "jsii$_aws_cdk_ec2$.VpcSubnet"
      },
      "VpcPublicSubnet": {
        "_": "jsii$_aws_cdk_ec2$.VpcPublicSubnet"
      },
      "VpcPrivateSubnet": {
        "_": "jsii$_aws_cdk_ec2$.VpcPrivateSubnet"
      },
      "VpcPlacementStrategy": {
        "_": "jsii$_aws_cdk_ec2$.VpcPlacementStrategy"
      },
      "VpcNetworkRef": {
        "_": "jsii$_aws_cdk_ec2$.VpcNetworkRef"
      },
      "VpcNetworkRefProps": {
        "_": "jsii$_aws_cdk_ec2$.VpcNetworkRefProps"
      },
      "VpcNetworkId": {
        "_": "jsii$_aws_cdk_ec2$.VpcNetworkId"
      },
      "VpcSubnetRef": {
        "_": "jsii$_aws_cdk_ec2$.VpcSubnetRef"
      },
      "VpcSubnetRefProps": {
        "_": "jsii$_aws_cdk_ec2$.VpcSubnetRefProps"
      },
      "VpcSubnetId": {
        "_": "jsii$_aws_cdk_ec2$.VpcSubnetId"
      }
    }
  },
  "typecount": 68,
  "externalTypes": {
    "jsii$_aws_cdk_core$.Token": {
      "docs": {
        "comment": "Represents a lazy-evaluated value. Can be used to delay evaluation of a certain value\nin case, for example, that it requires some context or late-bound data."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "returns": "The resolved value for this token."
          },
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Token",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Token",
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.sns.TopicResource": {
      "docs": {
        "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html"
      },
      "subtypes": [
        "jsii$_aws_cdk_resources$.sns.TopicResource.SubscriptionProperty"
      ],
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "The list of properties on the CloudFormation model for this resource, with their attache metadata."
          },
          "name": "resourceProperties",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_resources$.PropertySpecification"
              },
              "kind": "map"
            }
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "cloudformation_attribute": "TopicName"
          },
          "name": "topicName",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.sns.TopicName"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "name": "renderProperties",
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_resources$.sns.TopicResource",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.sns",
      "name": "TopicResource",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Resource"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent the core.Construct this TopicResource is a part of",
              "comment": "the core.Construct this TopicResource is a part of"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "props the properties of this TopicResource",
              "comment": "the properties of this TopicResource"
            },
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_resources$.sns.TopicResourceProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a new AWS::SNS::Topic."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Construct": {
      "docs": {
        "comment": "Represents the building block of the construct graph.\nWhen a construct is created, it is always added as a child"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Returns the parent of this node or undefined if this is a root node."
          },
          "name": "parent",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Construct",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The name of this construct"
          },
          "name": "name",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "All direct children of this construct."
          },
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "returns": "/-separated path of this Construct.",
            "comment": "Returns the path of all constructs from root to this construct, in string form."
          },
          "name": "path",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "An array of metadata objects associated with this construct.\nThis can be used, for example, to implement support for deprecation notices, source mapping, etc."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.MetadataEntry"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of this construct."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "depth",
              "type": {
                "primitive": "number",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Returns a string with a tree representation of this construct and it's children."
          },
          "name": "toTreeString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "a child by path or undefined if not found.",
            "comment": "Return a descendant by path, or undefined"
          },
          "name": "tryFindChild",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct",
            "optional": true
          }
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "Child with the given path.",
            "comment": "Return a descendant by path\n\nThrows an exception if the descendant is not found."
          },
          "name": "findChild",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key The context key",
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "value The context value",
                "comment": "The context value"
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "This can be used to set contextual values.\nContext must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden."
          },
          "name": "setContext"
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key The context key",
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The context value or undefined",
            "comment": "Retrieves a value from tree context.\n\nContext is usually initialized at the root, but can be overridden at any point in the tree."
          },
          "name": "getContext",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Retrieve a value from tree-global context\n\nIt is an error if the context object is not available."
          },
          "name": "requireContext",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "type a string denoting the type of metadata",
                "comment": "a string denoting the type of metadata"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.",
                "comment": "the value of the metadata (can be a Token). If null/undefined, metadata will not be added."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "param": "from a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)",
                "comment": "a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)"
              },
              "name": "from",
              "type": {
                "primitive": "any",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Adds a metadata entry to this construct.\nEntries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics."
          },
          "name": "addMetadata",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "message The warning message.",
                "comment": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Adds a { warning: <message> } metadata entry to this construct."
          },
          "name": "addWarning",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "docs": {
            "returns": "An array of validation error messages, or an empty array if there the construct is valid.",
            "comment": "This method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis."
          },
          "name": "validate",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "returns": "A list of validation errors. If the list is empty, all constructs are valid.",
            "comment": "Invokes 'validate' on all child constructs and then on this construct (depth-first)."
          },
          "name": "validateTree",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.ValidationError"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "name": "upTo",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Return the ancestors (including self) of this Construct up until and excluding the indicated component"
          },
          "name": "ancestors",
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "props The props bag.",
                "comment": "The props bag."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "param": "name The name of the required property.",
                "comment": "The name of the required property."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Throws if the `props` bag doesn't include the property `name`.\nIn the future we can add some type-checking here, maybe even auto-generate during compilation."
          },
          "name": "required",
          "protected": true,
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "child The child construct",
                "comment": "The child construct"
              },
              "name": "child",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The resolved path part name of the child",
            "comment": "Adds a child construct to this node."
          },
          "name": "addChild",
          "protected": true
        },
        {
          "docs": {
            "comment": "Locks this construct from allowing more children to be added. After this\ncall, no more children can be added to this construct or to any children."
          },
          "name": "lock",
          "protected": true
        },
        {
          "docs": {
            "comment": "Unlocks this costruct and allows mutations (adding children)."
          },
          "name": "unlock",
          "protected": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Construct",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Construct",
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_iam$.Role": {
      "docs": {
        "comment": "IAM Role\n\nDefines an IAM role. The role is created with an assume policy document associated with\nthe specified AWS service principal defined in `serviceAssumeRole`."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The assume role policy document associated with this role."
          },
          "name": "assumeRolePolicy",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.PolicyDocument",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Returns the ARN of this role."
          },
          "name": "roleArn",
          "type": {
            "fqn": "jsii$_aws_cdk_resources$.iam.RoleArn"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Returns the name of the role."
          },
          "name": "roleName",
          "type": {
            "fqn": "jsii$_aws_cdk_iam$.RoleName"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Returns the ARN of this role."
          },
          "name": "principal",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Returns the role."
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
              }
            }
          ],
          "docs": {
            "comment": "Adds a permission to the role's default policy document.\nIf there is no default policy attached to this role, it will be created."
          },
          "name": "addToPolicy"
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "arn The ARN of the managed policy to attach.",
                "comment": "The ARN of the managed policy to attach."
              },
              "name": "arn",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "Attaches a managed policy to this role."
          },
          "name": "attachManagedPolicy"
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "policy The policy to attach",
                "comment": "The policy to attach"
              },
              "name": "policy",
              "type": {
                "fqn": "jsii$_aws_cdk_iam$.Policy"
              }
            }
          ],
          "docs": {
            "comment": "Attaches a policy to this role."
          },
          "name": "attachInlinePolicy"
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_iam$.IIdentityResource"
        },
        {
          "fqn": "jsii$_aws_cdk_core$.IDependable"
        }
      ],
      "fqn": "jsii$_aws_cdk_iam$.Role",
      "module": "jsii$_aws_cdk_iam$",
      "namespace": "jsii$_aws_cdk_iam$",
      "name": "Role",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_iam$.RoleProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.PolicyStatement": {
      "docs": {
        "comment": "Represents a statement in an IAM policy document."
      },
      "subtypes": [
        "jsii$_aws_cdk_core$.PolicyStatement.Effect"
      ],
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Indicates if this permission has a \"Principal\" section."
          },
          "name": "hasPrincipal",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Indicates if this permission as at least one resource associated with it."
          },
          "name": "hasResource",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Indicates if this permission has only a ``\"*\"`` resource associated with it."
          },
          "name": "isOnlyStarResource",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "action",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addAction",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "name": "addActions",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          },
          "variadic": true
        },
        {
          "parameters": [
            {
              "name": "principal",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
              }
            }
          ],
          "name": "addPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addAwsPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "accountId",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addAwsAccountPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "service",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addServicePrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "federated",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "conditions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "name": "addFederatedPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "name": "addAccountRootPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "resource",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addResource",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Adds a ``\"*\"`` resource to this statement."
          },
          "name": "addAllResources",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "resources",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "name": "addResources",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          },
          "variadic": true
        },
        {
          "parameters": [
            {
              "name": "sid",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "describe",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Sets the permission effect to deny access to resources."
          },
          "name": "allow",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Sets the permission effect to allow access to resources."
          },
          "name": "deny",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "Add a condition to the Policy"
          },
          "name": "addCondition",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "docs": {
            "comment": "Add multiple conditions to the Policy"
          },
          "name": "addConditions",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "deprecated": "For backwards compatibility. Use addCondition() instead.",
            "comment": "Add a condition to the Policy."
          },
          "name": "setCondition",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "accountId",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "limitToAccount",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "name": "toJson",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.PolicyStatement",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "PolicyStatement",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "effect",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.PolicyStatement.Effect",
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Arn": {
      "docs": {
        "comment": "An Amazon Resource Name (ARN).\nhttp://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "components",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.ArnComponents"
              }
            }
          ],
          "docs": {
            "comment": "Creates an ARN from components.\nIf any component is the empty string,\nan empty string will be inserted into the generated ARN\nat the location that component corresponds to."
          },
          "name": "fromComponents",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Arn"
          }
        },
        {
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "an ArnComponents object which allows access to the various\ncomponents of the ARN.",
            "comment": "Given an ARN, parses it and returns components.\n\nThe ARN it will be parsed and validated. The separator (`sep`) will be\nset to '/' if the 6th component includes a '/', in which case, `resource`\nwill be set to the value before the '/' and `resourceName` will be the\nrest. In case there is no '/', `resource` will be set to the 6th\ncomponents and `resourceName` will be set to the rest of the string."
          },
          "name": "parse",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.ArnComponents"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Arn",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Arn",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerCanonicalHostedZoneName": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerCanonicalHostedZoneName",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.elasticloadbalancing",
      "name": "LoadBalancerCanonicalHostedZoneName",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerDnsName": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerDnsName",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.elasticloadbalancing",
      "name": "LoadBalancerDnsName",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerSourceSecurityGroupGroupName": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerSourceSecurityGroupGroupName",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.elasticloadbalancing",
      "name": "LoadBalancerSourceSecurityGroupGroupName",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerSourceSecurityGroupOwnerAlias": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.elasticloadbalancing.LoadBalancerSourceSecurityGroupOwnerAlias",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.elasticloadbalancing",
      "name": "LoadBalancerSourceSecurityGroupOwnerAlias",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.ec2.SecurityGroupId": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupId",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.ec2",
      "name": "SecurityGroupId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_resources$.ec2.SecurityGroupVpcId": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_resources$.ec2.SecurityGroupVpcId",
      "module": "jsii$_aws_cdk_resources$",
      "namespace": "jsii$_aws_cdk_resources$.ec2",
      "name": "SecurityGroupVpcId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Tag": {
      "docs": {
        "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-key"
          },
          "name": "key",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "fqn": "jsii$_aws_cdk_core$.Token"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-value"
          },
          "name": "value",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "fqn": "jsii$_aws_cdk_core$.Token"
                }
              ]
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Tag",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Tag",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.IDependable": {
      "docs": {
        "comment": "Represents a construct that can be \"depended on\" via `addDependency`."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Returns the set of all stack elements (resources, parameters, conditions)\nthat should be added when a resource \"depends on\" this construct."
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.IDependable",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "IDependable",
      "datatype": true
    }
  },
  "name": "jsii$_aws_cdk_ec2$",
  "package": "@aws-cdk/ec2",
  "version": "0.7.2-beta",
  "dependencies": {
    "jsii$_aws_cdk_core$": {
      "package": "@aws-cdk/core",
      "version": "0.7.2-beta"
    },
    "jsii$_aws_cdk_iam$": {
      "package": "@aws-cdk/iam",
      "version": "0.7.2-beta"
    },
    "jsii$_aws_cdk_resources$": {
      "package": "@aws-cdk/resources",
      "version": "0.7.2-beta"
    }
  },
  "bundled": {
    "@aws-cdk/util": "^0.7.2-beta"
  },
  "names": {
    "java": "com.amazonaws.cdk.ec2",
    "dotnet": "AWS.Cdk.Ec2",
    "js": "@aws-cdk/ec2"
  },
  "nativenames": {
    "jsii$_aws_cdk_core$": {
      "java": "com.amazonaws.cdk",
      "dotnet": "AWS.Cdk",
      "js": "@aws-cdk/core"
    },
    "jsii$_aws_cdk_iam$": {
      "java": "com.amazonaws.cdk.iam",
      "dotnet": "AWS.Cdk.Iam",
      "js": "@aws-cdk/iam"
    },
    "jsii$_aws_cdk_resources$": {
      "java": "com.amazonaws.cdk.resources",
      "dotnet": "AWS.Cdk.Resources",
      "js": "@aws-cdk/resources"
    },
    "jsii$_aws_cdk_ec2$": {
      "java": "com.amazonaws.cdk.ec2",
      "dotnet": "AWS.Cdk.Ec2",
      "js": "@aws-cdk/ec2"
    }
  },
  "readme": {
    "markdown": "## AWS Compute and Networking Construct Library\n\nThe `aws-cdk-ec2` package contains primitives for setting up networking,\ninstances, and load balancers.\n\n### VPC\n\nMost projects need a Virtual Private Cloud to provide security by means of\nnetwork partitioning. This is easily achieved by creating an instance of\n`VpcNetwork`:\n\n```ts\nimport { VpcNetwork } from '@aws-cdk/ec2';\n\nconst vpc = new VpcNetwork(this, 'VPC');\n```\n\nAll default Constructs requires EC2 instances to be launched inside a VPC, so\nyou should generally start by defining a VPC whenever you need to launch\ninstances for your project.\n\nOur default `VpcNetwork` class creates a private and public subnet for every\navailability zone. Classes that use the VPC will generally launch instances\ninto all private subnets, and provide a parameter called `vpcPlacement` to\nallow you to override the placement. [Read more about\nsubnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html).\n\n### Fleet\n\nA `Fleet` represents a number of instances on which you run your code. You\npick the size of the fleet, the instance type and the OS image:\n\n```ts\nimport { Fleet, InstanceClass, InstanceSize, InstanceTypePair, makeLinuxMachineImage, VpcNetwork } from '../lib';\n\nnew Fleet(stack, 'Fleet', {\n    vpc,\n    instanceType: new InstanceTypePair(InstanceClass.Burstable2, InstanceSize.Micro),\n    machineImage: new LinuxImage({\n        'us-east-1': 'ami-97785bed'\n    })\n});\n```\n\n> NOTE: Fleet has an property called `allowAllOutbound` (allowing the instances to contact the\n> internet) which is set to `true` by default. Be sure to set this to `false`  if you don't want\n> your instances to be able to start arbitrary connections.\n\n### AMIs\n\nAMIs control the OS that gets launched when you start your instance.\n\nDepending on the type of AMI, you select it a different way.\n\nThe latest version of Windows images are regionally published under labels,\nso you can select Windows images like this:\n\n    new WindowsImage(WindowsVersion.WindowsServer2016EnglishNanoBase)\n\nYou can select the latest Amazon Linux image like this:\n\n    new AmazonLinuxImage()\n\nOther Linux images are unfortunately not currently published this way, so you have\nto supply a region-to-AMI map when creating a Linux image:\n\n    machineImage: new GenericLinuxImage({\n        'us-east-1': 'ami-97785bed',\n        'eu-west-1': 'ami-12345678',\n        // ...\n    })\n\n> NOTE: Selecting Linux images will change when the information is published in an automatically\n> consumable way.\n\n### Load Balancer\n\nLoad balancers send traffic to one or more fleets. Create a load balancer,\nset up listeners and a health check, and supply the fleet(s) you want to load\nbalance to in the `targets` property.\n\nThe load balancer allows all connections by default. If you want to change that,\npass the `allowConnectionsFrom` property while setting up the listener.\n\n```ts\nnew ClassicLoadBalancer(stack, 'LB', {\n    vpc,\n    internetFacing: true,\n    listeners: [{\n        externalPort: 80,\n    }],\n    healthCheck: {\n        port: 80\n    },\n    targets: [fleet]\n});\n```\n\n### Allowing Connections\n\nIn AWS, all connections to and from EC2 instances are governed by *Security\nGroups*. You can think of these as a firewall with rules. All Constructs that\ncreate instances on your behalf implicitly have such a security group.\nUnless otherwise indicated using properites, the security groups start out\nempty; that is, no connections are allowed by default.\n\nIn general, whenever you link two Constructs together (such as the load balancer and the\nfleet in the previous example), the security groups will be automatically updated to allow\nnetwork connections between the indicated instances. In other cases, you will need to\nconfigure these allows connections yourself, for example if the connections you want to\nallow do not originate from instances in a CDK construct, or if you want to allow\nconnections among instances inside a single security group.\n\nAll Constructs with security groups have a member called `connections`, which\ncan be used to configure permissible connections. In the most general case, a\ncall to allow connections needs both a connection peer and the type of\nconnection to allow:\n\n```ts\nlb.connections.allowFrom(new AnyIPv4(), new TcpPort(443), 'Allow inbound');\n\n// Or using a convenience function\nlb.connections.allowFromAnyIpv4(new TcpPort(443), 'Allow inbound');\n```\n\n### Connection Peers\n\nThere are various classes that implement the connection peer part:\n\n```ts\n// Simple connection peers\nlet peer = new CidrIp(\"10.0.0.0/16\");\nlet peer = new AnyIPv4();\nlet peer = new CidrIpv6(\"::0/0\");\nlet peer = new AnyIPv6();\nlet peer = new PrefixList(\"pl-12345\");\nfleet.connections.allowTo(peer, new TcpPort(443), 'Allow outbound HTTPS');\n```\n\nAny object that has a security group can itself be used as a connection peer:\n\n```ts\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, new TcpPort(80), 'Allow between fleets');\n\nfleet.connections.allowTcpPort(80), 'Allow from load balancer');\n```\n\n### Port Ranges\n\nThe connections that are allowed are specified by port ranges. A number of classes provide\nthe connection specifier:\n\n```ts\nnew TcpPort(80);\nnew TcpPortRange(60000, 65535);\nnew TcpAllPorts();\nnew AllConnections();\n```\n\n> NOTE: This set is not complete yet; for example, there is no library support for ICMP at the moment.\n> However, you can write your own classes to implement those.\n\n### Default Ports\n\nSome Constructs have default ports associated with them. For example, the\nlistener of a load balancer does (it's the public port), or instances of an\nRDS database (it's the port the database is accepting connections on).\n\nIf the object you're calling the peering method on has a default port associated with it, you can call\n`allowDefaultPortFrom()` and omit the port specifier. If the argument has an associated default port, call\n`allowToDefaultPort()`.\n\nFor example:\n\n```ts\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4('Allow public');\n\n// Port implicit in peer\nfleet.connections.allowToDefaultPort(rdsDatabase, 'Fleet can access database');\n```\n"
  },
  "code": "var jsii$_aws_cdk_ec2$ =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_core$;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst connections_1 = __webpack_require__(2);\n/**\n * A connection to and from a given IP range\n */\nclass CidrIp {\n    constructor(cidrIp) {\n        this.cidrIp = cidrIp;\n        this.canInlineRule = true;\n        this.connections = new connections_1.SecurityGrouplessConnections(this);\n    }\n    /**\n     * Produce the ingress rule JSON for the given connection\n     */\n    toIngressRuleJSON() {\n        return { cidrIp: this.cidrIp };\n    }\n    /**\n     * Produce the egress rule JSON for the given connection\n     */\n    toEgressRuleJSON() {\n        return { cidrIp: this.cidrIp };\n    }\n}\nexports.CidrIp = CidrIp;\n/**\n * Any IPv4 address\n */\nclass AnyIPv4 extends CidrIp {\n    constructor() {\n        super(\"0.0.0.0/0\");\n    }\n}\nexports.AnyIPv4 = AnyIPv4;\n/**\n * A connection to a from a given IPv6 range\n */\nclass CidrIpv6 {\n    constructor(cidrIpv6) {\n        this.cidrIpv6 = cidrIpv6;\n        this.canInlineRule = true;\n        this.connections = new connections_1.SecurityGrouplessConnections(this);\n    }\n    /**\n     * Produce the ingress rule JSON for the given connection\n     */\n    toIngressRuleJSON() {\n        return { cidrIpv6: this.cidrIpv6 };\n    }\n    /**\n     * Produce the egress rule JSON for the given connection\n     */\n    toEgressRuleJSON() {\n        return { cidrIpv6: this.cidrIpv6 };\n    }\n}\nexports.CidrIpv6 = CidrIpv6;\n/**\n * Any IPv6 address\n */\nclass AnyIPv6 extends CidrIpv6 {\n    constructor() {\n        super(\"::0/0\");\n    }\n}\nexports.AnyIPv6 = AnyIPv6;\n/**\n * A prefix list\n *\n * Prefix lists are used to allow traffic to VPC-local service endpoints.\n *\n * For more information, see this page:\n *\n * https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html\n */\nclass PrefixList {\n    constructor(prefixListId) {\n        this.prefixListId = prefixListId;\n        this.canInlineRule = true;\n        this.connections = new connections_1.SecurityGrouplessConnections(this);\n    }\n    toIngressRuleJSON() {\n        throw new Error('Prefix lists can only be used for egress rules');\n    }\n    toEgressRuleJSON() {\n        return { destinationPrefixListId: this.prefixListId };\n    }\n}\nexports.PrefixList = PrefixList;\n/**\n * Protocol for use in Connection Rules\n */\nvar Protocol;\n(function (Protocol) {\n    Protocol[\"All\"] = \"-1\";\n    Protocol[\"Tcp\"] = \"tcp\";\n    Protocol[\"Udp\"] = \"udp\";\n    Protocol[\"Icmp\"] = \"icmp\";\n    Protocol[\"Icmpv6\"] = \"58\";\n})(Protocol = exports.Protocol || (exports.Protocol = {}));\n/**\n * A single TCP port\n */\nclass TcpPort {\n    constructor(port) {\n        this.port = port;\n        this.canInlineRule = true;\n    }\n    toRuleJSON() {\n        return {\n            ipProtocol: Protocol.Tcp,\n            fromPort: this.port,\n            toPort: this.port\n        };\n    }\n}\nexports.TcpPort = TcpPort;\n/**\n * A single TCP port that is provided by a resource attribute\n */\nclass TcpPortFromAttribute {\n    constructor(port) {\n        this.port = port;\n        this.canInlineRule = false;\n    }\n    toRuleJSON() {\n        return {\n            ipProtocol: Protocol.Tcp,\n            fromPort: this.port,\n            toPort: this.port\n        };\n    }\n}\nexports.TcpPortFromAttribute = TcpPortFromAttribute;\n/**\n * A TCP port range\n */\nclass TcpPortRange {\n    constructor(startPort, endPort) {\n        this.startPort = startPort;\n        this.endPort = endPort;\n        this.canInlineRule = true;\n    }\n    toRuleJSON() {\n        return {\n            ipProtocol: Protocol.Tcp,\n            fromPort: this.startPort,\n            toPort: this.endPort\n        };\n    }\n}\nexports.TcpPortRange = TcpPortRange;\n/**\n * All TCP Ports\n */\nclass TcpAllPorts {\n    constructor() {\n        this.canInlineRule = true;\n    }\n    toRuleJSON() {\n        return {\n            ipProtocol: Protocol.Tcp,\n            fromPort: 0,\n            toPort: 65535\n        };\n    }\n}\nexports.TcpAllPorts = TcpAllPorts;\n/**\n * All TCP Ports\n */\nclass AllConnections {\n    constructor() {\n        this.canInlineRule = true;\n    }\n    toRuleJSON() {\n        return {\n            ipProtocol: '-1',\n            fromPort: -1,\n            toPort: -1,\n        };\n    }\n}\nexports.AllConnections = AllConnections;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst connection_1 = __webpack_require__(1);\n/**\n * Connections for an object that does not have default ports\n */\nclass Connections {\n    constructor(securityGroup) {\n        this.securityGroup = securityGroup;\n        this.connectionPeer = this.securityGroup;\n    }\n    /**\n     * Allow connections to the peer on their default port\n     */\n    allowToDefaultPort(other, description) {\n        this.allowTo(other, other.defaultPortRange, description);\n    }\n    /**\n     * Allow connections to the peer on the given port\n     */\n    allowTo(other, portRange, description) {\n        this.securityGroup.addEgressRule(other.connections.connectionPeer, portRange, description);\n        other.connections.allowFrom(new ConnectionsHolder(new SecurityGrouplessConnections(this.connectionPeer)), portRange, description);\n    }\n    /**\n     * Allow connections from the peer on the given port\n     */\n    allowFrom(other, portRange, description) {\n        this.securityGroup.addIngressRule(other.connections.connectionPeer, portRange, description);\n        other.connections.allowTo(new ConnectionsHolder(new SecurityGrouplessConnections(this.connectionPeer)), portRange, description);\n    }\n    /**\n     * Allow hosts inside the security group to connect to each other on the given port\n     */\n    allowInternally(portRange, description) {\n        this.securityGroup.addIngressRule(this.securityGroup, portRange, description);\n    }\n    /**\n     * Allow to all IPv4 ranges\n     */\n    allowToAnyIpv4(portRange, description) {\n        this.allowTo(new connection_1.AnyIPv4(), portRange, description);\n    }\n    /**\n     * Allow from any IPv4 ranges\n     */\n    allowFromAnyIpv4(portRange, description) {\n        this.allowFrom(new connection_1.AnyIPv4(), portRange, description);\n    }\n}\nexports.Connections = Connections;\n/**\n * A class to orchestrate connections that already has default ports\n */\nclass DefaultConnections extends Connections {\n    constructor(securityGroup, defaultPortRangeProvider) {\n        // We take a IDefaultConnectable as an argument instead of the port\n        // range directly so (a) we force the containing construct to implement\n        // IDefaultConnectable and then (b) so they don't have to repeat the information.\n        //\n        // Slightly risky since this requires that the container initializes in the right order.\n        super(securityGroup);\n        this.defaultPortRange = defaultPortRangeProvider.defaultPortRange;\n        if (this.defaultPortRange == null) {\n            throw new Error(\"Ordering problem: create DefaultConnections() after initializing defaultPortRange\");\n        }\n    }\n    /**\n     * Allow connections from the peer on our default port\n     *\n     * Even if the peer has a default port, we will always use our default port.\n     */\n    allowDefaultPortFrom(other, description) {\n        this.allowFrom(other, this.defaultPortRange, description);\n    }\n    /**\n     * Allow hosts inside the security group to connect to each other\n     */\n    allowDefaultPortInternally(description) {\n        this.allowInternally(this.defaultPortRange, description);\n    }\n    /**\n     * Allow default connections from all IPv4 ranges\n     */\n    allowDefaultPortFromAnyIpv4(description) {\n        this.allowFromAnyIpv4(this.defaultPortRange, description);\n    }\n}\nexports.DefaultConnections = DefaultConnections;\n/**\n * This object is used by peers who don't allow reverse connections\n *\n * It still has an associated connection peer, but that peer does not\n * have any security groups to add connections to.\n */\nclass SecurityGrouplessConnections {\n    constructor(connectionPeer) {\n        this.connectionPeer = connectionPeer;\n    }\n    allowTo(_other, _connection, _description) {\n        // Nothing to do\n    }\n    allowFrom(_other, _connection, _description) {\n        // Nothing to do\n    }\n}\nexports.SecurityGrouplessConnections = SecurityGrouplessConnections;\n/**\n * Class that implements IConnectable that can be constructed\n *\n * This is simply used to implement IConnectable when we need\n * to make reverse connections.\n */\nclass ConnectionsHolder {\n    constructor(connections) {\n        this.connections = connections;\n    }\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_resources$;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\nconst resources_1 = __webpack_require__(3);\nconst util_1 = __webpack_require__(9);\n/**\n * A SecurityGroup that is not created in this template\n */\nclass SecurityGroupRef extends core_1.Construct {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.canInlineRule = false;\n        this.securityGroupId = props.securityGroupId;\n    }\n    addIngressRule(peer, connection, description) {\n        new resources_1.ec2.SecurityGroupIngressResource(this, util_1.slugify(description), Object.assign({ groupId: this.securityGroupId }, peer.toIngressRuleJSON(), connection.toRuleJSON(), { description }));\n    }\n    addEgressRule(peer, connection, description) {\n        new resources_1.ec2.SecurityGroupEgressResource(this, util_1.slugify(description), Object.assign({ groupId: this.securityGroupId }, peer.toEgressRuleJSON(), connection.toRuleJSON(), { description }));\n    }\n    toIngressRuleJSON() {\n        return { sourceSecurityGroupId: this.securityGroupId };\n    }\n    toEgressRuleJSON() {\n        return { destinationSecurityGroupId: this.securityGroupId };\n    }\n}\nexports.SecurityGroupRef = SecurityGroupRef;\n/**\n * Creates an Amazon EC2 security group within a VPC.\n *\n * This class has an additional optimization over SecurityGroupRef that it can also create\n * inline ingress and egress rule (which saves on the total number of resources inside\n * the template).\n */\nclass SecurityGroup extends SecurityGroupRef {\n    constructor(parent, name, props) {\n        super(parent, name, { securityGroupId: new core_1.Token(() => this.securityGroup.securityGroupId) });\n        this.directIngressRules = [];\n        this.directEgressRules = [];\n        const groupDescription = props.description || this.path;\n        this.securityGroup = new resources_1.ec2.SecurityGroupResource(this, 'Resource', {\n            groupName: props.groupName,\n            groupDescription,\n            securityGroupIngress: new core_1.Token(() => this.directIngressRules),\n            securityGroupEgress: new core_1.Token(() => this.directEgressRules),\n            vpcId: props.vpc.vpcId,\n        });\n        this.groupName = this.securityGroup.ref;\n        this.vpcId = this.securityGroup.securityGroupVpcId;\n    }\n    addIngressRule(peer, connection, description) {\n        if (!peer.canInlineRule || !connection.canInlineRule) {\n            super.addIngressRule(peer, connection, description);\n            return;\n        }\n        this.addDirectIngressRule(Object.assign({}, peer.toIngressRuleJSON(), connection.toRuleJSON(), { description }));\n    }\n    addEgressRule(peer, connection, description) {\n        if (!peer.canInlineRule || !connection.canInlineRule) {\n            super.addEgressRule(peer, connection, description);\n            return;\n        }\n        this.addDirectEgressRule(Object.assign({}, peer.toIngressRuleJSON(), connection.toRuleJSON(), { description }));\n    }\n    /**\n     * Add a direct ingress rule\n     */\n    addDirectIngressRule(rule) {\n        if (!this.hasIngressRule(rule)) {\n            this.directIngressRules.push(rule);\n        }\n    }\n    /**\n     * Return whether the given ingress rule exists on the group\n     */\n    hasIngressRule(rule) {\n        return this.directIngressRules.findIndex(r => ingressRulesEqual(r, rule)) > -1;\n    }\n    /**\n     * Add a direct egress rule\n     */\n    addDirectEgressRule(rule) {\n        if (!this.hasEgressRule(rule)) {\n            this.directEgressRules.push(rule);\n        }\n    }\n    /**\n     * Return whether the given egress rule exists on the group\n     */\n    hasEgressRule(rule) {\n        return this.directEgressRules.findIndex(r => egressRulesEqual(r, rule)) > -1;\n    }\n}\nexports.SecurityGroup = SecurityGroup;\nclass SecurityGroupName extends core_1.Token {\n}\nexports.SecurityGroupName = SecurityGroupName;\n/**\n * Compare two ingress rules for equality the same way CloudFormation would (discarding description)\n */\nfunction ingressRulesEqual(a, b) {\n    return a.cidrIp === b.cidrIp\n        && a.cidrIpv6 === b.cidrIpv6\n        && a.fromPort === b.fromPort\n        && a.toPort === b.toPort\n        && a.ipProtocol === b.ipProtocol\n        && a.sourceSecurityGroupId === b.sourceSecurityGroupId\n        && a.sourceSecurityGroupName === b.sourceSecurityGroupName\n        && a.sourceSecurityGroupOwnerId === b.sourceSecurityGroupOwnerId;\n}\n/**\n * Compare two egress rules for equality the same way CloudFormation would (discarding description)\n */\nfunction egressRulesEqual(a, b) {\n    return a.cidrIp === b.cidrIp\n        && a.cidrIpv6 === b.cidrIpv6\n        && a.fromPort === b.fromPort\n        && a.toPort === b.toPort\n        && a.ipProtocol === b.ipProtocol\n        && a.destinationPrefixListId === b.destinationPrefixListId\n        && a.destinationSecurityGroupId === b.destinationSecurityGroupId;\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\n/**\n * A new or imported VPC\n */\nclass VpcNetworkRef extends core_1.Construct {\n    constructor() {\n        super(...arguments);\n        /**\n         * Parts of the VPC that constitute full construction\n         */\n        this.dependencyElements = [];\n    }\n    /**\n     * Import an exported VPC\n     */\n    static import(parent, name, props) {\n        return new ImportedVpcNetwork(parent, name, props);\n    }\n    /**\n     * Return the subnets appropriate for the placement strategy\n     */\n    subnets(placement) {\n        if (!placement) {\n            return this.privateSubnets;\n        }\n        return placement.usePublicSubnets ? this.publicSubnets : this.privateSubnets;\n    }\n    /**\n     * Export this VPC from the stack\n     */\n    export() {\n        return {\n            vpcId: new core_1.Output(this, 'VpcId', { value: this.vpcId }).makeImportValue(),\n            availabilityZones: this.publicSubnets.map(s => s.availabilityZone),\n            publicSubnetIds: new core_1.StringListOutput(this, 'PublicSubnetIDs', { values: this.publicSubnets.map(s => s.subnetId) }).makeImportValues(),\n            privateSubnetIds: new core_1.StringListOutput(this, 'PrivateSubnetIDs', { values: this.privateSubnets.map(s => s.subnetId) }).makeImportValues(),\n        };\n    }\n}\nexports.VpcNetworkRef = VpcNetworkRef;\n/**\n * An imported VpcNetwork\n */\nclass ImportedVpcNetwork extends VpcNetworkRef {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.vpcId = props.vpcId;\n        if (props.availabilityZones.length !== props.publicSubnetIds.length) {\n            throw new Error('Availability zone and public subnet ID arrays must be same length');\n        }\n        if (props.availabilityZones.length !== props.privateSubnetIds.length) {\n            throw new Error('Availability zone and private subnet ID arrays must be same length');\n        }\n        const n = props.availabilityZones.length;\n        this.publicSubnets = range(n).map(i => VpcSubnetRef.import(this, `PublicSubnet${i}`, {\n            availabilityZone: props.availabilityZones[i],\n            subnetId: props.publicSubnetIds[i]\n        }));\n        this.privateSubnets = range(n).map(i => VpcSubnetRef.import(this, `PrivateSubnet${i}`, {\n            availabilityZone: props.availabilityZones[i],\n            subnetId: props.privateSubnetIds[i]\n        }));\n    }\n}\n/**\n * Identifier for a VPC\n */\nclass VpcNetworkId extends core_1.Token {\n}\nexports.VpcNetworkId = VpcNetworkId;\n/**\n * A new or imported VPC Subnet\n */\nclass VpcSubnetRef extends core_1.Construct {\n    constructor() {\n        super(...arguments);\n        /**\n         * Parts of this VPC subnet\n         */\n        this.dependencyElements = [];\n    }\n    static import(parent, name, props) {\n        return new ImportedVpcSubnet(parent, name, props);\n    }\n}\nexports.VpcSubnetRef = VpcSubnetRef;\n/**\n * Subnet of an imported VPC\n */\nclass ImportedVpcSubnet extends VpcSubnetRef {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.availabilityZone = props.availabilityZone;\n        this.subnetId = props.subnetId;\n    }\n}\n/**\n * Id of a VPC Subnet\n */\nclass VpcSubnetId extends core_1.Token {\n}\nexports.VpcSubnetId = VpcSubnetId;\n/**\n * Generate the list of numbers of [0..n)\n */\nfunction range(n) {\n    const ret = [];\n    for (let i = 0; i < n; i++) {\n        ret.push(i);\n    }\n    return ret;\n}\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(1));\n__export(__webpack_require__(2));\n__export(__webpack_require__(7));\n__export(__webpack_require__(10));\n__export(__webpack_require__(11));\n__export(__webpack_require__(12));\n__export(__webpack_require__(4));\n__export(__webpack_require__(13));\n__export(__webpack_require__(5));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\nconst iam_1 = __webpack_require__(8);\nconst resources_1 = __webpack_require__(3);\nconst connection_1 = __webpack_require__(1);\nconst connections_1 = __webpack_require__(2);\nconst security_group_1 = __webpack_require__(4);\n/**\n * A Fleet represents a managed set of EC2 instances\n *\n * The Fleet models a number of AutoScalingGroups, a launch configuration, a\n * security group and an instance role.\n *\n * It allows adding arbitrary commands to the startup scripts of the instances\n * in the fleet.\n *\n * The ASG spans all availability zones.\n */\nclass Fleet extends core_1.Construct {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.userDataLines = new Array();\n        this.loadBalancerNames = [];\n        this.securityGroup = new security_group_1.SecurityGroup(this, 'InstanceSecurityGroup', { vpc: props.vpc });\n        this.connections = new connections_1.Connections(this.securityGroup);\n        this.connectionPeer = this.securityGroup;\n        if (props.allowAllOutbound !== false) {\n            this.connections.allowTo(new connection_1.AnyIPv4(), new connection_1.AllConnections(), 'Outbound traffic allowed by default');\n        }\n        this.role = new iam_1.Role(this, 'InstanceRole', {\n            assumedBy: new core_1.ServicePrincipal('ec2.amazonaws.com')\n        });\n        const iamProfile = new resources_1.iam.InstanceProfileResource(this, 'InstanceProfile', {\n            roles: [this.role.roleName]\n        });\n        // use delayed evaluation\n        const machineImage = props.machineImage.getImage(this);\n        const userDataToken = new core_1.Token(() => new core_1.FnBase64((machineImage.os.createUserData(this.userDataLines))));\n        const launchConfig = new resources_1.autoscaling.LaunchConfigurationResource(this, 'LaunchConfig', {\n            imageId: machineImage.imageId,\n            keyName: props.keyName,\n            instanceType: props.instanceType.toString(),\n            securityGroups: [this.securityGroup.securityGroupId],\n            iamInstanceProfile: iamProfile.ref,\n            userData: userDataToken\n        });\n        launchConfig.addDependency(this.role);\n        const minSize = props.minSize || 1;\n        const maxSize = props.maxSize || 1;\n        const desiredCapacity = props.desiredCapacity || 1;\n        const asgProps = {\n            minSize: minSize.toString(),\n            maxSize: maxSize.toString(),\n            desiredCapacity: desiredCapacity.toString(),\n            launchConfigurationName: launchConfig.ref,\n            loadBalancerNames: new core_1.Token(() => this.loadBalancerNames),\n        };\n        if (props.notificationsTopic) {\n            asgProps.notificationConfigurations = [];\n            asgProps.notificationConfigurations.push({\n                topicArn: props.notificationsTopic.ref,\n                notificationTypes: [\n                    \"autoscaling:EC2_INSTANCE_LAUNCH\",\n                    \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",\n                    \"autoscaling:EC2_INSTANCE_TERMINATE\",\n                    \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\"\n                ],\n            });\n        }\n        const subnets = props.vpc.subnets(props.vpcPlacement);\n        asgProps.vpcZoneIdentifier = subnets.map(n => n.subnetId);\n        this.autoScalingGroup = new resources_1.autoscaling.AutoScalingGroupResource(this, 'ASG', asgProps);\n        this.osType = machineImage.os.type;\n    }\n    attachToClassicLB(loadBalancer) {\n        this.loadBalancerNames.push(loadBalancer.loadBalancerName);\n    }\n    /**\n     * Add command to the startup script of fleet instances.\n     * The command must be in the scripting language supported by the fleet's OS (i.e. Linux/Windows).\n     */\n    addUserData(script) {\n        this.userDataLines.push(script);\n    }\n    autoScalingGroupName() {\n        return this.autoScalingGroup.ref;\n    }\n    /**\n     * Adds a statement to the IAM role assumed by instances of this fleet.\n     */\n    addToRolePolicy(statement) {\n        this.role.addToPolicy(statement);\n    }\n}\nexports.Fleet = Fleet;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_iam$;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\nfunction normalizeStackParameters(props) {\n    const params = {};\n    for (const prop of Object.keys(props)) {\n        let value = props[prop];\n        if (Array.isArray(value)) {\n            // We can't ACTUALLY pass token values here (must be literal strings), but in the case where this is a MissingContext\n            // token we also don't want to fail, since the template will be resynthesized later\n            // FIXME: Make a distinction between those two cases.\n            value = value.map(el => el instanceof core_1.Token ? \"(token value)\" : el).join(',');\n        }\n        else if (typeof value === 'boolean') {\n            value = value.toString();\n        }\n        else if (typeof value === 'object' && !(value instanceof core_1.Token)) {\n            throw new Error(`Object parameters are not supported for property ${prop}: ${JSON.stringify(value)}`);\n        }\n        else if (typeof value === 'function') {\n            throw new Error(`Property ${prop} is a function`);\n        }\n        // Since we're going to plug this into a stack template that is expecting\n        // pascalcased parameter names, uppercase the first letter here.\n        params[upperCaseFirst(prop)] = value;\n    }\n    return params;\n}\nexports.normalizeStackParameters = normalizeStackParameters;\nfunction upperCaseFirst(x) {\n    return x.substr(0, 1).toUpperCase() + x.substr(1);\n}\n/**\n * Turn an arbitrary string into one that can be used as a CloudFormation identifier by stripping special characters\n *\n * (At the moment, no efforts are taken to prevent collissions, but we can add that later when it becomes necessary).\n */\nfunction slugify(x) {\n    return x.replace(/[^a-zA-Z0-9]/g, '');\n}\nexports.slugify = slugify;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * What class and generation of instance to use\n *\n * We have both symbolic and concrete enums for every type.\n *\n * The first are for people that want to specify by purpose,\n * the second one are for people who already know exactly what\n * 'R4' means.\n */\nvar InstanceClass;\n(function (InstanceClass) {\n    /**\n     * Standard instances, 3rd generation\n     */\n    InstanceClass[\"Standard3\"] = \"m3\";\n    /**\n     * Standard instances, 3rd generation\n     */\n    InstanceClass[\"M3\"] = \"m3\";\n    /**\n     * Standard instances, 4th generation\n     */\n    InstanceClass[\"Standard4\"] = \"m4\";\n    /**\n     * Standard instances, 4th generation\n     */\n    InstanceClass[\"M4\"] = \"m4\";\n    /**\n     * Standard instances, 5th generation\n     */\n    InstanceClass[\"Standard5\"] = \"m5\";\n    /**\n     * Standard instances, 5th generation\n     */\n    InstanceClass[\"M5\"] = \"m5\";\n    /**\n     * Memory optimized instances, 3rd generation\n     */\n    InstanceClass[\"Memory3\"] = \"r3\";\n    /**\n     * Memory optimized instances, 3rd generation\n     */\n    InstanceClass[\"R3\"] = \"r3\";\n    /**\n     * Memory optimized instances, 3rd generation\n     */\n    InstanceClass[\"Memory4\"] = \"r4\";\n    /**\n     * Memory optimized instances, 3rd generation\n     */\n    InstanceClass[\"R4\"] = \"r4\";\n    /**\n     * Compute optimized instances, 3rd generation\n     */\n    InstanceClass[\"Compute3\"] = \"c3\";\n    /**\n     * Compute optimized instances, 3rd generation\n     */\n    InstanceClass[\"C3\"] = \"c3\";\n    /**\n     * Compute optimized instances, 4th generation\n     */\n    InstanceClass[\"Compute4\"] = \"c4\";\n    /**\n     * Compute optimized instances, 4th generation\n     */\n    InstanceClass[\"C4\"] = \"c4\";\n    /**\n     * Compute optimized instances, 5th generation\n     */\n    InstanceClass[\"Compute5\"] = \"c5\";\n    /**\n     * Compute optimized instances, 5th generation\n     */\n    InstanceClass[\"C5\"] = \"c5\";\n    /**\n     * Storage-optimized instances, 2nd generation\n     */\n    InstanceClass[\"Storage2\"] = \"d2\";\n    /**\n     * Storage-optimized instances, 2nd generation\n     */\n    InstanceClass[\"D2\"] = \"d2\";\n    /**\n     * Storage/compute balanced instances, 1st generation\n     */\n    InstanceClass[\"StorageCompute1\"] = \"h1\";\n    /**\n     * Storage/compute balanced instances, 1st generation\n     */\n    InstanceClass[\"H1\"] = \"h1\";\n    /**\n     * I/O-optimized instances, 3rd generation\n     */\n    InstanceClass[\"Io3\"] = \"i3\";\n    /**\n     * I/O-optimized instances, 3rd generation\n     */\n    InstanceClass[\"I3\"] = \"i3\";\n    /**\n     * Burstable instances, 2nd generation\n     */\n    InstanceClass[\"Burstable2\"] = \"t2\";\n    /**\n     * Burstable instances, 2nd generation\n     */\n    InstanceClass[\"T2\"] = \"t2\";\n    /**\n     * Memory-intensive instances, 1st generation\n     */\n    InstanceClass[\"MemoryIntensive1\"] = \"x1\";\n    /**\n     * Memory-intensive instances, 1st generation\n     */\n    InstanceClass[\"X1\"] = \"x1\";\n    /**\n     * Memory-intensive instances, extended, 1st generation\n     */\n    InstanceClass[\"MemoryIntensive1Extended\"] = \"x1e\";\n    /**\n     * Memory-intensive instances, 1st generation\n     */\n    InstanceClass[\"X1e\"] = \"x1e\";\n    /**\n     * Instances with customizable hardware acceleration, 1st generation\n     */\n    InstanceClass[\"Fpga1\"] = \"f1\";\n    /**\n     * Instances with customizable hardware acceleration, 1st generation\n     */\n    InstanceClass[\"F1\"] = \"f1\";\n    /**\n     * Graphics-optimized instances, 3rd generation\n     */\n    InstanceClass[\"Graphics3\"] = \"g3\";\n    /**\n     * Graphics-optimized instances, 3rd generation\n     */\n    InstanceClass[\"G3\"] = \"g3\";\n    /**\n     * Parallel-processing optimized instances, 2nd generation\n     */\n    InstanceClass[\"Parallel2\"] = \"p2\";\n    /**\n     * Parallel-processing optimized instances, 2nd generation\n     */\n    InstanceClass[\"P2\"] = \"p2\";\n    /**\n     * Parallel-processing optimized instances, 3nd generation\n     */\n    InstanceClass[\"Parallel3\"] = \"p3\";\n    /**\n     * Parallel-processing optimized instances, 3nd generation\n     */\n    InstanceClass[\"P3\"] = \"p3\";\n})(InstanceClass = exports.InstanceClass || (exports.InstanceClass = {}));\n/**\n * What size of instance to use\n */\nvar InstanceSize;\n(function (InstanceSize) {\n    InstanceSize[\"Micro\"] = \"micro\";\n    InstanceSize[\"Small\"] = \"small\";\n    InstanceSize[\"Medium\"] = \"medium\";\n    InstanceSize[\"Large\"] = \"large\";\n    InstanceSize[\"XLarge\"] = \"xlarge\";\n    InstanceSize[\"XLarge2\"] = \"2xlarge\";\n    InstanceSize[\"XLarge4\"] = \"4xlarge\";\n    InstanceSize[\"XLarge8\"] = \"8xlarge\";\n    InstanceSize[\"XLarge9\"] = \"9xlarge\";\n    InstanceSize[\"XLarge10\"] = \"10xlarge\";\n    InstanceSize[\"XLarge12\"] = \"12xlarge\";\n    InstanceSize[\"XLarge16\"] = \"16xlarge\";\n    InstanceSize[\"XLarge18\"] = \"18xlarge\";\n    InstanceSize[\"XLarge24\"] = \"24xlarge\";\n    InstanceSize[\"XLarge32\"] = \"32xlarge\";\n})(InstanceSize = exports.InstanceSize || (exports.InstanceSize = {}));\n/**\n * Instance type for EC2 instances\n *\n * This class takes a literal string, good if you already\n * know the identifier of the type you want.\n */\nclass InstanceType {\n    constructor(instanceTypeIdentifier) {\n        this.instanceTypeIdentifier = instanceTypeIdentifier;\n    }\n    /**\n     * Return the instance type as a dotted string\n     */\n    toString() {\n        return this.instanceTypeIdentifier;\n    }\n}\nexports.InstanceType = InstanceType;\n/**\n * Instance type for EC2 instances\n *\n * This class takes a combination of a class and size.\n *\n * Be aware that not all combinations of class and size are available, and not all\n * classes are available in all regions.\n */\nclass InstanceTypePair extends InstanceType {\n    constructor(instanceClass, instanceSize) {\n        super(instanceClass + '.' + instanceSize);\n        this.instanceClass = instanceClass;\n        this.instanceSize = instanceSize;\n    }\n}\nexports.InstanceTypePair = InstanceTypePair;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\nconst resources_1 = __webpack_require__(3);\nconst connection_1 = __webpack_require__(1);\nconst connections_1 = __webpack_require__(2);\nconst security_group_1 = __webpack_require__(4);\nvar LoadBalancingProtocol;\n(function (LoadBalancingProtocol) {\n    LoadBalancingProtocol[\"Tcp\"] = \"tcp\";\n    LoadBalancingProtocol[\"Ssl\"] = \"ssl\";\n    LoadBalancingProtocol[\"Http\"] = \"http\";\n    LoadBalancingProtocol[\"Https\"] = \"https\";\n})(LoadBalancingProtocol = exports.LoadBalancingProtocol || (exports.LoadBalancingProtocol = {}));\n/**\n * A load balancer with a single listener\n *\n * Routes to a fleet of of instances in a VPC.\n */\nclass ClassicLoadBalancer extends core_1.Construct {\n    constructor(parent, name, props) {\n        super(parent, name);\n        /**\n         * An object controlling specifically the connections for each listener added to this load balancer\n         */\n        this.listenerPorts = [];\n        this.listeners = [];\n        this.instancePorts = [];\n        this.targets = [];\n        this.securityGroup = new security_group_1.SecurityGroup(this, 'SecurityGroup', { vpc: props.vpc });\n        this.connections = new connections_1.Connections(this.securityGroup);\n        this.connectionPeer = this.securityGroup;\n        // Depending on whether the ELB has public or internal IPs, pick the right backend subnets\n        const subnets = props.internetFacing ? props.vpc.publicSubnets : props.vpc.privateSubnets;\n        this.elb = new resources_1.elasticloadbalancing.LoadBalancerResource(this, 'Resource', {\n            securityGroups: [this.securityGroup.securityGroupId],\n            subnets: subnets.map(s => s.subnetId),\n            listeners: new core_1.Token(() => this.listeners),\n            scheme: props.internetFacing ? 'internet-facing' : 'internal',\n            healthCheck: props.healthCheck && healthCheckToJSON(props.healthCheck),\n        });\n        ifUndefined(props.listeners, []).forEach(b => this.addListener(b));\n        ifUndefined(props.targets, []).forEach(t => this.addTarget(t));\n    }\n    /**\n     * Add a backend to the load balancer\n     *\n     * @returns A ClassicListenerPort object that controls connections to the listener port\n     */\n    addListener(listener) {\n        const protocol = ifUndefinedLazy(listener.externalProtocol, () => wellKnownProtocol(listener.externalPort));\n        const instancePort = listener.internalPort || listener.externalPort;\n        const instanceProtocol = ifUndefined(listener.internalProtocol, ifUndefined(tryWellKnownProtocol(instancePort), isHttpProtocol(protocol) ? LoadBalancingProtocol.Http : LoadBalancingProtocol.Tcp));\n        this.listeners.push({\n            loadBalancerPort: listener.externalPort.toString(),\n            protocol,\n            instancePort: instancePort.toString(),\n            instanceProtocol,\n            sslCertificateId: listener.sslCertificateId,\n            policyNames: listener.policyNames\n        });\n        const port = new ClassicListenerPort(this.securityGroup, new connection_1.TcpPort(listener.externalPort));\n        // Allow connections on the public port for all supplied peers (default: everyone)\n        ifUndefined(listener.allowConnectionsFrom, [new connection_1.AnyIPv4()]).forEach(peer => {\n            port.connections.allowDefaultPortFrom(peer, `Default rule allow on ${listener.externalPort}`);\n        });\n        this.newInstancePort(instancePort);\n        // Keep track using array so user can get to them even if they were all supplied in the constructor\n        this.listenerPorts.push(port);\n        return port;\n    }\n    addTarget(target) {\n        target.attachToClassicLB(this);\n        this.newTarget(target);\n    }\n    get loadBalancerName() {\n        return this.elb.ref;\n    }\n    get loadBalancerCanonicalHostedZoneName() {\n        return this.elb.loadBalancerCanonicalHostedZoneName;\n    }\n    get loadBalancerDnsName() {\n        return this.elb.loadBalancerDnsName;\n    }\n    get loadBalancerSourceSecurityGroupGroupName() {\n        return this.elb.loadBalancerSourceSecurityGroupGroupName;\n    }\n    get loadBalancerSourceSecurityGroupOwnerAlias() {\n        return this.elb.loadBalancerSourceSecurityGroupOwnerAlias;\n    }\n    /**\n     * Allow connections to all existing targets on new instance port\n     */\n    newInstancePort(instancePort) {\n        this.targets.forEach(t => this.allowTargetConnection(instancePort, t));\n        // Keep track of port for future targets\n        this.instancePorts.push(instancePort);\n    }\n    /**\n     * Allow connections to target on all existing instance ports\n     */\n    newTarget(target) {\n        this.instancePorts.forEach(p => this.allowTargetConnection(p, target));\n        // Keep track of target for future listeners.\n        this.targets.push(target);\n    }\n    /**\n     * Allow connections for a single (port, target) pair\n     */\n    allowTargetConnection(instancePort, target) {\n        this.connections.allowTo(target, new connection_1.TcpPort(instancePort), `Port ${instancePort} LB to fleet`);\n    }\n}\nexports.ClassicLoadBalancer = ClassicLoadBalancer;\n/**\n * Reference to a listener's port just created\n *\n * This class exists to make it convenient to add port ranges to the load\n * balancer's security group just for the port ranges that are involved in the\n * listener.\n */\nclass ClassicListenerPort {\n    constructor(securityGroup, defaultPortRange) {\n        this.defaultPortRange = defaultPortRange;\n        this.connections = new connections_1.DefaultConnections(securityGroup, this);\n    }\n}\nexports.ClassicListenerPort = ClassicListenerPort;\nfunction wellKnownProtocol(port) {\n    const proto = tryWellKnownProtocol(port);\n    if (!proto) {\n        throw new Error(`Please supply protocol to go with port ${port}`);\n    }\n    return proto;\n}\nfunction tryWellKnownProtocol(port) {\n    if (port === 80) {\n        return LoadBalancingProtocol.Http;\n    }\n    if (port === 443) {\n        return LoadBalancingProtocol.Https;\n    }\n    return undefined;\n}\nfunction isHttpProtocol(proto) {\n    return proto === LoadBalancingProtocol.Https || proto === LoadBalancingProtocol.Http;\n}\nfunction ifUndefined(x, def) {\n    return x != null ? x : def;\n}\nfunction ifUndefinedLazy(x, def) {\n    return x != null ? x : def();\n}\n/**\n * Turn health check parameters into a parameter blob for the Classic LB\n */\nfunction healthCheckToJSON(healthCheck) {\n    const protocol = ifUndefined(healthCheck.protocol, ifUndefined(tryWellKnownProtocol(healthCheck.port), LoadBalancingProtocol.Tcp));\n    const path = protocol === LoadBalancingProtocol.Http || protocol === LoadBalancingProtocol.Https ? ifUndefined(healthCheck.path, \"/\") : \"\";\n    const target = `${protocol.toUpperCase()}:${healthCheck.port}${path}`;\n    return {\n        healthyThreshold: ifUndefined(healthCheck.healthyThreshold, 2).toString(),\n        interval: ifUndefined(healthCheck.interval, 30).toString(),\n        target,\n        timeout: ifUndefined(healthCheck.timeout, 5).toString(),\n        unhealthyThreshold: ifUndefined(healthCheck.unhealthyThreshold, 5).toString(),\n    };\n}\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\n/**\n * Select the latest version of the indicated Windows version\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n *\n * https://aws.amazon.com/blogs/mt/query-for-the-latest-windows-ami-using-systems-manager-parameter-store/\n */\nclass WindowsImage {\n    constructor(version) {\n        this.version = version;\n    }\n    /**\n     * Return the image to use in the given context\n     */\n    getImage(parent) {\n        const ssmProvider = new core_1.SSMParameterProvider(parent);\n        const parameterName = this.imageParameterName(this.version);\n        const ami = ssmProvider.getString(parameterName);\n        return new MachineImage(ami, new WindowsOS());\n    }\n    /**\n     * Construct the SSM parameter name for the given Windows image\n     */\n    imageParameterName(version) {\n        return '/aws/service/ami-windows-latest/' + version;\n    }\n}\nexports.WindowsImage = WindowsImage;\n/**\n * Selects the latest version of Amazon Linux\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n */\nclass AmazonLinuxImage {\n    constructor(props) {\n        this.edition = (props && props.edition) || AmazonLinuxEdition.Standard;\n        this.virtualization = (props && props.virtualization) || AmazonLinuxVirt.HVM;\n        this.storage = (props && props.storage) || AmazonLinuxStorage.GeneralPurpose;\n    }\n    /**\n     * Return the image to use in the given context\n     */\n    getImage(parent) {\n        const parts = [\n            'amzn-ami',\n            this.edition !== AmazonLinuxEdition.Standard ? this.edition : undefined,\n            this.virtualization,\n            'x86_64',\n            this.storage\n        ].filter(x => x !== undefined); // Get rid of undefineds\n        const parameterName = '/aws/service/ami-amazon-linux-latest/' + parts.join('-');\n        const ssmProvider = new core_1.SSMParameterProvider(parent);\n        const ami = ssmProvider.getString(parameterName);\n        return new MachineImage(ami, new LinuxOS());\n    }\n}\nexports.AmazonLinuxImage = AmazonLinuxImage;\n/**\n * Amazon Linux edition\n */\nvar AmazonLinuxEdition;\n(function (AmazonLinuxEdition) {\n    /**\n     * Standard edition\n     */\n    AmazonLinuxEdition[\"Standard\"] = \"standard\";\n    /**\n     * Minimal edition\n     */\n    AmazonLinuxEdition[\"Minimal\"] = \"minimal\";\n})(AmazonLinuxEdition = exports.AmazonLinuxEdition || (exports.AmazonLinuxEdition = {}));\n/**\n * Virtualization type for Amazon Linux\n */\nvar AmazonLinuxVirt;\n(function (AmazonLinuxVirt) {\n    /**\n     * HVM virtualization (recommended)\n     */\n    AmazonLinuxVirt[\"HVM\"] = \"hvm\";\n    /**\n     * PV virtualization\n     */\n    AmazonLinuxVirt[\"PV\"] = \"pv\";\n})(AmazonLinuxVirt = exports.AmazonLinuxVirt || (exports.AmazonLinuxVirt = {}));\nvar AmazonLinuxStorage;\n(function (AmazonLinuxStorage) {\n    /**\n     * EBS-backed storage\n     */\n    AmazonLinuxStorage[\"EBS\"] = \"ebs\";\n    /**\n     * S3-backed storage\n     */\n    AmazonLinuxStorage[\"S3\"] = \"ebs\";\n    /**\n     * General Purpose-based storage (recommended)\n     */\n    AmazonLinuxStorage[\"GeneralPurpose\"] = \"gp2\";\n})(AmazonLinuxStorage = exports.AmazonLinuxStorage || (exports.AmazonLinuxStorage = {}));\n/**\n * Construct a Linux machine image from an AMI map\n *\n * Linux images IDs are not published to SSM parameter store yet, so you'll have to\n * manually specify an AMI map.\n */\nclass GenericLinuxImage {\n    constructor(amiMap) {\n        this.amiMap = amiMap;\n    }\n    getImage(parent) {\n        const stack = core_1.Stack.find(parent);\n        const region = stack.requireRegion('AMI cannot be determined');\n        const ami = this.amiMap[region];\n        if (!ami) {\n            throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);\n        }\n        return new MachineImage(ami, new LinuxOS());\n    }\n}\nexports.GenericLinuxImage = GenericLinuxImage;\n/**\n * The Windows version to use for the WindowsImage\n */\nvar WindowsVersion;\n(function (WindowsVersion) {\n    WindowsVersion[\"WindowsServer2016TurksihFullBase\"] = \"Windows_Server-2016-Turkish-Full-Base\";\n    WindowsVersion[\"WindowsServer2016SwedishFullBase\"] = \"Windows_Server-2016-Swedish-Full-Base\";\n    WindowsVersion[\"WindowsServer2016SpanishFullBase\"] = \"Windows_Server-2016-Spanish-Full-Base\";\n    WindowsVersion[\"WindowsServer2016RussianFullBase\"] = \"Windows_Server-2016-Russian-Full-Base\";\n    WindowsVersion[\"WindowsServer2016PortuguesePortugalFullBase\"] = \"Windows_Server-2016-Portuguese_Portugal-Full-Base\";\n    WindowsVersion[\"WindowsServer2016PortugueseBrazilFullBase\"] = \"Windows_Server-2016-Portuguese_Brazil-Full-Base\";\n    WindowsVersion[\"WindowsServer2016PolishFullBase\"] = \"Windows_Server-2016-Polish-Full-Base\";\n    WindowsVersion[\"WindowsServer2016KoreanFullSQL2016Base\"] = \"Windows_Server-2016-Korean-Full-SQL_2016_SP1_Standard\";\n    WindowsVersion[\"WindowsServer2016KoreanFullBase\"] = \"Windows_Server-2016-Korean-Full-Base\";\n    WindowsVersion[\"WindowsServer2016JapaneseFullSQL2016Web\"] = \"Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Web\";\n    WindowsVersion[\"WindowsServer2016JapaneseFullSQL2016Standard\"] = \"Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Standard\";\n    WindowsVersion[\"WindowsServer2016JapaneseFullSQL2016Express\"] = \"Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Express\";\n    WindowsVersion[\"WindowsServer2016JapaneseFullSQL2016Enterprise\"] = \"Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Enterprise\";\n    WindowsVersion[\"WindowsServer2016JapaneseFullBase\"] = \"Windows_Server-2016-Japanese-Full-Base\";\n    WindowsVersion[\"WindowsServer2016ItalianFullBase\"] = \"Windows_Server-2016-Italian-Full-Base\";\n    WindowsVersion[\"WindowsServer2016HungarianFullBase\"] = \"Windows_Server-2016-Hungarian-Full-Base\";\n    WindowsVersion[\"WindowsServer2016GermanFullBase\"] = \"Windows_Server-2016-German-Full-Base\";\n    WindowsVersion[\"WindowsServer2016FrenchFullBase\"] = \"Windows_Server-2016-French-Full-Base\";\n    WindowsVersion[\"WindowsServer2016EnglishNanoBase\"] = \"Windows_Server-2016-English-Nano-Base\";\n    WindowsVersion[\"WindowsServer2016EnglishFullSQL2017Web\"] = \"Windows_Server-2016-English-Full-SQL_2017_Web\";\n    WindowsVersion[\"WindowsServer2016EnglishFullSQL2017Standard\"] = \"Windows_Server-2016-English-Full-SQL_2017_Standard\";\n    WindowsVersion[\"WindowsServer2016EnglishFullSQL2017Express\"] = \"Windows_Server-2016-English-Full-SQL_2017_Express\";\n    WindowsVersion[\"WindowsServer2016EnglishFullSQL2017Enterprise\"] = \"Windows_Server-2016-English-Full-SQL_2017_Enterprise\";\n})(WindowsVersion = exports.WindowsVersion || (exports.WindowsVersion = {}));\n/**\n * Representation of a machine to be launched\n *\n * Combines an AMI ID with an OS.\n */\nclass MachineImage {\n    constructor(imageId, os) {\n        this.imageId = imageId;\n        this.os = os;\n    }\n}\nexports.MachineImage = MachineImage;\n/**\n * The OS type of a particular image\n */\nvar OperatingSystemType;\n(function (OperatingSystemType) {\n    OperatingSystemType[OperatingSystemType[\"Linux\"] = 0] = \"Linux\";\n    OperatingSystemType[OperatingSystemType[\"Windows\"] = 1] = \"Windows\";\n})(OperatingSystemType = exports.OperatingSystemType || (exports.OperatingSystemType = {}));\n/**\n * Abstraction of OS features we need to be aware of\n */\nclass OperatingSystem {\n}\nexports.OperatingSystem = OperatingSystem;\n/**\n * OS features specialized for Windows\n */\nclass WindowsOS extends OperatingSystem {\n    createUserData(scripts) {\n        return `<powershell>${scripts.join('\\n')}</powershell>`;\n    }\n    get type() {\n        return OperatingSystemType.Windows;\n    }\n}\nexports.WindowsOS = WindowsOS;\n/**\n * OS features specialized for Linux\n */\nclass LinuxOS extends OperatingSystem {\n    createUserData(scripts) {\n        return '#!/bin/bash\\n' + scripts.join('\\n');\n    }\n    get type() {\n        return OperatingSystemType.Linux;\n    }\n}\nexports.LinuxOS = LinuxOS;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __webpack_require__(0);\nconst resources_1 = __webpack_require__(3);\nconst network_util_1 = __webpack_require__(14);\nconst vpc_ref_1 = __webpack_require__(5);\n/**\n * The default tenancy of instances launched into the VPC.\n */\nvar DefaultInstanceTenancy;\n(function (DefaultInstanceTenancy) {\n    /**\n     * Instances can be launched with any tenancy.\n     */\n    DefaultInstanceTenancy[\"Default\"] = \"default\";\n    /**\n     * Any instance launched into the VPC automatically has dedicated tenancy, unless you launch it with the default tenancy.\n     */\n    DefaultInstanceTenancy[\"Dedicated\"] = \"dedicated\";\n})(DefaultInstanceTenancy = exports.DefaultInstanceTenancy || (exports.DefaultInstanceTenancy = {}));\n/**\n * The outbound traffic mode defines whether the VPC is configured to route outbound traffic.\n */\nvar OutboundTrafficMode;\n(function (OutboundTrafficMode) {\n    /**\n     * Outbound traffic is not routed. No Internet Gateway (IGW) will be deployed, and no NAT Gateways will be deployed.\n     */\n    OutboundTrafficMode[OutboundTrafficMode[\"None\"] = 1] = \"None\";\n    /**\n     * Outbound traffic will be routed from public subnets via an Internet Gateway.\n     * Outbound traffic from private subnets will not be routed.\n     */\n    OutboundTrafficMode[OutboundTrafficMode[\"FromPublicSubnetsOnly\"] = 2] = \"FromPublicSubnetsOnly\";\n    /**\n     * Outbound traffic from public subnets will be routed via an Internet Gateway.\n     * Outbound traffic from private subnets will be routed via a set of NAT Gateways (1 per AZ).\n     */\n    OutboundTrafficMode[OutboundTrafficMode[\"FromPublicAndPrivateSubnets\"] = 3] = \"FromPublicAndPrivateSubnets\";\n})(OutboundTrafficMode = exports.OutboundTrafficMode || (exports.OutboundTrafficMode = {}));\n/**\n * VpcNetwork deploys an AWS VPC, with public and private subnets per Availability Zone.\n * For example:\n *\n * import { VpcNetwork } from '@aws-cdk/ec2'\n *\n * const vpc = new VpcNetwork(this, {\n *     cidr: \"10.0.0.0/16\"\n * })\n *\n * // Iterate the public subnets\n * for (let subnet of vpc.publicSubnets) {\n *\n * }\n *\n * // Iterate the private subnets\n * for (let subnet of vpc.privateSubnets) {\n *\n * }\n */\nclass VpcNetwork extends vpc_ref_1.VpcNetworkRef {\n    /**\n     * VpcNetwork creates a VPC that spans a whole region.\n     * It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.\n     * Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.\n     * Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).\n     */\n    constructor(parent, name, props = {}) {\n        super(parent, name);\n        /**\n         * List of public subnets in this VPC\n         */\n        this.publicSubnets = [];\n        /**\n         * List of private subnets in this VPC\n         */\n        this.privateSubnets = [];\n        // Can't have enabledDnsHostnames without enableDnsSupport\n        if (props.enableDnsHostnames && !props.enableDnsSupport) {\n            throw new Error('To use DNS Hostnames, DNS Support must be enabled, however, it was explicitly disabled.');\n        }\n        const cidrBlock = props.cidr || VpcNetwork.DEFAULT_CIDR_RANGE;\n        const enableDnsHostnames = props.enableDnsHostnames == null ? true : props.enableDnsHostnames;\n        const enableDnsSupport = props.enableDnsSupport == null ? true : props.enableDnsSupport;\n        const instanceTenancy = props.defaultInstanceTenancy || 'default';\n        const tags = props.tags || [];\n        const outboundTraffic = props.outboundTraffic || OutboundTrafficMode.FromPublicAndPrivateSubnets;\n        // Define a VPC using the provided CIDR range\n        this.resource = new resources_1.ec2.VPCResource(this, 'Resource', {\n            cidrBlock,\n            enableDnsHostnames,\n            enableDnsSupport,\n            instanceTenancy,\n            tags\n        });\n        this.vpcId = this.resource.ref;\n        this.dependencyElements.push(this.resource);\n        const allowOutbound = outboundTraffic === OutboundTrafficMode.FromPublicSubnetsOnly ||\n            outboundTraffic === OutboundTrafficMode.FromPublicAndPrivateSubnets;\n        // Create public and private subnets in each AZ\n        this.createSubnets(cidrBlock, outboundTraffic, props.maxAZs);\n        // Create an Internet Gateway and attach it (if the outbound traffic mode != None)\n        if (allowOutbound) {\n            const igw = new resources_1.ec2.InternetGatewayResource(this, 'IGW');\n            const att = new resources_1.ec2.VPCGatewayAttachmentResource(this, 'VPCGW', {\n                internetGatewayId: igw.ref,\n                vpcId: this.resource.ref\n            });\n            this.publicSubnets.forEach(publicSubnet => {\n                publicSubnet.addDefaultIGWRouteEntry(igw.ref);\n            });\n            this.dependencyElements.push(igw, att);\n        }\n    }\n    /**\n     * @returns {Token} The IPv4 CidrBlock as returned by the VPC\n     */\n    get cidr() {\n        return this.resource.getAtt(\"CidrBlock\");\n    }\n    /**\n     * createSubnets takes a VPC, and creates a public and private subnet\n     * in each Availability Zone.\n     */\n    createSubnets(cidr, outboundTraffic, maxAZs) {\n        // Calculate number of public/private subnets based on number of AZs\n        const zones = new core_1.AvailabilityZoneProvider(this).availabilityZones;\n        zones.sort();\n        // Restrict to maxAZs if given\n        if (maxAZs != null) {\n            zones.splice(maxAZs);\n        }\n        // Split the CIDR range into each availablity zone\n        const ranges = network_util_1.NetworkUtils.splitCIDR(cidr, zones.length);\n        for (let i = 0; i < zones.length; i++) {\n            this.createSubnetPair(ranges[i], zones[i], i + 1, outboundTraffic);\n        }\n    }\n    /**\n     * Creates a public and private subnet, as well as the needed nat gateway and default route, if necessary.\n     */\n    createSubnetPair(azCidr, zone, index, outboundTraffic) {\n        // Split the CIDR range for this AZ into two (public and private)\n        const subnetRanges = network_util_1.NetworkUtils.splitCIDR(azCidr, 2);\n        const publicSubnet = new VpcPublicSubnet(this, `PublicSubnet${index}`, {\n            mapPublicIpOnLaunch: true,\n            vpcId: this.vpcId,\n            availabilityZone: zone,\n            cidrBlock: subnetRanges[0]\n        });\n        const privateSubnet = new VpcPrivateSubnet(this, `PrivateSubnet${index}`, {\n            mapPublicIpOnLaunch: false,\n            vpcId: this.vpcId,\n            availabilityZone: zone,\n            cidrBlock: subnetRanges[1]\n        });\n        // If outbound traffic from private subnets is configured, also configure NAT Gateways\n        // in each public subnet, and configure the default route for the private subnet via them.\n        if (outboundTraffic === OutboundTrafficMode.FromPublicAndPrivateSubnets) {\n            const ngwId = publicSubnet.addNatGateway();\n            privateSubnet.addDefaultNatRouteEntry(ngwId);\n        }\n        this.publicSubnets.push(publicSubnet);\n        this.privateSubnets.push(privateSubnet);\n        this.dependencyElements.push(publicSubnet, privateSubnet);\n    }\n}\n/**\n * The default CIDR range used when creating VPCs.\n * This can be overridden using VpcNetworkProps when creating a VPCNetwork resource.\n * e.g. new VpcResource(this, { cidr: '192.168.0.0./16' })\n */\nVpcNetwork.DEFAULT_CIDR_RANGE = '10.0.0.0/16';\nexports.VpcNetwork = VpcNetwork;\n/**\n * Represents a new VPC subnet resource\n */\nclass VpcSubnet extends vpc_ref_1.VpcSubnetRef {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.availabilityZone = props.availabilityZone;\n        const subnet = new resources_1.ec2.SubnetResource(this, 'Subnet', {\n            vpcId: props.vpcId,\n            cidrBlock: props.cidrBlock,\n            availabilityZone: props.availabilityZone,\n            mapPublicIpOnLaunch: props.mapPublicIpOnLaunch,\n        });\n        this.subnetId = subnet.ref;\n        const table = new resources_1.ec2.RouteTableResource(this, 'RouteTable', {\n            vpcId: props.vpcId,\n        });\n        this.routeTableId = table.ref;\n        // Associate the public route table for this subnet, to this subnet\n        const routeAssoc = new resources_1.ec2.SubnetRouteTableAssociationResource(this, 'RouteTableAssociatioin', {\n            subnetId: this.subnetId,\n            routeTableId: table.ref\n        });\n        this.dependencyElements.push(subnet, table, routeAssoc);\n    }\n    addDefaultRouteToNAT(natGatewayId) {\n        new resources_1.ec2.RouteResource(this, `DefaultRoute`, {\n            routeTableId: this.routeTableId,\n            destinationCidrBlock: '0.0.0.0/0',\n            natGatewayId\n        });\n    }\n    addDefaultRouteToIGW(gatewayId) {\n        new resources_1.ec2.RouteResource(this, `DefaultRoute`, {\n            routeTableId: this.routeTableId,\n            destinationCidrBlock: '0.0.0.0/0',\n            gatewayId\n        });\n    }\n}\nexports.VpcSubnet = VpcSubnet;\n/**\n * Represents a public VPC subnet resource\n */\nclass VpcPublicSubnet extends VpcSubnet {\n    constructor(parent, name, props) {\n        super(parent, name, props);\n    }\n    /**\n     * Create a default route that points to a passed IGW\n     */\n    addDefaultIGWRouteEntry(gatewayId) {\n        this.addDefaultRouteToIGW(gatewayId);\n    }\n    /**\n     * Creates a new managed NAT gateway attached to this public subnet.\n     * Also adds the EIP for the managed NAT.\n     * Returns the NAT Gateway ref\n     */\n    addNatGateway() {\n        // Create a NAT Gateway in this public subnet\n        const ngw = new resources_1.ec2.NatGatewayResource(this, `NATGateway`, {\n            subnetId: this.subnetId,\n            allocationId: new resources_1.ec2.EIPResource(this, `EIP`, {\n                domain: 'vpc'\n            }).eipAllocationId\n        });\n        return ngw.ref;\n    }\n}\nexports.VpcPublicSubnet = VpcPublicSubnet;\n/**\n * Represents a private VPC subnet resource\n */\nclass VpcPrivateSubnet extends VpcSubnet {\n    constructor(parent, name, props) {\n        super(parent, name, props);\n    }\n    /**\n     * Adds an entry to this subnets route table that points to the passed NATGatwayId\n     */\n    addDefaultNatRouteEntry(natGatewayId) {\n        this.addDefaultRouteToNAT(natGatewayId);\n    }\n}\nexports.VpcPrivateSubnet = VpcPrivateSubnet;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * InvalidCidrRangeError is thrown when attempting to perform operations on a CIDR\n * range that is either not valid, or outside of the VPC size limits.\n */\nclass InvalidCidrRangeError extends Error {\n    constructor(cidr) {\n        super(cidr + ' is not a valid VPC CIDR range (must be between /16 and /28)');\n        // The following line is required for type checking of custom errors, and must be called right after super()\n        // https://stackoverflow.com/questions/31626231/custom-error-class-in-typescript\n        Object.setPrototypeOf(this, InvalidCidrRangeError.prototype);\n    }\n}\nexports.InvalidCidrRangeError = InvalidCidrRangeError;\n/**\n * InvalidSubnetCountError is thrown when attempting to split a CIDR range into more\n * subnets than it has IP space for.\n */\nclass InvalidSubnetCountError extends Error {\n    constructor(cidr, count) {\n        super('VPC range (' + cidr + ') does not have enough IP space to be split into ' + count + ' subnets');\n        // The following line is required for type checking of custom errors, and must be called right after super()\n        // https://stackoverflow.com/questions/31626231/custom-error-class-in-typescript\n        Object.setPrototypeOf(this, InvalidSubnetCountError.prototype);\n    }\n}\nexports.InvalidSubnetCountError = InvalidSubnetCountError;\n/**\n * NetworkUtils contains helpers to work with network constructs (subnets/ranges)\n */\nclass NetworkUtils {\n    /**\n     *\n     * splitCIDR takes a CIDR range (e.g. 10.0.0.0/16) and splits it into\n     * the provided number of smaller subnets (eg 2 of 10.0.0.0/17).\n     *\n     * @param  {string} cidr The CIDR range to split (e.g. 10.0.0.0/16)\n     * @param  {number} subnetCount How many subnets to create (min:2 max:30)\n     * @returns Array An array of CIDR strings (e.g. [ '10.0.0.0/17', '10.0.128.0/17' ])\n     */\n    static splitCIDR(cidr, subnetCount) {\n        const parts = cidr.toString().split(/([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)\\/([0-9]+)/);\n        if (parts.length !== 7) {\n            throw new InvalidCidrRangeError(cidr);\n        }\n        const range = parseInt(parts[5], 10);\n        const rangeHosts = Math.pow(2, (32 - range));\n        const subnetSize = range + Math.round((subnetCount / 2));\n        const subnetHosts = Math.pow(2, (32 - subnetSize));\n        // Ensure the VPC cidr range fits within the EC2 VPC parameter ranges\n        if (range < 16 || range > 28) {\n            throw new InvalidCidrRangeError(cidr);\n        }\n        // Ensure the resulting subnet size is within the EC2 VPC parameter ranges\n        if (subnetSize < 16 || subnetSize > 28) {\n            throw new InvalidSubnetCountError(cidr, subnetCount);\n        }\n        // Check that the requested number of subnets fits into the provided CIDR range\n        if (subnetHosts === 0 || subnetHosts * subnetCount > rangeHosts) {\n            throw new InvalidSubnetCountError(cidr, subnetCount);\n        }\n        // Convert the initial CIDR to decimal format\n        const rangeDec = ((((((+parts[1]) * 256) + (+parts[2])) * 256) + (+parts[3])) * 256) + (+parts[4]);\n        // Generate each of the subnets required\n        const subnets = [];\n        for (let i = 0; i < subnetCount; i++) {\n            const subnetDec = rangeDec + (i * subnetHosts);\n            // tslint:disable:no-bitwise\n            const p1 = subnetDec & 255;\n            const p2 = ((subnetDec >> 8) & 255);\n            const p3 = ((subnetDec >> 16) & 255);\n            const p4 = ((subnetDec >> 24) & 255);\n            // tslint:enable:no-bitwise\n            subnets.push(p4 + '.' + p3 + '.' + p2 + '.' + p1 + '/' + subnetSize);\n        }\n        return subnets;\n    }\n}\nexports.NetworkUtils = NetworkUtils;\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
}
