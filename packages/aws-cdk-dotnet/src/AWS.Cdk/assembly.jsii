{
  "schema": "jsii/1.0",
  "types": {
    "jsii$_aws_cdk_core$.Construct": {
      "docs": {
        "comment": "Represents the building block of the construct graph.\nWhen a construct is created, it is always added as a child"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Returns the parent of this node or undefined if this is a root node."
          },
          "name": "parent",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Construct",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The name of this construct"
          },
          "name": "name",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "All direct children of this construct."
          },
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "returns": "/-separated path of this Construct.",
            "comment": "Returns the path of all constructs from root to this construct, in string form."
          },
          "name": "path",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "An array of metadata objects associated with this construct.\nThis can be used, for example, to implement support for deprecation notices, source mapping, etc."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.MetadataEntry"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of this construct."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "depth",
              "type": {
                "primitive": "number",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Returns a string with a tree representation of this construct and it's children."
          },
          "name": "toTreeString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "a child by path or undefined if not found.",
            "comment": "Return a descendant by path, or undefined"
          },
          "name": "tryFindChild",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct",
            "optional": true
          }
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "Child with the given path.",
            "comment": "Return a descendant by path\n\nThrows an exception if the descendant is not found."
          },
          "name": "findChild",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key The context key",
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "value The context value",
                "comment": "The context value"
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "This can be used to set contextual values.\nContext must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden."
          },
          "name": "setContext"
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key The context key",
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The context value or undefined",
            "comment": "Retrieves a value from tree context.\n\nContext is usually initialized at the root, but can be overridden at any point in the tree."
          },
          "name": "getContext",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Retrieve a value from tree-global context\n\nIt is an error if the context object is not available."
          },
          "name": "requireContext",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "type a string denoting the type of metadata",
                "comment": "a string denoting the type of metadata"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.",
                "comment": "the value of the metadata (can be a Token). If null/undefined, metadata will not be added."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "param": "from a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)",
                "comment": "a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)"
              },
              "name": "from",
              "type": {
                "primitive": "any",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Adds a metadata entry to this construct.\nEntries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics."
          },
          "name": "addMetadata",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "message The warning message.",
                "comment": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Adds a { warning: <message> } metadata entry to this construct."
          },
          "name": "addWarning",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          }
        },
        {
          "docs": {
            "returns": "An array of validation error messages, or an empty array if there the construct is valid.",
            "comment": "This method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis."
          },
          "name": "validate",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "returns": "A list of validation errors. If the list is empty, all constructs are valid.",
            "comment": "Invokes 'validate' on all child constructs and then on this construct (depth-first)."
          },
          "name": "validateTree",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.ValidationError"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "name": "upTo",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Return the ancestors (including self) of this Construct up until and excluding the indicated component"
          },
          "name": "ancestors",
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "props The props bag.",
                "comment": "The props bag."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "param": "name The name of the required property.",
                "comment": "The name of the required property."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Throws if the `props` bag doesn't include the property `name`.\nIn the future we can add some type-checking here, maybe even auto-generate during compilation."
          },
          "name": "required",
          "protected": true,
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "child The child construct",
                "comment": "The child construct"
              },
              "name": "child",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The resolved path part name of the child",
            "comment": "Adds a child construct to this node."
          },
          "name": "addChild",
          "protected": true
        },
        {
          "docs": {
            "comment": "Locks this construct from allowing more children to be added. After this\ncall, no more children can be added to this construct or to any children."
          },
          "name": "lock",
          "protected": true
        },
        {
          "docs": {
            "comment": "Unlocks this costruct and allows mutations (adding children)."
          },
          "name": "unlock",
          "protected": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Construct",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Construct",
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Root": {
      "docs": {
        "comment": "Represents the root of a construct tree.\nNo parent and no name."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.Root",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Root",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.MetadataEntry": {
      "docs": {
        "comment": "An metadata entry in the construct."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The type of the metadata entry."
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The data."
          },
          "name": "data",
          "type": {
            "primitive": "any",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A stack trace for when the entry was created."
          },
          "name": "trace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.MetadataEntry",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "MetadataEntry",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.ValidationError": {
      "kind": "class",
      "properties": [
        {
          "name": "source",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Construct"
          },
          "immutable": true
        },
        {
          "name": "message",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ValidationError",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ValidationError",
      "initializer": {
        "parameters": [
          {
            "name": "source",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "message",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Token": {
      "docs": {
        "comment": "Represents a lazy-evaluated value. Can be used to delay evaluation of a certain value\nin case, for example, that it requires some context or late-bound data."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "returns": "The resolved value for this token."
          },
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Token",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Token",
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ConditionProps": {
      "kind": "interface",
      "properties": [
        {
          "name": "expression",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.FnCondition",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ConditionProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ConditionProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Condition": {
      "docs": {
        "comment": "Represents a CloudFormation condition, for resources which must be conditionally created and\nthe determination must be made at deploy time."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The condition statement."
          },
          "name": "expression",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.FnCondition",
            "optional": true
          }
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Condition",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Condition",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Referenceable"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.ConditionProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Build a new condition. The condition must be constructed with a condition token,\nthat the condition is based on."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Fn": {
      "docs": {
        "comment": "CloudFormation intrinsic functions.\nhttp://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.Fn",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Fn",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "value",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnFindInMap": {
      "docs": {
        "comment": "The intrinsic function Fn::FindInMap returns the value corresponding to keys in a two-level\nmap that is declared in the Mappings section."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnFindInMap",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnFindInMap",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "mapName The logical name of a mapping declared in the Mappings section that contains the keys and values.",
              "comment": "The logical name of a mapping declared in the Mappings section that contains the keys and values."
            },
            "name": "mapName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "topLevelKey The top-level key name. Its value is a list of key-value pairs.",
              "comment": "The top-level key name. Its value is a list of key-value pairs."
            },
            "name": "topLevelKey",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "secondLevelKey The second-level key name, which is set to one of the keys from the list assigned to TopLevelKey.",
              "comment": "The second-level key name, which is set to one of the keys from the list assigned to TopLevelKey."
            },
            "name": "secondLevelKey",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::FindInMap function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnGetAtt": {
      "docs": {
        "comment": "The Fn::GetAtt intrinsic function returns the value of an attribute from a resource in the template."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnGetAtt",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnGetAtt",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "logicalNameOfResource The logical name (also called logical ID) of the resource that contains the attribute that you want.",
              "comment": "The logical name (also called logical ID) of the resource that contains the attribute that you want."
            },
            "name": "logicalNameOfResource",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "attributeName The name of the resource-specific attribute whose value you want. See the resource's reference page for details about the attributes available for that resource type.",
              "comment": "The name of the resource-specific attribute whose value you want. See the resource's reference page for details about the attributes available for that resource type."
            },
            "name": "attributeName",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates a Fn::GetAtt function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnGetAZs": {
      "docs": {
        "comment": "The intrinsic function Fn::GetAZs returns an array that lists Availability Zones for a\nspecified region. Because customers have access to different Availability Zones, the intrinsic\nfunction Fn::GetAZs enables template authors to write templates that adapt to the calling\nuser's access. That way you don't have to hard-code a full list of Availability Zones for a\nspecified region."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnGetAZs",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnGetAZs",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "region The name of the region for which you want to get the Availability Zones.\nYou can use the AWS::Region pseudo parameter to specify the region in\nwhich the stack is created. Specifying an empty string is equivalent to\nspecifying AWS::Region.",
              "comment": "The name of the region for which you want to get the Availability Zones.\nYou can use the AWS::Region pseudo parameter to specify the region in\nwhich the stack is created. Specifying an empty string is equivalent to\nspecifying AWS::Region."
            },
            "name": "region",
            "type": {
              "primitive": "string",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::GetAZs function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnImportValue": {
      "docs": {
        "comment": "The intrinsic function Fn::ImportValue returns the value of an output exported by another stack.\nYou typically use this function to create cross-stack references. In the following example\ntemplate snippets, Stack A exports VPC security group values and Stack B imports them."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnImportValue",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnImportValue",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "sharedValueToImport The stack output value that you want to import.",
              "comment": "The stack output value that you want to import."
            },
            "name": "sharedValueToImport",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::ImportValue function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnJoin": {
      "docs": {
        "comment": "The intrinsic function Fn::Join appends a set of values into a single value, separated by\nthe specified delimiter. If a delimiter is the empty string, the set of values are concatenated\nwith no delimiter."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnJoin",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnJoin",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "delimiter The value you want to occur between fragments. The delimiter will occur between fragments only. It will not terminate the final value.",
              "comment": "The value you want to occur between fragments. The delimiter will occur between fragments only. It will not terminate the final value."
            },
            "name": "delimiter",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "listOfValues The list of values you want combined.",
              "comment": "The list of values you want combined."
            },
            "name": "listOfValues",
            "type": {
              "primitive": "any"
            },
            "variadic": true
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Join function."
        },
        "initializer": true,
        "variadic": true
      }
    },
    "jsii$_aws_cdk_core$.FnConcat": {
      "docs": {
        "comment": "Alias for Fn::Join('', [ values ])."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnConcat",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnConcat",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnJoin"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "listOfValues The list of values to concatenate.",
              "comment": "The list of values to concatenate."
            },
            "name": "listOfValues",
            "type": {
              "primitive": "any"
            },
            "variadic": true
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Join function with an empty delimiter."
        },
        "initializer": true,
        "variadic": true
      }
    },
    "jsii$_aws_cdk_core$.FnSelect": {
      "docs": {
        "comment": "The intrinsic function Fn::Select returns a single object from a list of objects by index."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnSelect",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnSelect",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "index The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array.",
              "comment": "The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array."
            },
            "name": "index",
            "type": {
              "primitive": "number"
            }
          },
          {
            "docs": {
              "param": "array The list of objects to select from. This list must not be null, nor can it have null entries.",
              "comment": "The list of objects to select from. This list must not be null, nor can it have null entries."
            },
            "name": "array",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Select function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnSplit": {
      "docs": {
        "comment": "To split a string into a list of string values so that you can select an element from the\nresulting string list, use the Fn::Split intrinsic function. Specify the location of splits\nwith a delimiter, such as , (a comma). After you split a string, use the Fn::Select function\nto pick a specific element."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnSplit",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnSplit",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "delimiter A string value that determines where the source string is divided.",
              "comment": "A string value that determines where the source string is divided."
            },
            "name": "delimiter",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "source The string value that you want to split.",
              "comment": "The string value that you want to split."
            },
            "name": "source",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Create an Fn::Split function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnSub": {
      "docs": {
        "comment": "The intrinsic function Fn::Sub substitutes variables in an input string with values that\nyou specify. In your templates, you can use this function to construct commands or outputs\nthat include values that aren't available until you create or update a stack."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnSub",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnSub",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "body A string with variables that AWS CloudFormation substitutes with their\nassociated values at runtime. Write variables as ${MyVarName}. Variables\ncan be template parameter names, resource logical IDs, resource attributes,\nor a variable in a key-value map. If you specify only template parameter names,\nresource logical IDs, and resource attributes, don't specify a key-value map.",
              "comment": "A string with variables that AWS CloudFormation substitutes with their\nassociated values at runtime. Write variables as ${MyVarName}. Variables\ncan be template parameter names, resource logical IDs, resource attributes,\nor a variable in a key-value map. If you specify only template parameter names,\nresource logical IDs, and resource attributes, don't specify a key-value map."
            },
            "name": "body",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "variables The name of a variable that you included in the String parameter.\nThe value that AWS CloudFormation substitutes for the associated variable name at runtime.",
              "comment": "The name of a variable that you included in the String parameter.\nThe value that AWS CloudFormation substitutes for the associated variable name at runtime."
            },
            "name": "variables",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              },
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Sub function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnBase64": {
      "docs": {
        "comment": "The intrinsic function Fn::Base64 returns the Base64 representation of the input string.\nThis function is typically used to pass encoded data to Amazon EC2 instances by way of\nthe UserData property."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnBase64",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnBase64",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "data The string value you want to convert to Base64.",
              "comment": "The string value you want to convert to Base64."
            },
            "name": "data",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Base64 function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnCidr": {
      "docs": {
        "comment": "The intrinsic function Fn::Cidr returns the specified Cidr address block."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnCidr",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnCidr",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "ipBlock The user-specified default Cidr address block.",
              "comment": "The user-specified default Cidr address block."
            },
            "name": "ipBlock",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "count The number of subnets' Cidr block wanted. Count can be 1 to 256.",
              "comment": "The number of subnets' Cidr block wanted. Count can be 1 to 256."
            },
            "name": "count",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "sizeMask The digit covered in the subnet.",
              "comment": "The digit covered in the subnet."
            },
            "name": "sizeMask",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Cidr function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnCondition": {
      "docs": {
        "comment": "You can use intrinsic functions, such as Fn::If, Fn::Equals, and Fn::Not, to conditionally\ncreate stack resources. These conditions are evaluated based on input parameters that you\ndeclare when you create or update a stack. After you define all your conditions, you can\nassociate them with resources or resource properties in the Resources and Outputs sections\nof a template.\n\nYou define all conditions in the Conditions section of a template except for Fn::If conditions.\nYou can use the Fn::If condition in the metadata attribute, update policy attribute, and property\nvalues in the Resources section and Outputs sections of a template.\n\nYou might use conditions when you want to reuse a template that can create resources in different\ncontexts, such as a test environment versus a production environment. In your template, you can\nadd an EnvironmentType input parameter, which accepts either prod or test as inputs. For the\nproduction environment, you might include Amazon EC2 instances with certain capabilities;\nhowever, for the test environment, you want to use less capabilities to save costs. With\nconditions, you can define which resources are created and how they're configured for each\nenvironment type."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnCondition",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnCondition",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Fn"
      },
      "initializer": {
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "value",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnAnd": {
      "docs": {
        "comment": "Returns true if all the specified conditions evaluate to true, or returns false if any one\n  of the conditions evaluates to false. Fn::And acts as an AND operator. The minimum number of\nconditions that you can include is 2, and the maximum is 10."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnAnd",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnAnd",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "name": "condition",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.FnCondition"
            },
            "variadic": true
          }
        ],
        "initializer": true,
        "variadic": true
      }
    },
    "jsii$_aws_cdk_core$.FnEquals": {
      "docs": {
        "comment": "Compares if two values are equal. Returns true if the two values are equal or false\nif they aren't."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnEquals",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnEquals",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs A value of any type that you want to compare.",
              "comment": "A value of any type that you want to compare."
            },
            "name": "lhs",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "rhs A value of any type that you want to compare.",
              "comment": "A value of any type that you want to compare."
            },
            "name": "rhs",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Equals condition function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnIf": {
      "docs": {
        "comment": "Returns one value if the specified condition evaluates to true and another value if the\nspecified condition evaluates to false. Currently, AWS CloudFormation supports the Fn::If\nintrinsic function in the metadata attribute, update policy attribute, and property values\nin the Resources section and Outputs sections of a template. You can use the AWS::NoValue\npseudo parameter as a return value to remove the corresponding property."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnIf",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnIf",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "condition A reference to a condition in the Conditions section. Use the condition's name to reference it.",
              "comment": "A reference to a condition in the Conditions section. Use the condition's name to reference it."
            },
            "name": "condition",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "valueIfTrue A value to be returned if the specified condition evaluates to true.",
              "comment": "A value to be returned if the specified condition evaluates to true."
            },
            "name": "valueIfTrue",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "valueIfFalse A value to be returned if the specified condition evaluates to false.",
              "comment": "A value to be returned if the specified condition evaluates to false."
            },
            "name": "valueIfFalse",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::If condition function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnNot": {
      "docs": {
        "comment": "Returns true for a condition that evaluates to false or returns false for a condition that evaluates to true.\nFn::Not acts as a NOT operator."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnNot",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnNot",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "condition A condition such as Fn::Equals that evaluates to true or false.",
              "comment": "A condition such as Fn::Equals that evaluates to true or false."
            },
            "name": "condition",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.FnCondition"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Not condition function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnOr": {
      "docs": {
        "comment": "Returns true if any one of the specified conditions evaluate to true, or returns false if\nall of the conditions evaluates to false. Fn::Or acts as an OR operator. The minimum number\nof conditions that you can include is 2, and the maximum is 10."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnOr",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnOr",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "condition A condition that evaluates to true or false.",
              "comment": "A condition that evaluates to true or false."
            },
            "name": "condition",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.FnCondition"
            },
            "variadic": true
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Or condition function."
        },
        "initializer": true,
        "variadic": true
      }
    },
    "jsii$_aws_cdk_core$.FnContains": {
      "docs": {
        "comment": "Returns true if a specified string matches at least one value in a list of strings."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnContains",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnContains",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "listOfStrings A list of strings, such as \"A\", \"B\", \"C\".",
              "comment": "A list of strings, such as \"A\", \"B\", \"C\"."
            },
            "name": "listOfStrings",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "value A string, such as \"A\", that you want to compare against a list of strings.",
              "comment": "A string, such as \"A\", that you want to compare against a list of strings."
            },
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::Contains function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnEachMemberEquals": {
      "docs": {
        "comment": "Returns true if a specified string matches all values in a list."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnEachMemberEquals",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnEachMemberEquals",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "listOfStrings A list of strings, such as \"A\", \"B\", \"C\".",
              "comment": "A list of strings, such as \"A\", \"B\", \"C\"."
            },
            "name": "listOfStrings",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "value A string, such as \"A\", that you want to compare against a list of strings.",
              "comment": "A string, such as \"A\", that you want to compare against a list of strings."
            },
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::EachMemberEquals function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnEachMemberIn": {
      "docs": {
        "comment": "Returns true if each member in a list of strings matches at least one value in a second\nlist of strings."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnEachMemberIn",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnEachMemberIn",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "stringsToCheck A list of strings, such as \"A\", \"B\", \"C\". AWS CloudFormation checks whether each member in the strings_to_check parameter is in the strings_to_match parameter.",
              "comment": "A list of strings, such as \"A\", \"B\", \"C\". AWS CloudFormation checks whether each member in the strings_to_check parameter is in the strings_to_match parameter."
            },
            "name": "stringsToCheck",
            "type": {
              "primitive": "any"
            }
          },
          {
            "docs": {
              "param": "stringsToMatch A list of strings, such as \"A\", \"B\", \"C\". Each member in the strings_to_match parameter is compared against the members of the strings_to_check parameter.",
              "comment": "A list of strings, such as \"A\", \"B\", \"C\". Each member in the strings_to_match parameter is compared against the members of the strings_to_check parameter."
            },
            "name": "stringsToMatch",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::EachMemberIn function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnRefAll": {
      "docs": {
        "comment": "Returns all values for a specified parameter type."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnRefAll",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnRefAll",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parameterType An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or\nAWS::EC2::VPC::Id. For more information, see Parameters in the AWS\nCloudFormation User Guide.",
              "comment": "An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or\nAWS::EC2::VPC::Id. For more information, see Parameters in the AWS\nCloudFormation User Guide."
            },
            "name": "parameterType",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::RefAll function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnValueOf": {
      "docs": {
        "comment": "Returns an attribute value or list of values for a specific parameter and attribute."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnValueOf",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnValueOf",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parameterOrLogicalId The name of a parameter for which you want to retrieve attribute values. The parameter must be declared in the Parameters section of the template.",
              "comment": "The name of a parameter for which you want to retrieve attribute values. The parameter must be declared in the Parameters section of the template."
            },
            "name": "parameterOrLogicalId",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "attribute The name of an attribute from which you want to retrieve a value.",
              "comment": "The name of an attribute from which you want to retrieve a value."
            },
            "name": "attribute",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::ValueOf function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FnValueOfAll": {
      "docs": {
        "comment": "Returns a list of all attribute values for a given parameter type and attribute."
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.FnValueOfAll",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FnValueOfAll",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.FnCondition"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parameterType An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide.",
              "comment": "An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide."
            },
            "name": "parameterType",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "attribute The name of an attribute from which you want to retrieve a value. For more information about attributes, see Supported Attributes.",
              "comment": "The name of an attribute from which you want to retrieve a value. For more information about attributes, see Supported Attributes."
            },
            "name": "attribute",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an Fn::ValueOfAll function."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.IncludeProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The CloudFormation template to include in the stack (as is)."
          },
          "name": "template",
          "type": {
            "primitive": "json"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.IncludeProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "IncludeProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Include": {
      "docs": {
        "comment": "Includes a CloudFormation template into a stack. All elements of the template will be merged into\nthe current stack, together with any elements created programmatically."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The included template."
          },
          "name": "template",
          "type": {
            "primitive": "json"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Include",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Include",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.StackElement"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct of this template",
              "comment": "The parent construct of this template"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.IncludeProps"
            }
          }
        ],
        "docs": {
          "comment": "Creates an adopted template construct. The template will be incorporated into the stack as-is with no changes at all.\nThis means that logical IDs of entities within this template may conflict with logical IDs of entities that are part of the\nstack."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.IAddressingScheme": {
      "docs": {
        "comment": "Interface for classes that implementation logical ID assignment strategies"
      },
      "kind": "interface",
      "methods": [
        {
          "parameters": [
            {
              "name": "addressComponents",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "docs": {
            "comment": "Return the logical ID for the given list of Construct names on the path."
          },
          "name": "allocateAddress",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.IAddressingScheme",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "IAddressingScheme"
    },
    "jsii$_aws_cdk_core$.HashedAddressingScheme": {
      "docs": {
        "comment": "Renders a hashed ID for a resource.\n\nIn order to make sure logical IDs are unique and stable, we hash the resource\nconstruct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as\na suffix to the path components joined without a separator (CloudFormation\nIDs only allow alphanumeric characters).\n\nThe result will be:\n\n     <path.join('')><md5(path.join('/')>\n         \"human\"          \"hash\"\n\nIf the \"human\" part of the ID exceeds 240 characters, we simply trim it so\nthe total ID doesn't exceed CloudFormation's 255 character limit.\n\nWe only take 8 characters from the md5 hash (0.000005 chance of collision).\n\nSpecial cases:\n\n- If the path only contains a single component (i.e. it's a top-level\n   resource), we won't add the hash to it. The hash is not needed for\n   disamiguation and also, it allows for a more straightforward migration an\n   existing CloudFormation template to a CDK stack without logical ID changes\n   (or renames).\n- For aesthetic reasons, if the last components of the path are the same\n   (i.e. `L1/L2/Pipeline/Pipeline`), they will be de-duplicated to make the\n   resulting human portion of the ID more pleasing: `L1L2Pipeline<HASH>`\n   instead of `L1L2PipelinePipeline<HASH>`\n- If a component is named \"Resource\" it will be omitted from the path. This\n   allows L2 construct to use this convention to \"hide\" the wrapped L1 from\n   the logical ID."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "addressComponents",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "docs": {
            "comment": "Return the logical ID for the given list of Construct names on the path."
          },
          "name": "allocateAddress",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_core$.IAddressingScheme"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.HashedAddressingScheme",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "HashedAddressingScheme",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.LogicalIDs": {
      "docs": {
        "comment": "Class that keeps track of the logical IDs that are assigned to resources\n\nSupports renaming the generated IDs."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "oldId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Rename a logical ID from an old ID to a new ID"
          },
          "name": "renameLogical"
        },
        {
          "parameters": [
            {
              "name": "stackElement",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.StackElement"
              }
            }
          ],
          "docs": {
            "comment": "Return the logical ID for the given stack element"
          },
          "name": "getLogicalId",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Throw an error if not all renames have been used\n\nThis is to assure that users didn't make typoes when registering renames."
          },
          "name": "assertAllRenamesApplied"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.LogicalIDs",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "LogicalIDs",
      "initializer": {
        "parameters": [
          {
            "name": "namingScheme",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.IAddressingScheme"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.MappingProps": {
      "kind": "interface",
      "properties": [
        {
          "name": "mapping",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.MappingProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "MappingProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Mapping": {
      "docs": {
        "comment": "Represents a CloudFormation mapping."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "key1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "key2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "Sets a value in the map based on the two keys."
          },
          "name": "setValue"
        },
        {
          "parameters": [
            {
              "name": "key1",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "key2",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "returns": "A reference to a value in the map based on the two keys."
          },
          "name": "findInMap",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.FnFindInMap"
          }
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Mapping",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Mapping",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Referenceable"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.MappingProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.OutputProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The value of the property returned by the aws cloudformation describe-stacks command.\nThe value of an output can include literals, parameter references, pseudo-parameters,\na mapping value, or intrinsic functions."
          },
          "name": "value",
          "type": {
            "primitive": "any",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "The default behavior is to automatically allocate an export name\nfor outputs based on the stack name and the output's logical ID. To\ncreate an output without an export, set `disableExport: true`.",
            "comment": "The name used to export the value of this output across stacks. To import\nthe value from another stack, use `FnImportValue(export)`. You can create\nan import value token by calling `output.makeImportValue()`."
          },
          "name": "export",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "false, which means that an export name is either explicitly\nspecified or allocated based on the output's logical ID and stack name.",
            "comment": "Disables the automatic allocation of an export name for this output."
          },
          "name": "disableExport",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "name": "condition",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Condition",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.OutputProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "OutputProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Output": {
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The value of the property returned by the aws cloudformation describe-stacks command.\nThe value of an output can include literals, parameter references, pseudo-parameters,\na mapping value, or intrinsic functions."
          },
          "name": "value",
          "type": {
            "primitive": "any",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The name of the resource output to be exported for a cross-stack reference.\nBy default, the logical ID of the Output element is used as it's export name."
          },
          "name": "export",
          "type": {
            "primitive": "string",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "name": "condition",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Condition",
            "optional": true
          },
          "immutable": true
        },
        {
          "name": "ref",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns an FnImportValue bound to this export name."
          },
          "name": "makeImportValue",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.FnImportValue"
          }
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Output",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Output",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.StackElement"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct.",
              "comment": "The parent construct."
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "props Output properties.",
              "comment": "Output properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.OutputProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates an Output value for this stack."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.StringListOutputProps": {
      "docs": {
        "comment": "Properties for ListOutput"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The list of primitives to export"
          },
          "name": "values",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "default": "\",\"",
            "comment": "The separator to use to separate stringified values"
          },
          "name": "separator",
          "type": {
            "primitive": "string",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "default": "The default behavior is to automatically allocate an export name\nfor outputs based on the stack name and the output's logical ID. To\ncreate an output without an export, set `disableExport: true`.",
            "comment": "The name used to export the value of this output across stacks. To import\nthe value from another stack, use `FnImportValue(export)`. You can create\nan import value token by calling `output.makeImportValue()`."
          },
          "name": "export",
          "type": {
            "primitive": "string",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "default": "false, which means that an export name is either explicitly\nspecified or allocated based on the output's logical ID and stack name.",
            "comment": "Disables the automatic allocation of an export name for this output."
          },
          "name": "disableExport",
          "type": {
            "primitive": "boolean",
            "optional": true
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "name": "condition",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Condition",
            "optional": true
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.StringListOutputProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "StringListOutputProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.StringListOutput": {
      "docs": {
        "comment": "An output for a list of strings.\n\nExports a list of Tokens via an Output variable, and return a list of Tokens\nthat selects the imported values for them."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Number of elements in the stringlist"
          },
          "name": "length",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return an array of imported values for this Output"
          },
          "name": "makeImportValues",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.Token"
              },
              "kind": "array"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.StringListOutput",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "StringListOutput",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.StringListOutputProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ParameterProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The data type for the parameter (DataType)."
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
          },
          "name": "default",
          "type": {
            "primitive": "any",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A regular expression that represents the patterns to allow for String types."
          },
          "name": "allowedPattern",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An array containing the list of values allowed for the parameter."
          },
          "name": "allowedValues",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:"
          },
          "name": "constraintDescription",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A string of up to 4000 characters that describes the parameter."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An integer value that determines the largest number of characters you want to allow for String types."
          },
          "name": "maxLength",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A numeric value that determines the largest numeric value you want to allow for Number types."
          },
          "name": "maxValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An integer value that determines the smallest number of characters you want to allow for String types."
          },
          "name": "minLength",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A numeric value that determines the smallest numeric value you want to allow for Number types."
          },
          "name": "minValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``)."
          },
          "name": "noEcho",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ParameterProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ParameterProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Parameter": {
      "docs": {
        "comment": "Use the optional Parameters section to customize your templates.\nParameters enable you to input custom values to your template each time you create or\nupdate a stack."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "A token that represents the actual value of this parameter."
          },
          "name": "value",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          }
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        },
        {
          "docs": {
            "comment": "Allows using parameters as tokens without the need to dereference them.\nThis implicitly implements Token, until we make it an interface."
          },
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Parameter",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Parameter",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Referenceable"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct.",
              "comment": "The parent construct."
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "props The parameter properties.",
              "comment": "The parameter properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.ParameterProps"
            }
          }
        ],
        "docs": {
          "comment": "Creates a parameter construct.\nNote that the name (logical ID) of the parameter will derive from it's `coname` and location\nwithin the stack. Therefore, it is recommended that parameters are defined at the stack level."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.PolicyDocument": {
      "kind": "class",
      "properties": [
        {
          "name": "isEmpty",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The number of statements already added to this policy.\nCan be used, for example, to generate uniuqe \"sid\"s within the policy."
          },
          "name": "statementCount",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
              }
            }
          ],
          "name": "addStatement",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyDocument"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.PolicyDocument",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "PolicyDocument",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "baseDocument",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a new IAM policy document."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.PolicyPrincipal": {
      "docs": {
        "comment": "Represents an IAM principal."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "name": "assumeRoleAction",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "name": "policyFragment",
          "abstract": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "PolicyPrincipal",
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.PrincipalPolicyFragment": {
      "docs": {
        "comment": "A collection of the fields in a PolicyStatement that can be used to identify a principal.\n\nThis consists of the JSON used in the \"Principal\" field, and optionally a\nset of \"Condition\"s that need to be applied to the policy."
      },
      "kind": "class",
      "properties": [
        {
          "name": "principalJson",
          "type": {
            "primitive": "any"
          },
          "immutable": true
        },
        {
          "name": "conditions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "PrincipalPolicyFragment",
      "initializer": {
        "parameters": [
          {
            "name": "principalJson",
            "type": {
              "primitive": "any"
            }
          },
          {
            "name": "conditions",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              },
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ArnPrincipal": {
      "kind": "class",
      "properties": [
        {
          "name": "arn",
          "type": {
            "primitive": "any"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "name": "policyFragment",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ArnPrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ArnPrincipal",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
      },
      "initializer": {
        "parameters": [
          {
            "name": "arn",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AccountPrincipal": {
      "kind": "class",
      "properties": [
        {
          "name": "accountId",
          "type": {
            "primitive": "any"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.AccountPrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AccountPrincipal",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.ArnPrincipal"
      },
      "initializer": {
        "parameters": [
          {
            "name": "accountId",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ServicePrincipal": {
      "docs": {
        "comment": "An IAM principal that represents an AWS service (i.e. sqs.amazonaws.com)."
      },
      "kind": "class",
      "properties": [
        {
          "name": "service",
          "type": {
            "primitive": "any"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "name": "policyFragment",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ServicePrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ServicePrincipal",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
      },
      "initializer": {
        "parameters": [
          {
            "name": "service",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.CanonicalUserPrincipal": {
      "docs": {
        "comment": "A policy prinicipal for canonicalUserIds - useful for S3 bucket policies that use\nOrigin Access identities.\n\nSee https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html\n\nand\n\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html\n\nfor more details."
      },
      "kind": "class",
      "properties": [
        {
          "name": "canonicalUserId",
          "type": {
            "primitive": "any"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "name": "policyFragment",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.CanonicalUserPrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "CanonicalUserPrincipal",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
      },
      "initializer": {
        "parameters": [
          {
            "name": "canonicalUserId",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.FederatedPrincipal": {
      "kind": "class",
      "properties": [
        {
          "name": "federated",
          "type": {
            "primitive": "any"
          },
          "immutable": true
        },
        {
          "name": "conditions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          },
          "immutable": true
        },
        {
          "name": "assumeRoleAction",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "name": "policyFragment",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.FederatedPrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "FederatedPrincipal",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
      },
      "initializer": {
        "parameters": [
          {
            "name": "federated",
            "type": {
              "primitive": "any"
            }
          },
          {
            "name": "conditions",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          {
            "name": "assumeRoleAction",
            "type": {
              "primitive": "string",
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AccountRootPrincipal": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AccountRootPrincipal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AccountRootPrincipal",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.AccountPrincipal"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Anyone": {
      "docs": {
        "comment": "A principal representing all identities in all accounts"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Interface compatibility with AccountPrincipal for the purposes of the Lambda library\n\nThe Lambda's addPermission() call works differently from regular\nstatements, and will use the value of this property directly if present\n(which leads to the correct statement ultimately)."
          },
          "name": "accountId",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "name": "policyFragment",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Anyone",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Anyone",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.PolicyStatement": {
      "docs": {
        "comment": "Represents a statement in an IAM policy document."
      },
      "subtypes": [
        "jsii$_aws_cdk_core$.PolicyStatement.Effect"
      ],
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Indicates if this permission has a \"Principal\" section."
          },
          "name": "hasPrincipal",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Indicates if this permission as at least one resource associated with it."
          },
          "name": "hasResource",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Indicates if this permission has only a ``\"*\"`` resource associated with it."
          },
          "name": "isOnlyStarResource",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "action",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "addAction",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "name": "addActions",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          },
          "variadic": true
        },
        {
          "parameters": [
            {
              "name": "principal",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.PolicyPrincipal"
              }
            }
          ],
          "name": "addPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addAwsPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "accountId",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addAwsAccountPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "service",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addServicePrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "federated",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "conditions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "name": "addFederatedPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "name": "addAccountRootPrincipal",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "resource",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "addResource",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Adds a ``\"*\"`` resource to this statement."
          },
          "name": "addAllResources",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "resources",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "name": "addResources",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          },
          "variadic": true
        },
        {
          "parameters": [
            {
              "name": "sid",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "describe",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Sets the permission effect to deny access to resources."
          },
          "name": "allow",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Sets the permission effect to allow access to resources."
          },
          "name": "deny",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "comment": "Add a condition to the Policy"
          },
          "name": "addCondition",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "docs": {
            "comment": "Add multiple conditions to the Policy"
          },
          "name": "addConditions",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "docs": {
            "deprecated": "For backwards compatibility. Use addCondition() instead.",
            "comment": "Add a condition to the Policy."
          },
          "name": "setCondition",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "parameters": [
            {
              "name": "accountId",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "name": "limitToAccount",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.PolicyStatement"
          }
        },
        {
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "name": "toJson",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.PolicyStatement",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "PolicyStatement",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "effect",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.PolicyStatement.Effect",
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.PolicyStatement.Effect": {
      "kind": "enum",
      "members": [
        {
          "name": "Allow"
        },
        {
          "name": "Deny"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.PolicyStatement.Effect",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$.PolicyStatement",
      "name": "Effect",
      "parenttype": "jsii$_aws_cdk_core$.PolicyStatement"
    },
    "jsii$_aws_cdk_core$.PseudoParameter": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.PseudoParameter",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "PseudoParameter",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsAccountId": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsAccountId",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsAccountId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsDomainSuffix": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsDomainSuffix",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsDomainSuffix",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsNotificationARNs": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsNotificationARNs",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsNotificationARNs",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsNoValue": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsNoValue",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsNoValue",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsPartition": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsPartition",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsPartition",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsRegion": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsRegion",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsRegion",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsStackId": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsStackId",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsStackId",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AwsStackName": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.AwsStackName",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AwsStackName",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ResourceProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "CloudFormation resource type."
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "CloudFormation properties."
          },
          "name": "properties",
          "type": {
            "primitive": "any",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ResourceProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ResourceProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Resource": {
      "docs": {
        "comment": "Represents a CloudFormation resource."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Options for this resource, such as condition, update policy etc."
          },
          "name": "options",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.ResourceOptions"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "AWS resource type."
          },
          "name": "resourceType",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "AWS resource properties"
          },
          "name": "properties",
          "type": {
            "primitive": "any"
          },
          "immutable": true,
          "protected": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "customName Custom name for the attribute (default is the name of the property)\nNOTE: we return \"any\" here to satistfy jsii, which doesn't support lambdas.",
                "comment": "Custom name for the attribute (default is the name of the property)\nNOTE: we return \"any\" here to satistfy jsii, which doesn't support lambdas."
              },
              "name": "customName",
              "type": {
                "primitive": "string",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "A decoration used to create a CloudFormation attribute property."
          },
          "name": "attribute",
          "static": true,
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "attributeName The name of the attribute.",
                "comment": "The name of the attribute."
              },
              "name": "attributeName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility\nin case there is no generated attribute."
          },
          "name": "getAtt",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "other The other resource.",
                "comment": "The other resource."
              },
              "name": "other",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "variadic": true
            }
          ],
          "docs": {
            "comment": "Adds a dependency on another resource."
          },
          "name": "addDependency",
          "variadic": true
        },
        {
          "docs": {
            "comment": "Emits CloudFormation for this resource."
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        },
        {
          "name": "renderProperties",
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Resource",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Resource",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Referenceable"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.ResourceProps"
            }
          }
        ],
        "docs": {
          "comment": "Creates a resource construct."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ResourceOptions": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "A condition to associate with this resource. This means that only if the condition evaluates to 'true' when the stack\nis deployed, the resource will be included. This is provided to allow CDK projects to produce legacy templates, but noramlly\nthere is no need to use it in CDK projects."
          },
          "name": "condition",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Condition",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\nAWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\nresource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\nto the stack events so that you track the number of signals sent."
          },
          "name": "creationPolicy",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.CreationPolicy",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\nYou specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\nattribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\nthat lead to resources being removed."
          },
          "name": "deletionPolicy",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\nresource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\nscheduled action is associated with the Auto Scaling group."
          },
          "name": "updatePolicy",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.UpdatePolicy",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Metadata associated with the CloudFormation resource. This is not the same as the construct metadata which can be added\nusing construct.addMetadata(), but would not appear in the CloudFormation template automatically."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ResourceOptions",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ResourceOptions",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.CreationPolicy": {
      "docs": {
        "comment": "Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\nAWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\nresource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\nto the stack events so that you track the number of signals sent.\n\nThe creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only\nAWS CloudFormation resources that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance,\nand AWS::CloudFormation::WaitCondition.\n\nUse the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds.\nFor example, if you install and configure software applications on an EC2 instance, you might want those applications to\nbe running before proceeding. In such cases, you can add a CreationPolicy attribute to the instance, and then send a success\nsignal to the instance after the applications are installed and configured. For a detailed example, see Deploying Applications\non Amazon EC2 with AWS CloudFormation."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "For an Auto Scaling group replacement update, specifies how many instances must signal success for the\nupdate to succeed."
          },
          "name": "autoScalingCreationPolicy",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.AutoScalingCreationPolicy",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "When AWS CloudFormation creates the associated resource, configures the number of required success signals and\nthe length of time that AWS CloudFormation waits for those signals."
          },
          "name": "resourceSignal",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.ResourceSignal",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.CreationPolicy",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "CreationPolicy",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.AutoScalingCreationPolicy": {
      "docs": {
        "comment": "For an Auto Scaling group replacement update, specifies how many instances must signal success for the\nupdate to succeed."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Specifies the percentage of instances in an Auto Scaling replacement update that must signal success for the\nupdate to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent.\nFor example, if you update five instances with a minimum successful percentage of 50, three instances must signal success.\nIf an instance doesn't send a signal within the time specified by the Timeout property, AWS CloudFormation assumes that the\ninstance wasn't created."
          },
          "name": "minSuccessfulInstancesPercent",
          "type": {
            "primitive": "number",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.AutoScalingCreationPolicy",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AutoScalingCreationPolicy",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.ResourceSignal": {
      "docs": {
        "comment": "When AWS CloudFormation creates the associated resource, configures the number of required success signals and\nthe length of time that AWS CloudFormation waits for those signals."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE.\nIf the resource receives a failure signal or doesn't receive the specified number of signals before the timeout period\nexpires, the resource creation fails and AWS CloudFormation rolls the stack back."
          },
          "name": "count",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property.\nThe timeout period starts after AWS CloudFormation starts creating the resource, and the timeout expires no sooner\nthan the time you specify but can occur shortly thereafter. The maximum time that you can specify is 12 hours."
          },
          "name": "timeout",
          "type": {
            "primitive": "string",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ResourceSignal",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ResourceSignal",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.DeletionPolicy": {
      "docs": {
        "comment": "With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\nYou specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\nattribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\nthat lead to resources being removed."
      },
      "kind": "enum",
      "members": [
        {
          "name": "Delete"
        },
        {
          "name": "Retain"
        },
        {
          "name": "Snapshot"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.DeletionPolicy",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "DeletionPolicy"
    },
    "jsii$_aws_cdk_core$.UpdatePolicy": {
      "docs": {
        "comment": "Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\nresource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\nscheduled action is associated with the Auto Scaling group."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\nAWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\ncan roll back to the old Auto Scaling group and delete the new Auto Scaling group."
          },
          "name": "autoScalingReplacingUpdate",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.AutoScalingReplacingUpdate",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\npolicy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\ngroup in batches or all at once."
          },
          "name": "autoScalingRollingUpdate",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.AutoScalingRollingUpdate",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "To specify how AWS CloudFormation handles updates for the MinSize, MaxSize, and DesiredCapacity properties when\nthe AWS::AutoScaling::AutoScalingGroup resource has an associated scheduled action, use the AutoScalingScheduledAction\npolicy."
          },
          "name": "autoScalingScheduledAction",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.AutoScalingScheduledAction",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.UpdatePolicy",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "UpdatePolicy",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.AutoScalingRollingUpdate": {
      "docs": {
        "comment": "To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\npolicy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\ngroup in batches or all at once."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Specifies the maximum number of instances that AWS CloudFormation updates."
          },
          "name": "maxBatchSize",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS\nCloudFormation updates old instances."
          },
          "name": "minInstancesInService",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Specifies the percentage of instances in an Auto Scaling rolling update that must signal success for an update to succeed.\nYou can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you\nupdate five instances with a minimum successful percentage of 50, three instances must signal success.\n\nIf an instance doesn't send a signal within the time specified in the PauseTime property, AWS CloudFormation assumes\nthat the instance wasn't updated.\n\nIf you specify this property, you must also enable the WaitOnResourceSignals and PauseTime properties."
          },
          "name": "minSuccessfulInstancesPercent",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The amount of time that AWS CloudFormation pauses after making a change to a batch of instances to give those instances\ntime to start software applications. For example, you might need to specify PauseTime when scaling up the number of\ninstances in an Auto Scaling group.\n\nIf you enable the WaitOnResourceSignals property, PauseTime is the amount of time that AWS CloudFormation should wait\nfor the Auto Scaling group to receive the required number of valid signals from added or replaced instances. If the\nPauseTime is exceeded before the Auto Scaling group receives the required number of signals, the update fails. For best\nresults, specify a time period that gives your applications sufficient time to get started. If the update needs to be\nrolled back, a short PauseTime can cause the rollback to fail.\n\nSpecify PauseTime in the ISO8601 duration format (in the format PT#H#M#S, where each # is the number of hours, minutes,\nand seconds, respectively). The maximum PauseTime is one hour (PT1H)."
          },
          "name": "pauseTime",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Specifies the Auto Scaling processes to suspend during a stack update. Suspending processes prevents Auto Scaling from\ninterfering with a stack update. For example, you can suspend alarming so that Auto Scaling doesn't execute scaling\npolicies associated with an alarm. For valid values, see the ScalingProcesses.member.N parameter for the SuspendProcesses\naction in the Auto Scaling API Reference."
          },
          "name": "suspendProcesses",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Specifies whether the Auto Scaling group waits on signals from new instances during an update. Use this property to\nensure that instances have completed installing and configuring applications before the Auto Scaling group update proceeds.\nAWS CloudFormation suspends the update of an Auto Scaling group after new EC2 instances are launched into the group.\nAWS CloudFormation must receive a signal from each new instance within the specified PauseTime before continuing the update.\nTo signal the Auto Scaling group, use the cfn-signal helper script or SignalResource API.\n\nTo have instances wait for an Elastic Load Balancing health check before they signal success, add a health-check\nverification by using the cfn-init helper script. For an example, see the verify_instance_health command in the Auto Scaling\nrolling updates sample template."
          },
          "name": "waitOnResourceSignals",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.AutoScalingRollingUpdate",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AutoScalingRollingUpdate",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.AutoScalingReplacingUpdate": {
      "docs": {
        "comment": "Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\nAWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\ncan roll back to the old Auto Scaling group and delete the new Auto Scaling group.\n\nWhile AWS CloudFormation creates the new group, it doesn't detach or attach any instances. After successfully creating\nthe new Auto Scaling group, AWS CloudFormation deletes the old Auto Scaling group during the cleanup process.\n\nWhen you set the WillReplace parameter, remember to specify a matching CreationPolicy. If the minimum number of\ninstances (specified by the MinSuccessfulInstancesPercent property) don't signal success within the Timeout period\n(specified in the CreationPolicy policy), the replacement update fails and AWS CloudFormation rolls back to the old\nAuto Scaling group."
      },
      "kind": "interface",
      "properties": [
        {
          "name": "willReplace",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.AutoScalingReplacingUpdate",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AutoScalingReplacingUpdate",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.AutoScalingScheduledAction": {
      "docs": {
        "comment": "With scheduled actions, the group size properties of an Auto Scaling group can change at any time. When you update a\nstack with an Auto Scaling group and scheduled action, AWS CloudFormation always sets the group size property values of\nyour Auto Scaling group to the values that are defined in the AWS::AutoScaling::AutoScalingGroup resource of your template,\neven if a scheduled action is in effect.\n\nIf you do not want AWS CloudFormation to change any of the group size property values when you have a scheduled action in\neffect, use the AutoScalingScheduledAction update policy to prevent AWS CloudFormation from changing the MinSize, MaxSize,\nor DesiredCapacity properties unless you have modified these values in your template.\\"
      },
      "kind": "interface",
      "properties": [
        {
          "name": "ignoreUnmodifiedGroupSizeProperties",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.AutoScalingScheduledAction",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AutoScalingScheduledAction",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.RuleProps": {
      "docs": {
        "comment": "A rule can include a RuleCondition property and must include an Assertions property.\nFor each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\nYou define a rule condition and assertions by using rule-specific intrinsic functions.\n\nYou can use the following rule-specific intrinsic functions to define rule conditions and assertions:\n\n  Fn::And\n  Fn::Contains\n  Fn::EachMemberEquals\n  Fn::EachMemberIn\n  Fn::Equals\n  Fn::If\n  Fn::Not\n  Fn::Or\n  Fn::RefAll\n  Fn::ValueOf\n  Fn::ValueOfAll\n\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "If the rule condition evaluates to false, the rule doesn't take effect.\nIf the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied."
          },
          "name": "ruleCondition",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Assertions which define the rule."
          },
          "name": "assertions",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.RuleAssertion"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.RuleProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "RuleProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Rule": {
      "docs": {
        "link": "https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html",
        "comment": "The Rules that define template constraints in an AWS Service Catalog portfolio describe when\nend users can use the template and which values they can specify for parameters that are declared\nin the AWS CloudFormation template used to create the product they are attempting to use. Rules\nare useful for preventing end users from inadvertently specifying an incorrect value.\nFor example, you can add a rule to verify whether end users specified a valid subnet in a\ngiven VPC or used m1.small instance types for test environments. AWS CloudFormation uses\nrules to validate parameter values before it creates the resources for the product.\n\nA rule can include a RuleCondition property and must include an Assertions property.\nFor each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\nYou define a rule condition and assertions by using rule-specific intrinsic functions."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "If the rule condition evaluates to false, the rule doesn't take effect.\nIf the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied."
          },
          "name": "ruleCondition",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.FnCondition",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Assertions which define the rule."
          },
          "name": "assertions",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.RuleAssertion"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "condition The expression to evaluation.",
                "comment": "The expression to evaluation."
              },
              "name": "condition",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.FnCondition"
              }
            },
            {
              "docs": {
                "param": "description The description of the assertion.",
                "comment": "The description of the assertion."
              },
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Adds an assertion to the rule."
          },
          "name": "addAssertion"
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Rule",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Rule",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Referenceable"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct.",
              "comment": "The parent construct."
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "param": "props The rule props.",
              "comment": "The rule props."
            },
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.RuleProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates and adds a rule."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.RuleAssertion": {
      "docs": {
        "comment": "A rule assertion."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The assertion."
          },
          "name": "assert",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.FnCondition"
          }
        },
        {
          "docs": {
            "comment": "The assertion description."
          },
          "name": "assertDescription",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.RuleAssertion",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "RuleAssertion",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.StackProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The AWS environment (account/region) where this stack will be deployed.\n\nIf not supplied, the `default-account` and `default-region` context parameters will be\nused. If they are undefined, it will not be possible to deploy the stack."
          },
          "name": "env",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Environment",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Strategy for logical ID generation\n\nOptional. If not supplied, the HashedNamingScheme will be used."
          },
          "name": "namingScheme",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.IAddressingScheme",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.StackProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "StackProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Stack": {
      "docs": {
        "comment": "A root construct which represents a single CloudFormation stack."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Lists all missing contextual information.\nThis is returned when the stack is synthesized under the 'missing' attribute\nand allows tooling to obtain the context and re-synthesize."
          },
          "name": "missingContext",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_cx_api$.MissingContext"
              },
              "kind": "map"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The environment in which this stack is deployed."
          },
          "name": "env",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Environment"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Used to determine if this construct is a stack."
          },
          "name": "isStack",
          "type": {
            "primitive": "boolean"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Logical ID generation strategy"
          },
          "name": "logicalIds",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.LogicalIDs"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Options for CloudFormation template (like version, transform, description)."
          },
          "name": "templateOptions",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.TemplateOptions"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "node A construct in the tree",
                "comment": "A construct in the tree"
              },
              "name": "node",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            }
          ],
          "docs": {
            "returns": "The Stack object (throws if the node is not part of a Stack-rooted tree)",
            "comment": "Traverses the tree and looks up for the Stack root."
          },
          "name": "find",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Stack"
          }
        },
        {
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Construct"
              }
            },
            {
              "name": "physicalName",
              "type": {
                "primitive": "string",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Adds a metadata annotation \"aws:cdk:physical-name\" to the construct if physicalName\nis non-null. This can be used later by tools and aspects to determine if resources\nhave been created with physical names."
          },
          "name": "annotatePhysicalName",
          "static": true
        },
        {
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "The Resource or undefined if not found",
            "comment": "Looks up a resource by path."
          },
          "name": "findResource",
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Resource",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation template for this stack by traversing\nthe tree and invoking toCloudFormation() on all Entity objects."
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "why more information about why region is required.",
                "comment": "more information about why region is required."
              },
              "name": "why",
              "type": {
                "primitive": "string",
                "optional": true
              }
            }
          ],
          "docs": {
            "returns": "The region in which this stack is deployed. Throws if region is not defined."
          },
          "name": "requireRegion",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "key Key that uniquely identifies this missing context.",
                "comment": "Key that uniquely identifies this missing context."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "param": "details The set of parameters needed to obtain the context (specific to context provider).",
                "comment": "The set of parameters needed to obtain the context (specific to context provider)."
              },
              "name": "details",
              "type": {
                "fqn": "jsii$_aws_cdk_cx_api$.MissingContext"
              }
            }
          ],
          "docs": {
            "comment": "Indicate that a context key was expected\n\nContains instructions on how the key should be supplied."
          },
          "name": "reportMissingContext"
        },
        {
          "parameters": [
            {
              "name": "oldId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Rename a generated logical identities"
          },
          "name": "renameLogical"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Stack",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Stack",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent Parent of this stack, usually a Program instance.",
              "comment": "Parent of this stack, usually a Program instance."
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.App",
              "optional": true
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string",
              "optional": true
            }
          },
          {
            "docs": {
              "param": "props Stack properties.",
              "comment": "Stack properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.StackProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a new stack."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.IDependable": {
      "docs": {
        "comment": "Represents a construct that can be \"depended on\" via `addDependency`."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Returns the set of all stack elements (resources, parameters, conditions)\nthat should be added when a resource \"depends on\" this construct."
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.IDependable",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "IDependable",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.StackElement": {
      "docs": {
        "comment": "An element of a CloudFormation stack."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The logical ID for this CloudFormation stack element"
          },
          "name": "logicalId",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The stack this Construct has been made a part of"
          },
          "name": "stack",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Stack"
          },
          "protected": true
        },
        {
          "docs": {
            "returns": "the stack trace of the point where this Resource was created from, sourced\nfrom the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most\nnode +internal+ entries filtered."
          },
          "name": "creationStackTrace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Return the path with respect to the stack"
          },
          "name": "stackPath",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Returns the set of all stack elements (resources, parameters, conditions)\nthat should be added when a resource \"depends on\" this construct."
          },
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_core$.IDependable"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n     Resources: {\n         [this.logicalId]: {\n             Type: this.resourceType,\n             Properties: this.props,\n             Condition: this.condition\n         }\n     }\n}"
          },
          "name": "toCloudFormation",
          "abstract": true,
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_core$.IDependable"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.StackElement",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "StackElement",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an entity and binds it to a tree.\nNote that the root of the tree must be a Stack object (not just any Root)."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.TemplateOptions": {
      "docs": {
        "comment": "CloudFormation template options for a stack."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "Gets or sets the description of this stack.\nIf provided, it will be included in the CloudFormation template's \"Description\" attribute."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Gets or sets the AWSTemplateFormatVersion field of the CloudFormation template."
          },
          "name": "templateFormatVersion",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Gets or sets the top-level template transform for this stack (e.g. \"AWS::Serverless-2016-10-31\")."
          },
          "name": "transform",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Metadata associated with the CloudFormation template."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.TemplateOptions",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "TemplateOptions",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Referenceable": {
      "docs": {
        "comment": "A construct, which is part of a stack and can be referenced using it's logical ID\nusing the CloudFormation intrinsic function { Ref: ID }."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID."
          },
          "name": "ref",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Referenceable",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Referenceable",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.StackElement"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "parent The parent construct",
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "docs": {
          "comment": "Creates an entity and binds it to a tree.\nNote that the root of the tree must be a Stack object (not just any Root)."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Tag": {
      "docs": {
        "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-key"
          },
          "name": "key",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "fqn": "jsii$_aws_cdk_core$.Token"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-value"
          },
          "name": "value",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "fqn": "jsii$_aws_cdk_core$.Token"
                }
              ]
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Tag",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Tag",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.RemovalPolicy": {
      "kind": "enum",
      "members": [
        {
          "name": "Destroy"
        },
        {
          "name": "Orphan"
        },
        {
          "name": "Forbid"
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.RemovalPolicy",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "RemovalPolicy"
    },
    "jsii$_aws_cdk_core$.Arn": {
      "docs": {
        "comment": "An Amazon Resource Name (ARN).\nhttp://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "components",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.ArnComponents"
              }
            }
          ],
          "docs": {
            "comment": "Creates an ARN from components.\nIf any component is the empty string,\nan empty string will be inserted into the generated ARN\nat the location that component corresponds to."
          },
          "name": "fromComponents",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.Arn"
          }
        },
        {
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "returns": "an ArnComponents object which allows access to the various\ncomponents of the ARN.",
            "comment": "Given an ARN, parses it and returns components.\n\nThe ARN it will be parsed and validated. The separator (`sep`) will be\nset to '/' if the 6th component includes a '/', in which case, `resource`\nwill be set to the value before the '/' and `resourceName` will be the\nrest. In case there is no '/', `resource` will be set to the 6th\ncomponents and `resourceName` will be set to the rest of the string."
          },
          "name": "parse",
          "static": true,
          "returns": {
            "fqn": "jsii$_aws_cdk_core$.ArnComponents"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Arn",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Arn",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ArnComponents": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "default": "The AWS partition the stack is deployed to.",
            "comment": "The partition that the resource is in. For standard AWS regions, the\npartition is aws. If you have resources in other partitions, the\npartition is aws-partitionname. For example, the partition for resources\nin the China (Beijing) region is aws-cn."
          },
          "name": "partition",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The service namespace that identifies the AWS product (for example,\n's3', 'iam', 'codepipline')."
          },
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "The region the stack is deployed to.",
            "comment": "The region the resource resides in. Note that the ARNs for some resources\ndo not require a region, so this component might be omitted."
          },
          "name": "region",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "default": "The account the stack is deployed to.",
            "comment": "The ID of the AWS account that owns the resource, without the hyphens.\nFor example, 123456789012. Note that the ARNs for some resources don't\nrequire an account number, so this component might be omitted."
          },
          "name": "account",
          "type": {
            "primitive": "any",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Resource type (e.g. \"table\", \"autoScalingGroup\", \"certificate\").\nFor some resource types, e.g. S3 buckets, this field defines the bucket name."
          },
          "name": "resource",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "default": "'/'",
            "comment": "Separator between resource type and the resource.\n\nCan be either '/' or ':'. Will only be used if path is defined."
          },
          "name": "sep",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Resource name or path within the resource (i.e. S3 bucket object key) or\na wildcard such as ``\"*\"``. This is service-dependent."
          },
          "name": "resourceName",
          "type": {
            "primitive": "any",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ArnComponents",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ArnComponents",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.Secret": {
      "docs": {
        "comment": "A token that represents a value that's expected to be a secret, like\npasswords and keys.\n\nIt is recommended to use the `SecretParameter` construct in order to import\nsecret values from the SSM Parameter Store instead of storing them in your\ncode.\n\nHowever, you can also just pass in values, like any other token: `new Secret('bla')`"
      },
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.Secret",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Secret",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Token"
      },
      "initializer": {
        "parameters": [
          {
            "name": "valueOrFunction",
            "type": {
              "primitive": "any",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a token that resolves to `value`. If value is a function,\nthe function is evaluated upon resolution and the value it returns will be\nuesd as the token's value."
        },
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.SecretProps": {
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The name of the SSM parameter where the secret value is stored."
          },
          "name": "ssmParameter",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "No description",
            "comment": "A string of up to 4000 characters that describes the parameter."
          },
          "name": "description",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A regular expression that represents the patterns to allow for String types."
          },
          "name": "allowedPattern",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An array containing the list of values allowed for the parameter."
          },
          "name": "allowedValues",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:"
          },
          "name": "constraintDescription",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An integer value that determines the largest number of characters you want to allow for String types."
          },
          "name": "maxLength",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "An integer value that determines the smallest number of characters you want to allow for String types."
          },
          "name": "minLength",
          "type": {
            "primitive": "number",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.SecretProps",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "SecretProps",
      "datatype": true
    },
    "jsii$_aws_cdk_core$.SecretParameter": {
      "docs": {
        "comment": "Defines a secret value resolved from the Systems Manager (SSM) Parameter\nStore during deployment. This is useful for referencing values that you do\nnot wish to include in your code base, such as secrets, passwords and keys.\n\nThis construct will add a CloudFormation parameter to your template bound to\nan SSM parameter (of type \"AWS::SSM::Parameter::Value<String>\"). Deployment\nwill fail if the value doesn't exist in the target environment.\n\nImportant: For values other than secrets, prefer to use the\n`SSMParameterProvider` which resolves SSM parameter in design-time, and\nensures that stack deployments are deterministic."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "A token for the secret value."
          },
          "name": "value",
          "type": {
            "fqn": "jsii$_aws_cdk_core$.Token"
          }
        }
      ],
      "methods": [
        {
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.SecretParameter",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "SecretParameter",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Construct"
      },
      "initializer": {
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.SecretProps"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.App": {
      "docs": {
        "comment": "Represents a CDK program."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "returns": "STDOUT",
            "comment": "Runs the program"
          },
          "name": "run",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "deprecated": "Use app.run()."
          },
          "name": "exec",
          "returns": {
            "primitive": "string",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "Lists all stacks in this app."
          },
          "name": "listStacks",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_cx_api$.StackInfo"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "docs": {
                "param": "stackName The name of the stack to synthesize",
                "comment": "The name of the stack to synthesize"
              },
              "name": "stackName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Synthesize and validate a single stack"
          },
          "name": "synthesizeStack",
          "returns": {
            "fqn": "jsii$_aws_cdk_cx_api$.SynthesizedStack"
          }
        },
        {
          "parameters": [
            {
              "name": "stackNames",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "docs": {
            "comment": "Synthesizes multiple stacks"
          },
          "name": "synthesizeStacks",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_cx_api$.SynthesizedStack"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "jsii$_aws_cdk_core$.Stack"
              }
            }
          ],
          "docs": {
            "comment": "Returns metadata for all constructs in the stack."
          },
          "name": "collectMetadata",
          "returns": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "jsii$_aws_cdk_core$.MetadataEntry"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.App",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "App",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.Root"
      },
      "initializer": {
        "parameters": [
          {
            "name": "argv",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              },
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Program": {
      "kind": "class",
      "fqn": "jsii$_aws_cdk_core$.Program",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Program",
      "base": {
        "fqn": "jsii$_aws_cdk_core$.App"
      },
      "initializer": {
        "parameters": [
          {
            "name": "argv",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              },
              "optional": true
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.ContextProvider": {
      "docs": {
        "comment": "Base class for the model side of context providers\n\nInstances of this class communicate with context provider plugins in the 'cdk\ntoolkit' via context variables (input), outputting specialized queries for\nmore context variables (output).\n\nContextProvider needs access to a Construct to hook into the context mechanism."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "provider",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "scope",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "docs": {
            "comment": "Read a provider value, verifying it's a string"
          },
          "name": "getStringValue",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "provider",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "scope",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "defaultValue",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                },
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Read a provider value, verifying it's a list"
          },
          "name": "getStringListValue",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "parameters": [
            {
              "name": "providerDescription",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Helper function to wrap up account and region into a scope tuple"
          },
          "name": "accountRegionScope",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.ContextProvider",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "ContextProvider",
      "initializer": {
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.AvailabilityZoneProvider": {
      "docs": {
        "comment": "Context provider that will return the availability zones for the current account and region"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "Return the list of AZs for the current account and region"
          },
          "name": "availabilityZones",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.AvailabilityZoneProvider",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "AvailabilityZoneProvider",
      "initializer": {
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.SSMParameterProvider": {
      "docs": {
        "comment": "Context provider that will read values from the SSM parameter store in the indicated account and region"
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Return the SSM parameter string with the indicated key"
          },
          "name": "getString",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.SSMParameterProvider",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "SSMParameterProvider",
      "initializer": {
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "jsii$_aws_cdk_core$.Construct"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$_aws_cdk_core$.Environment": {
      "docs": {
        "comment": "The deployment environment for a stack."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The AWS accopunt ID for this environment.\nIf not specified, the context parameter `default-account` is used."
          },
          "name": "account",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The AWS region for this environment.\nIf not specified, the context parameter `default-region` is used."
          },
          "name": "region",
          "type": {
            "primitive": "string",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_core$.Environment",
      "module": "jsii$_aws_cdk_core$",
      "namespace": "jsii$_aws_cdk_core$",
      "name": "Environment",
      "datatype": true
    }
  },
  "nametree": {
    "jsii$_aws_cdk_core$": {
      "Construct": {
        "_": "jsii$_aws_cdk_core$.Construct"
      },
      "Root": {
        "_": "jsii$_aws_cdk_core$.Root"
      },
      "MetadataEntry": {
        "_": "jsii$_aws_cdk_core$.MetadataEntry"
      },
      "ValidationError": {
        "_": "jsii$_aws_cdk_core$.ValidationError"
      },
      "Token": {
        "_": "jsii$_aws_cdk_core$.Token"
      },
      "ConditionProps": {
        "_": "jsii$_aws_cdk_core$.ConditionProps"
      },
      "Condition": {
        "_": "jsii$_aws_cdk_core$.Condition"
      },
      "Fn": {
        "_": "jsii$_aws_cdk_core$.Fn"
      },
      "FnFindInMap": {
        "_": "jsii$_aws_cdk_core$.FnFindInMap"
      },
      "FnGetAtt": {
        "_": "jsii$_aws_cdk_core$.FnGetAtt"
      },
      "FnGetAZs": {
        "_": "jsii$_aws_cdk_core$.FnGetAZs"
      },
      "FnImportValue": {
        "_": "jsii$_aws_cdk_core$.FnImportValue"
      },
      "FnJoin": {
        "_": "jsii$_aws_cdk_core$.FnJoin"
      },
      "FnConcat": {
        "_": "jsii$_aws_cdk_core$.FnConcat"
      },
      "FnSelect": {
        "_": "jsii$_aws_cdk_core$.FnSelect"
      },
      "FnSplit": {
        "_": "jsii$_aws_cdk_core$.FnSplit"
      },
      "FnSub": {
        "_": "jsii$_aws_cdk_core$.FnSub"
      },
      "FnBase64": {
        "_": "jsii$_aws_cdk_core$.FnBase64"
      },
      "FnCidr": {
        "_": "jsii$_aws_cdk_core$.FnCidr"
      },
      "FnCondition": {
        "_": "jsii$_aws_cdk_core$.FnCondition"
      },
      "FnAnd": {
        "_": "jsii$_aws_cdk_core$.FnAnd"
      },
      "FnEquals": {
        "_": "jsii$_aws_cdk_core$.FnEquals"
      },
      "FnIf": {
        "_": "jsii$_aws_cdk_core$.FnIf"
      },
      "FnNot": {
        "_": "jsii$_aws_cdk_core$.FnNot"
      },
      "FnOr": {
        "_": "jsii$_aws_cdk_core$.FnOr"
      },
      "FnContains": {
        "_": "jsii$_aws_cdk_core$.FnContains"
      },
      "FnEachMemberEquals": {
        "_": "jsii$_aws_cdk_core$.FnEachMemberEquals"
      },
      "FnEachMemberIn": {
        "_": "jsii$_aws_cdk_core$.FnEachMemberIn"
      },
      "FnRefAll": {
        "_": "jsii$_aws_cdk_core$.FnRefAll"
      },
      "FnValueOf": {
        "_": "jsii$_aws_cdk_core$.FnValueOf"
      },
      "FnValueOfAll": {
        "_": "jsii$_aws_cdk_core$.FnValueOfAll"
      },
      "IncludeProps": {
        "_": "jsii$_aws_cdk_core$.IncludeProps"
      },
      "Include": {
        "_": "jsii$_aws_cdk_core$.Include"
      },
      "IAddressingScheme": {
        "_": "jsii$_aws_cdk_core$.IAddressingScheme"
      },
      "HashedAddressingScheme": {
        "_": "jsii$_aws_cdk_core$.HashedAddressingScheme"
      },
      "LogicalIDs": {
        "_": "jsii$_aws_cdk_core$.LogicalIDs"
      },
      "MappingProps": {
        "_": "jsii$_aws_cdk_core$.MappingProps"
      },
      "Mapping": {
        "_": "jsii$_aws_cdk_core$.Mapping"
      },
      "OutputProps": {
        "_": "jsii$_aws_cdk_core$.OutputProps"
      },
      "Output": {
        "_": "jsii$_aws_cdk_core$.Output"
      },
      "StringListOutputProps": {
        "_": "jsii$_aws_cdk_core$.StringListOutputProps"
      },
      "StringListOutput": {
        "_": "jsii$_aws_cdk_core$.StringListOutput"
      },
      "ParameterProps": {
        "_": "jsii$_aws_cdk_core$.ParameterProps"
      },
      "Parameter": {
        "_": "jsii$_aws_cdk_core$.Parameter"
      },
      "PolicyDocument": {
        "_": "jsii$_aws_cdk_core$.PolicyDocument"
      },
      "PolicyPrincipal": {
        "_": "jsii$_aws_cdk_core$.PolicyPrincipal"
      },
      "PrincipalPolicyFragment": {
        "_": "jsii$_aws_cdk_core$.PrincipalPolicyFragment"
      },
      "ArnPrincipal": {
        "_": "jsii$_aws_cdk_core$.ArnPrincipal"
      },
      "AccountPrincipal": {
        "_": "jsii$_aws_cdk_core$.AccountPrincipal"
      },
      "ServicePrincipal": {
        "_": "jsii$_aws_cdk_core$.ServicePrincipal"
      },
      "CanonicalUserPrincipal": {
        "_": "jsii$_aws_cdk_core$.CanonicalUserPrincipal"
      },
      "FederatedPrincipal": {
        "_": "jsii$_aws_cdk_core$.FederatedPrincipal"
      },
      "AccountRootPrincipal": {
        "_": "jsii$_aws_cdk_core$.AccountRootPrincipal"
      },
      "Anyone": {
        "_": "jsii$_aws_cdk_core$.Anyone"
      },
      "PolicyStatement": {
        "_": "jsii$_aws_cdk_core$.PolicyStatement",
        "Effect": {
          "_": "jsii$_aws_cdk_core$.PolicyStatement.Effect"
        }
      },
      "PseudoParameter": {
        "_": "jsii$_aws_cdk_core$.PseudoParameter"
      },
      "AwsAccountId": {
        "_": "jsii$_aws_cdk_core$.AwsAccountId"
      },
      "AwsDomainSuffix": {
        "_": "jsii$_aws_cdk_core$.AwsDomainSuffix"
      },
      "AwsNotificationARNs": {
        "_": "jsii$_aws_cdk_core$.AwsNotificationARNs"
      },
      "AwsNoValue": {
        "_": "jsii$_aws_cdk_core$.AwsNoValue"
      },
      "AwsPartition": {
        "_": "jsii$_aws_cdk_core$.AwsPartition"
      },
      "AwsRegion": {
        "_": "jsii$_aws_cdk_core$.AwsRegion"
      },
      "AwsStackId": {
        "_": "jsii$_aws_cdk_core$.AwsStackId"
      },
      "AwsStackName": {
        "_": "jsii$_aws_cdk_core$.AwsStackName"
      },
      "ResourceProps": {
        "_": "jsii$_aws_cdk_core$.ResourceProps"
      },
      "Resource": {
        "_": "jsii$_aws_cdk_core$.Resource"
      },
      "ResourceOptions": {
        "_": "jsii$_aws_cdk_core$.ResourceOptions"
      },
      "CreationPolicy": {
        "_": "jsii$_aws_cdk_core$.CreationPolicy"
      },
      "AutoScalingCreationPolicy": {
        "_": "jsii$_aws_cdk_core$.AutoScalingCreationPolicy"
      },
      "ResourceSignal": {
        "_": "jsii$_aws_cdk_core$.ResourceSignal"
      },
      "DeletionPolicy": {
        "_": "jsii$_aws_cdk_core$.DeletionPolicy"
      },
      "UpdatePolicy": {
        "_": "jsii$_aws_cdk_core$.UpdatePolicy"
      },
      "AutoScalingRollingUpdate": {
        "_": "jsii$_aws_cdk_core$.AutoScalingRollingUpdate"
      },
      "AutoScalingReplacingUpdate": {
        "_": "jsii$_aws_cdk_core$.AutoScalingReplacingUpdate"
      },
      "AutoScalingScheduledAction": {
        "_": "jsii$_aws_cdk_core$.AutoScalingScheduledAction"
      },
      "RuleProps": {
        "_": "jsii$_aws_cdk_core$.RuleProps"
      },
      "Rule": {
        "_": "jsii$_aws_cdk_core$.Rule"
      },
      "RuleAssertion": {
        "_": "jsii$_aws_cdk_core$.RuleAssertion"
      },
      "StackProps": {
        "_": "jsii$_aws_cdk_core$.StackProps"
      },
      "Stack": {
        "_": "jsii$_aws_cdk_core$.Stack"
      },
      "IDependable": {
        "_": "jsii$_aws_cdk_core$.IDependable"
      },
      "StackElement": {
        "_": "jsii$_aws_cdk_core$.StackElement"
      },
      "TemplateOptions": {
        "_": "jsii$_aws_cdk_core$.TemplateOptions"
      },
      "Referenceable": {
        "_": "jsii$_aws_cdk_core$.Referenceable"
      },
      "Tag": {
        "_": "jsii$_aws_cdk_core$.Tag"
      },
      "RemovalPolicy": {
        "_": "jsii$_aws_cdk_core$.RemovalPolicy"
      },
      "Arn": {
        "_": "jsii$_aws_cdk_core$.Arn"
      },
      "ArnComponents": {
        "_": "jsii$_aws_cdk_core$.ArnComponents"
      },
      "Secret": {
        "_": "jsii$_aws_cdk_core$.Secret"
      },
      "SecretProps": {
        "_": "jsii$_aws_cdk_core$.SecretProps"
      },
      "SecretParameter": {
        "_": "jsii$_aws_cdk_core$.SecretParameter"
      },
      "App": {
        "_": "jsii$_aws_cdk_core$.App"
      },
      "Program": {
        "_": "jsii$_aws_cdk_core$.Program"
      },
      "ContextProvider": {
        "_": "jsii$_aws_cdk_core$.ContextProvider"
      },
      "AvailabilityZoneProvider": {
        "_": "jsii$_aws_cdk_core$.AvailabilityZoneProvider"
      },
      "SSMParameterProvider": {
        "_": "jsii$_aws_cdk_core$.SSMParameterProvider"
      },
      "Environment": {
        "_": "jsii$_aws_cdk_core$.Environment"
      }
    }
  },
  "typecount": 98,
  "externalTypes": {
    "jsii$_aws_cdk_cx_api$.MissingContext": {
      "docs": {
        "comment": "Represents a missing piece of context.\n(should have been an interface, but jsii still doesn't have support for structs)."
      },
      "kind": "interface",
      "properties": [
        {
          "name": "provider",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "scope",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "args",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_cx_api$.MissingContext",
      "module": "jsii$_aws_cdk_cx_api$",
      "namespace": "jsii$_aws_cdk_cx_api$",
      "name": "MissingContext",
      "datatype": true
    },
    "jsii$_aws_cdk_cx_api$.StackInfo": {
      "docs": {
        "comment": "Identifies and contains metadata about a stack"
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_cx_api$.StackId"
        }
      ],
      "properties": [
        {
          "name": "environment",
          "type": {
            "fqn": "jsii$_aws_cdk_cx_api$.Environment",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_cx_api$.StackInfo",
      "module": "jsii$_aws_cdk_cx_api$",
      "namespace": "jsii$_aws_cdk_cx_api$",
      "name": "StackInfo",
      "datatype": true
    },
    "jsii$_aws_cdk_cx_api$.SynthesizedStack": {
      "docs": {
        "comment": "A complete synthesized stack"
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$_aws_cdk_cx_api$.StackInfo"
        }
      ],
      "properties": [
        {
          "name": "missing",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$_aws_cdk_cx_api$.MissingContext"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "jsii$_aws_cdk_cx_api$.MetadataEntry"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "template",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$_aws_cdk_cx_api$.SynthesizedStack",
      "module": "jsii$_aws_cdk_cx_api$",
      "namespace": "jsii$_aws_cdk_cx_api$",
      "name": "SynthesizedStack",
      "datatype": true
    }
  },
  "name": "jsii$_aws_cdk_core$",
  "package": "@aws-cdk/core",
  "version": "0.7.2-beta",
  "dependencies": {
    "jsii$_aws_cdk_cx_api$": {
      "package": "@aws-cdk/cx-api",
      "version": "0.7.2-beta"
    }
  },
  "bundled": {
    "js-base64": "^2.4.5",
    "json-diff": "^0.3.1"
  },
  "names": {
    "java": "com.amazonaws.cdk",
    "dotnet": "AWS.Cdk",
    "js": "@aws-cdk/core"
  },
  "nativenames": {
    "jsii$_aws_cdk_cx_api$": {
      "java": "com.amazonaws.cdk.cxapi",
      "dotnet": "AWS.Cdk.CxApi",
      "js": "@aws-cdk/cx-api"
    },
    "jsii$_aws_cdk_core$": {
      "java": "com.amazonaws.cdk",
      "dotnet": "AWS.Cdk",
      "js": "@aws-cdk/core"
    }
  },
  "code": "var jsii$_aws_cdk_core$ =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cxapi = __webpack_require__(5);\nconst construct_1 = __webpack_require__(2);\nconst tokens_1 = __webpack_require__(1);\nconst logical_id_1 = __webpack_require__(6);\n/**\n * A root construct which represents a single CloudFormation stack.\n */\nclass Stack extends construct_1.Construct {\n    /**\n     * Creates a new stack.\n     *\n     * @param parent Parent of this stack, usually a Program instance.\n     * @param props Stack properties.\n     */\n    constructor(parent, name, props) {\n        // For unit test convenience parents are optional, so bypass the type check when calling the parent.\n        super(parent, name);\n        /**\n         * Lists all missing contextual information.\n         * This is returned when the stack is synthesized under the 'missing' attribute\n         * and allows tooling to obtain the context and re-synthesize.\n         */\n        this.missingContext = {};\n        /**\n         * Used to determine if this construct is a stack.\n         */\n        this.isStack = true;\n        /**\n         * Options for CloudFormation template (like version, transform, description).\n         */\n        this.templateOptions = {};\n        this.env = this.parseEnvironment(props);\n        this.logicalIds = new logical_id_1.LogicalIDs(props && props.namingScheme ? props.namingScheme : new logical_id_1.HashedAddressingScheme());\n    }\n    /**\n     * Traverses the tree and looks up for the Stack root.\n     * @param node A construct in the tree\n     * @returns The Stack object (throws if the node is not part of a Stack-rooted tree)\n     */\n    static find(node) {\n        let curr = node;\n        while (curr != null && !isStack(curr)) {\n            curr = curr.parent;\n        }\n        if (curr == null) {\n            throw new Error(`Cannot find a Stack parent for '${node.toString()}'`);\n        }\n        return curr;\n    }\n    /**\n     * Adds a metadata annotation \"aws:cdk:physical-name\" to the construct if physicalName\n     * is non-null. This can be used later by tools and aspects to determine if resources\n     * have been created with physical names.\n     */\n    static annotatePhysicalName(construct, physicalName) {\n        if (physicalName == null) {\n            return;\n        }\n        construct.addMetadata('aws:cdk:physical-name', physicalName);\n    }\n    /**\n     * Looks up a resource by path.\n     *\n     * @returns The Resource or undefined if not found\n     */\n    findResource(path) {\n        const r = this.findChild(path);\n        if (!r) {\n            return undefined;\n        }\n        // found an element, check if it's a resource (duck-type)\n        if (!('resourceType' in r)) {\n            throw new Error(`Found a stack element for ${path} but it is not a resource: ${r.toString()}`);\n        }\n        return r;\n    }\n    /**\n     * Returns the CloudFormation template for this stack by traversing\n     * the tree and invoking toCloudFormation() on all Entity objects.\n     */\n    toCloudFormation() {\n        // before we begin synthesis, we shall lock this stack, so children cannot be added\n        this.lock();\n        try {\n            const template = {\n                Description: this.templateOptions.description,\n                Transform: this.templateOptions.transform,\n                AWSTemplateFormatVersion: this.templateOptions.templateFormatVersion,\n                Metadata: this.templateOptions.metadata\n            };\n            const elements = stackElements(this);\n            const fragments = elements.map(e => e.toCloudFormation());\n            // merge in all CloudFormation fragments collected from the tree\n            for (const fragment of fragments) {\n                merge(template, fragment);\n            }\n            // resolve all tokens and remove all empties\n            const ret = tokens_1.resolve(template) || {};\n            this.logicalIds.assertAllRenamesApplied();\n            return ret;\n        }\n        finally {\n            // allow mutations after synthesis is finished.\n            this.unlock();\n        }\n    }\n    /**\n     * @param why more information about why region is required.\n     * @returns The region in which this stack is deployed. Throws if region is not defined.\n     */\n    requireRegion(why) {\n        if (!this.env.region) {\n            throw new Error(`${why ? why + '. ' : ''}Stack requires region information. It can be either supplied via the \"env\" property, ` +\n                `via the \"${cxapi.DEFAULT_REGION_CONTEXT_KEY}\" context parameters or using \"aws configure\"`);\n        }\n        return this.env.region;\n    }\n    /**\n     * Indicate that a context key was expected\n     *\n     * Contains instructions on how the key should be supplied.\n     * @param key Key that uniquely identifies this missing context.\n     * @param details The set of parameters needed to obtain the context (specific to context provider).\n     */\n    reportMissingContext(key, details) {\n        this.missingContext[key] = details;\n    }\n    /**\n     * Rename a generated logical identities\n     */\n    renameLogical(oldId, newId) {\n        // tslint:disable-next-line:no-console\n        if (this.children.length > 0) {\n            throw new Error(\"All renames must be set up before adding elements to the stack\");\n        }\n        this.logicalIds.renameLogical(oldId, newId);\n    }\n    /**\n     * Validate stack name\n     *\n     * CloudFormation stack names can include dashes in addition to the regular identifier\n     * character classes, and we don't allow one of the magic markers.\n     */\n    _validateName(name) {\n        if (!Stack.VALID_STACK_NAME_REGEX.test(name)) {\n            throw new Error(`Stack name must match the regular expression: ${Stack.VALID_STACK_NAME_REGEX.toString()}, got '${name}'`);\n        }\n    }\n    /**\n     * Applied defaults to environment attributes.\n     */\n    parseEnvironment(props) {\n        // start with `env`.\n        const env = (props && props.env) || {};\n        // if account is not specified, attempt to read from context.\n        if (!env.account) {\n            env.account = this.getContext(cxapi.DEFAULT_ACCOUNT_CONTEXT_KEY);\n        }\n        // if region is not specified, attempt to read from context.\n        if (!env.region) {\n            env.region = this.getContext(cxapi.DEFAULT_REGION_CONTEXT_KEY);\n        }\n        return env;\n    }\n}\nStack.VALID_STACK_NAME_REGEX = /^[A-Za-z][A-Za-z0-9-]*$/;\nexports.Stack = Stack;\nfunction merge(template, part) {\n    for (const section of Object.keys(part)) {\n        const src = part[section];\n        // create top-level section if it doesn't exist\n        let dest = template[section];\n        if (!dest) {\n            template[section] = dest = src;\n        }\n        else {\n            // add all entities from source section to destination section\n            for (const id of Object.keys(src)) {\n                if (id in dest) {\n                    throw new Error(`section '${section}' already contains '${id}'`);\n                }\n                dest[id] = src[id];\n            }\n        }\n    }\n}\nconst LOGICAL_ID_MD = 'aws:cdk:logicalId';\n/**\n * An element of a CloudFormation stack.\n */\nclass StackElement extends construct_1.Construct {\n    /**\n     * Returns `true` if a construct is a stack element (i.e. part of the\n     * synthesized cloudformation template).\n     *\n     * Uses duck-typing instead of `instanceof` to allow stack elements from different\n     * versions of this library to be included in the same stack.\n     *\n     * @returns The construct as a stack element or undefined if it is not a stack element.\n     */\n    static _asStackElement(construct) {\n        if ('logicalId' in construct && 'toCloudFormation' in construct) {\n            return construct;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Creates an entity and binds it to a tree.\n     * Note that the root of the tree must be a Stack object (not just any Root).\n     *\n     * @param parent The parent construct\n     * @param props Construct properties\n     */\n    constructor(parent, name) {\n        super(parent, name);\n        const s = Stack.find(this);\n        if (!s) {\n            throw new Error('The tree root must be derived from \"Stack\"');\n        }\n        this.stack = s;\n        this.addMetadata(LOGICAL_ID_MD, new tokens_1.Token(() => this.logicalId), this.constructor);\n        this.logicalId = this.stack.logicalIds.getLogicalId(this);\n    }\n    /**\n     * @returns the stack trace of the point where this Resource was created from, sourced\n     *          from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most\n     *          node +internal+ entries filtered.\n     */\n    get creationStackTrace() {\n        return filterStackTrace(this.metadata.find(md => md.type === LOGICAL_ID_MD).trace);\n        function filterStackTrace(stack) {\n            const result = Array.of(...stack);\n            while (result.length > 0 && shouldFilter(result[result.length - 1])) {\n                result.pop();\n            }\n            // It's weird if we filtered everything, so return the whole stack...\n            return result.length === 0 ? stack : result;\n        }\n        function shouldFilter(str) {\n            return str.match(/[^(]+\\(internal\\/.*/) !== null;\n        }\n    }\n    /**\n     * Return the path with respect to the stack\n     */\n    get stackPath() {\n        return this.ancestors(this.stack).map(c => c.name).join(construct_1.PATH_SEP);\n    }\n    get dependencyElements() {\n        return [this];\n    }\n}\nexports.StackElement = StackElement;\n/**\n * A construct, which is part of a stack and can be referenced using it's logical ID\n * using the CloudFormation intrinsic function { Ref: ID }.\n */\nclass Referenceable extends StackElement {\n    /**\n     * Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.\n     */\n    get ref() {\n        return new tokens_1.Token(() => ({ Ref: this.logicalId }));\n    }\n}\nexports.Referenceable = Referenceable;\n/**\n * Return whether the given object is a Stack.\n *\n * We do attribute detection since we can't reliably use 'instanceof'.\n */\nfunction isStack(construct) {\n    return construct.isStack;\n}\n/**\n * Collect all StackElements from a construct\n *\n * @param node Root node to collect all StackElements from\n * @param into Array to append StackElements to\n * @returns The same array as is being collected into\n */\nfunction stackElements(node, into = []) {\n    const element = StackElement._asStackElement(node);\n    if (element) {\n        into.push(element);\n    }\n    for (const child of node.children) {\n        stackElements(child, into);\n    }\n    return into;\n}\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst construct_1 = __webpack_require__(2);\n/**\n * If objects has a function property by this name, they will be considered tokens, and this\n * function will be called to resolve the value for this object.\n */\nexports.RESOLVE_METHOD = 'resolve';\n/**\n * Represents a lazy-evaluated value. Can be used to delay evaluation of a certain value\n * in case, for example, that it requires some context or late-bound data.\n */\nclass Token {\n    /**\n     * Creates a token that resolves to `value`. If value is a function,\n     * the function is evaluated upon resolution and the value it returns will be\n     * uesd as the token's value.\n     */\n    constructor(valueOrFunction) {\n        this.valueOrFunction = valueOrFunction;\n    }\n    /**\n     * @returns The resolved value for this token.\n     */\n    resolve() {\n        let value = this.valueOrFunction;\n        if (typeof (value) === 'function') {\n            value = value();\n        }\n        return value;\n    }\n}\nexports.Token = Token;\n/**\n * Returns true if obj is a token (i.e. has the resolve() method)\n * @param obj The object to test.\n */\nfunction istoken(obj) {\n    return typeof (obj[exports.RESOLVE_METHOD]) === 'function';\n}\nexports.istoken = istoken;\n/**\n * Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays.\n * Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected.\n *\n * @param obj The object to resolve.\n * @param prefix Prefix key path components for diagnostics.\n */\nfunction resolve(obj, prefix) {\n    const path = prefix || [];\n    const pathName = '/' + path.join('/');\n    // protect against cyclic references by limiting depth.\n    if (path.length > 200) {\n        throw new Error('Unable to resolve object tree with circular reference. Path: ' + pathName);\n    }\n    //\n    // undefined\n    //\n    if (typeof (obj) === 'undefined') {\n        return undefined;\n    }\n    //\n    // null\n    //\n    if (obj === null) {\n        return null;\n    }\n    //\n    // functions - not supported (only tokens are supported)\n    //\n    if (typeof (obj) === 'function') {\n        throw new Error(`Trying to resolve a non-data object. Only token are supported for lazy evaluation. Path: ${pathName}. Object: ${obj}`);\n    }\n    //\n    // primitives - as-is\n    //\n    if (typeof (obj) !== 'object' || obj instanceof Date) {\n        return obj;\n    }\n    //\n    // tokens - invoke 'resolve' and continue to resolve recursively\n    //\n    if (istoken(obj)) {\n        const value = obj[exports.RESOLVE_METHOD]();\n        return resolve(value, path);\n    }\n    //\n    // arrays - resolve all values, remove undefined and remove empty arrays\n    //\n    if (Array.isArray(obj)) {\n        const arr = obj\n            .map((x, i) => resolve(x, path.concat(i.toString())))\n            .filter(x => typeof (x) !== 'undefined');\n        return arr;\n    }\n    //\n    // objects - deep-resolve all values\n    //\n    // Must not be a Construct at this point, otherwise you probably made a type\n    // mistake somewhere and resolve will get into an infinite loop recursing into\n    // child.parent <---> parent.children\n    if (obj instanceof construct_1.Construct) {\n        throw new Error('Trying to resolve() a Construct at ' + pathName);\n    }\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        const value = resolve(obj[key], path.concat(key));\n        // skip undefined\n        if (typeof (value) === 'undefined') {\n            continue;\n        }\n        result[key] = value;\n    }\n    return result;\n}\nexports.resolve = resolve;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PATH_SEP = '/';\n/**\n * Represents the building block of the construct graph.\n * When a construct is created, it is always added as a child\n */\nclass Construct {\n    /**\n     * Creates a new construct node.\n     *\n     * @param parent The parent construct\n     * @param props  Properties for this construct\n     */\n    constructor(parent, name) {\n        /**\n         * List of children and their names\n         */\n        this._children = {};\n        this.context = {};\n        this._metadata = new Array();\n        /**\n         * If this is set to 'true'. addChild() calls for this construct and any child\n         * will fail. This is used to prevent tree mutations during synthesis.\n         */\n        this._locked = false;\n        this.name = name;\n        this.parent = parent;\n        // We say that parent is required, but some root constructs bypass the type checks and\n        // actually pass in 'undefined'.\n        if (parent != null) {\n            if (name === '') {\n                throw new Error('Only root constructs may have an empty name');\n            }\n            // Has side effect so must be very last thing in constructor\n            parent.addChild(this, this.name);\n        }\n        else {\n            // This is a root construct.\n            this.name = name;\n        }\n        // Validate the name we ended up with\n        if (this.name !== '') {\n            this._validateName(this.name);\n        }\n    }\n    /**\n     * Returns a string representation of this construct.\n     */\n    toString() {\n        const path = this.path;\n        return this.typename + (path.length > 0 ? ` [${path}]` : '');\n    }\n    /**\n     * Returns a string with a tree representation of this construct and it's children.\n     */\n    toTreeString(depth = 0) {\n        let out = '';\n        for (let i = 0; i < depth; ++i) {\n            out += '  ';\n        }\n        const name = this.name || '';\n        out += `${this.typename}${name.length > 0 ? ' [' + name + ']' : ''}\\n`;\n        for (const child of this.children) {\n            out += child.toTreeString(depth + 1);\n        }\n        return out;\n    }\n    /**\n     * Return a descendant by path, or undefined\n     *\n     * @param name Relative name of a direct or indirect child\n     * @returns a child by path or undefined if not found.\n     */\n    tryFindChild(path) {\n        // tslint:disable-next-line:no-console\n        if (path.startsWith(exports.PATH_SEP)) {\n            throw new Error('Path must be relative');\n        }\n        const parts = path.split(exports.PATH_SEP);\n        let curr = this;\n        while (curr != null && parts.length > 0) {\n            curr = curr._children[parts.shift()];\n        }\n        return curr;\n    }\n    /**\n     * Return a descendant by path\n     *\n     * Throws an exception if the descendant is not found.\n     *\n     * @param name Relative name of a direct or indirect child\n     * @returns Child with the given path.\n     */\n    findChild(path) {\n        const ret = this.tryFindChild(path);\n        if (!ret) {\n            throw new Error(`No child with path: '${path}'`);\n        }\n        return ret;\n    }\n    /**\n     * All direct children of this construct.\n     */\n    get children() {\n        return Object.keys(this._children).map(k => this._children[k]);\n    }\n    /**\n     * This can be used to set contextual values.\n     * Context must be set before any children are added, since children may consult context info during construction.\n     * If the key already exists, it will be overridden.\n     * @param key The context key\n     * @param value The context value\n     */\n    setContext(key, value) {\n        if (this.children.length > 0) {\n            const names = this.children.map(c => c.name);\n            throw new Error('Cannot set context after children have been added: ' + names.join(','));\n        }\n        this.context[key] = value;\n    }\n    /**\n     * Retrieves a value from tree context.\n     *\n     * Context is usually initialized at the root, but can be overridden at any point in the tree.\n     *\n     * @param key The context key\n     * @returns The context value or undefined\n     */\n    getContext(key) {\n        const value = this.context[key];\n        if (value !== undefined) {\n            return value;\n        }\n        return this.parent && this.parent.getContext(key);\n    }\n    /**\n     * Retrieve a value from tree-global context\n     *\n     * It is an error if the context object is not available.\n     */\n    requireContext(key) {\n        const value = this.getContext(key);\n        if (value == null) {\n            throw new Error(`You must supply a context value named '${key}'`);\n        }\n        return value;\n    }\n    /**\n     * Returns the path of all constructs from root to this construct, in string form.\n     *\n     * @returns /-separated path of this Construct.\n     */\n    get path() {\n        return this.rootPath().map(c => c.name).join(exports.PATH_SEP);\n    }\n    /**\n     * An array of metadata objects associated with this construct.\n     * This can be used, for example, to implement support for deprecation notices, source mapping, etc.\n     */\n    get metadata() {\n        return this._metadata;\n    }\n    /**\n     * Adds a metadata entry to this construct.\n     * Entries are arbitrary values and will also include a stack trace to allow tracing back to\n     * the code location for when the entry was added. It can be used, for example, to include source\n     * mapping in CloudFormation templates to improve diagnostics.\n     *\n     * @param type a string denoting the type of metadata\n     * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.\n     * @param from a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)\n     */\n    addMetadata(type, data, from) {\n        if (data == null) {\n            return this;\n        }\n        const trace = createStackTrace(from || this.addMetadata);\n        this._metadata.push({ type, data, trace });\n        return this;\n    }\n    /**\n     * Adds a { warning: <message> } metadata entry to this construct.\n     * @param message The warning message.\n     */\n    addWarning(message) {\n        return this.addMetadata('warning', message);\n    }\n    /**\n     * This method can be implemented by derived constructs in order to perform\n     * validation logic. It is called on all constructs before synthesis.\n     *\n     * @returns An array of validation error messages, or an empty array if there the construct is valid.\n     */\n    validate() {\n        return [];\n    }\n    /**\n     * Invokes 'validate' on all child constructs and then on this construct (depth-first).\n     * @returns A list of validation errors. If the list is empty, all constructs are valid.\n     */\n    validateTree() {\n        let errors = new Array();\n        for (const child of this.children) {\n            errors = errors.concat(child.validateTree());\n        }\n        const localErrors = this.validate();\n        return errors.concat(localErrors.map(msg => new ValidationError(this, msg)));\n    }\n    /**\n     * Return the ancestors (including self) of this Construct up until and excluding the indicated component\n     *\n     * @param to The construct to return the path components relative to, or\n     * the entire list of ancestors (including root) if omitted.\n     */\n    ancestors(upTo) {\n        const ret = new Array();\n        let curr = this;\n        while (curr && curr !== upTo) {\n            ret.unshift(curr);\n            curr = curr.parent;\n        }\n        return ret;\n    }\n    /**\n     * Validate that the name of the construct is a legal identifier\n     *\n     * At the moment, we restrict these to valid CloudFormation identifiers.\n     *\n     * Protected so it can be overridden by subclasses. Starts with _ to hide the virtual function from JSII,\n     * because we don't want this validation to involve asynchrony. This restricts it to only\n     * be overridable in (Type|Java)Script, but that suffices for now.\n     */\n    _validateName(name) {\n        if (!Construct.VALID_NAME_REGEX.test(name)) {\n            throw new Error(`Name must adhere to the regular expression: ${Construct.VALID_NAME_REGEX.toString()}, got '${name}'`);\n        }\n    }\n    /**\n     * Throws if the `props` bag doesn't include the property `name`.\n     * In the future we can add some type-checking here, maybe even auto-generate during compilation.\n     * @param props The props bag.\n     * @param name The name of the required property.\n     */\n    required(props, name) {\n        if (!(name in props)) {\n            throw new Error(`Construct of type ${this.typename} is missing required property: ${name}`);\n        }\n        const value = props[name];\n        return value;\n    }\n    /**\n     * @returns The type name of this node.\n     */\n    get typename() {\n        const ctor = this.constructor;\n        return ctor.name || 'Construct';\n    }\n    /**\n     * Adds a child construct to this node.\n     *\n     * @param child The child construct\n     * @param name The type name of the child construct.\n     * @returns The resolved path part name of the child\n     */\n    addChild(child, childName) {\n        if (this.locked) {\n            // special error if root is locked\n            if (!this.path) {\n                throw new Error('Cannot add children during synthesis');\n            }\n            throw new Error(`Cannot add children to \"${this.path}\" during synthesis`);\n        }\n        if (childName in this._children) {\n            throw new Error(`There is already a Construct with name '${childName}' in ${this.toString()}`);\n        }\n        this._children[childName] = child;\n    }\n    /**\n     * Locks this construct from allowing more children to be added. After this\n     * call, no more children can be added to this construct or to any children.\n     */\n    lock() {\n        this._locked = true;\n    }\n    /**\n     * Unlocks this costruct and allows mutations (adding children).\n     */\n    unlock() {\n        this._locked = false;\n    }\n    /**\n     * Return the path of components up to but excluding the root\n     */\n    rootPath() {\n        const ancestors = this.ancestors();\n        ancestors.shift();\n        return ancestors;\n    }\n    /**\n     * Returns true if this construct or any of it's parent constructs are\n     * locked.\n     */\n    get locked() {\n        if (this._locked) {\n            return true;\n        }\n        if (this.parent && this.parent.locked) {\n            return true;\n        }\n        return false;\n    }\n}\nConstruct.VALID_NAME_REGEX = /^[A-Za-z][A-Za-z0-9]*$/;\nexports.Construct = Construct;\n/**\n * Represents the root of a construct tree.\n * No parent and no name.\n */\nclass Root extends Construct {\n    constructor() {\n        // Bypass type checks\n        super(undefined, '');\n    }\n}\nexports.Root = Root;\nclass ValidationError {\n    constructor(source, message) {\n        this.source = source;\n        this.message = message;\n    }\n}\nexports.ValidationError = ValidationError;\n// tslint:disable-next-line:ban-types\nfunction createStackTrace(below) {\n    const object = { stack: '' };\n    const previousLimit = Error.stackTraceLimit;\n    try {\n        Error.stackTraceLimit = Number.MAX_SAFE_INTEGER;\n        Error.captureStackTrace(object, below);\n    }\n    finally {\n        Error.stackTraceLimit = previousLimit;\n    }\n    if (!object.stack) {\n        return [];\n    }\n    return object.stack.split('\\n').slice(1).map(s => s.replace(/^\\s*at\\s+/, ''));\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tokens_1 = __webpack_require__(1);\n// tslint:disable:max-line-length\n/**\n * CloudFormation intrinsic functions.\n * http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html\n */\nclass Fn extends tokens_1.Token {\n    constructor(name, value) {\n        super(() => ({ [name]: value }));\n    }\n}\nexports.Fn = Fn;\n/**\n * The intrinsic function Fn::FindInMap returns the value corresponding to keys in a two-level\n * map that is declared in the Mappings section.\n */\nclass FnFindInMap extends Fn {\n    /**\n     * Creates an Fn::FindInMap function.\n     * @param mapName The logical name of a mapping declared in the Mappings section that contains the keys and values.\n     * @param topLevelKey The top-level key name. Its value is a list of key-value pairs.\n     * @param secondLevelKey The second-level key name, which is set to one of the keys from the list assigned to TopLevelKey.\n     */\n    constructor(mapName, topLevelKey, secondLevelKey) {\n        super('Fn::FindInMap', [mapName, topLevelKey, secondLevelKey]);\n    }\n}\nexports.FnFindInMap = FnFindInMap;\n/**\n * The Fn::GetAtt intrinsic function returns the value of an attribute from a resource in the template.\n */\nclass FnGetAtt extends Fn {\n    /**\n     * Creates a Fn::GetAtt function.\n     * @param logicalNameOfResource The logical name (also called logical ID) of the resource that contains the attribute that you want.\n     * @param attributeName The name of the resource-specific attribute whose value you want. See the resource's reference page for details about the attributes available for that resource type.\n     */\n    constructor(logicalNameOfResource, attributeName) {\n        super('Fn::GetAtt', [logicalNameOfResource, attributeName]);\n    }\n}\nexports.FnGetAtt = FnGetAtt;\n/**\n * The intrinsic function Fn::GetAZs returns an array that lists Availability Zones for a\n * specified region. Because customers have access to different Availability Zones, the intrinsic\n * function Fn::GetAZs enables template authors to write templates that adapt to the calling\n * user's access. That way you don't have to hard-code a full list of Availability Zones for a\n * specified region.\n */\nclass FnGetAZs extends Fn {\n    /**\n     * Creates an Fn::GetAZs function.\n     * @param region The name of the region for which you want to get the Availability Zones.\n     *               You can use the AWS::Region pseudo parameter to specify the region in\n     *               which the stack is created. Specifying an empty string is equivalent to\n     *               specifying AWS::Region.\n     */\n    constructor(region) {\n        super('Fn::GetAZs', region || '');\n    }\n}\nexports.FnGetAZs = FnGetAZs;\n/**\n * The intrinsic function Fn::ImportValue returns the value of an output exported by another stack.\n * You typically use this function to create cross-stack references. In the following example\n * template snippets, Stack A exports VPC security group values and Stack B imports them.\n */\nclass FnImportValue extends Fn {\n    /**\n     * Creates an Fn::ImportValue function.\n     * @param sharedValueToImport The stack output value that you want to import.\n     */\n    constructor(sharedValueToImport) {\n        super('Fn::ImportValue', sharedValueToImport);\n    }\n}\nexports.FnImportValue = FnImportValue;\n/**\n * The intrinsic function Fn::Join appends a set of values into a single value, separated by\n * the specified delimiter. If a delimiter is the empty string, the set of values are concatenated\n * with no delimiter.\n */\nclass FnJoin extends Fn {\n    /**\n     * Creates an Fn::Join function.\n     * @param delimiter The value you want to occur between fragments. The delimiter will occur between fragments only. It will not terminate the final value.\n     * @param listOfValues The list of values you want combined.\n     */\n    constructor(delimiter, ...listOfValues) {\n        super('Fn::Join', [delimiter, listOfValues]);\n    }\n}\nexports.FnJoin = FnJoin;\n/**\n * Alias for Fn::Join('', [ values ]).\n */\nclass FnConcat extends FnJoin {\n    /**\n     * Creates an Fn::Join function with an empty delimiter.\n     * @param listOfValues The list of values to concatenate.\n     */\n    constructor(...listOfValues) {\n        super('', ...listOfValues);\n    }\n}\nexports.FnConcat = FnConcat;\n/**\n * The intrinsic function Fn::Select returns a single object from a list of objects by index.\n */\nclass FnSelect extends Fn {\n    /**\n     * Creates an Fn::Select function.\n     * @param index The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array.\n     * @param array The list of objects to select from. This list must not be null, nor can it have null entries.\n     */\n    constructor(index, array) {\n        super('Fn::Select', [index, array]);\n    }\n}\nexports.FnSelect = FnSelect;\n/**\n * To split a string into a list of string values so that you can select an element from the\n * resulting string list, use the Fn::Split intrinsic function. Specify the location of splits\n * with a delimiter, such as , (a comma). After you split a string, use the Fn::Select function\n * to pick a specific element.\n */\nclass FnSplit extends Fn {\n    /**\n     * Create an Fn::Split function.\n     * @param delimiter A string value that determines where the source string is divided.\n     * @param source The string value that you want to split.\n     */\n    constructor(delimiter, source) {\n        super('Fn::Split', [delimiter, source]);\n    }\n}\nexports.FnSplit = FnSplit;\n/**\n * The intrinsic function Fn::Sub substitutes variables in an input string with values that\n * you specify. In your templates, you can use this function to construct commands or outputs\n * that include values that aren't available until you create or update a stack.\n */\nclass FnSub extends Fn {\n    /**\n     * Creates an Fn::Sub function.\n     * @param body A string with variables that AWS CloudFormation substitutes with their\n     *             associated values at runtime. Write variables as ${MyVarName}. Variables\n     *             can be template parameter names, resource logical IDs, resource attributes,\n     *             or a variable in a key-value map. If you specify only template parameter names,\n     *             resource logical IDs, and resource attributes, don't specify a key-value map.\n     * @param variables The name of a variable that you included in the String parameter.\n     *                  The value that AWS CloudFormation substitutes for the associated variable name at runtime.\n     */\n    constructor(body, variables) {\n        super('Fn::Sub', variables ? [body, variables] : body);\n    }\n}\nexports.FnSub = FnSub;\n/**\n * The intrinsic function Fn::Base64 returns the Base64 representation of the input string.\n * This function is typically used to pass encoded data to Amazon EC2 instances by way of\n * the UserData property.\n */\nclass FnBase64 extends Fn {\n    /**\n     * Creates an Fn::Base64 function.\n     * @param data The string value you want to convert to Base64.\n     */\n    constructor(data) {\n        super('Fn::Base64', data);\n    }\n}\nexports.FnBase64 = FnBase64;\n/**\n * The intrinsic function Fn::Cidr returns the specified Cidr address block.\n */\nclass FnCidr extends Fn {\n    /**\n     * Creates an Fn::Cidr function.\n     * @param ipBlock  The user-specified default Cidr address block.\n     * @param count    The number of subnets' Cidr block wanted. Count can be 1 to 256.\n     * @param sizeMask The digit covered in the subnet.\n     */\n    constructor(ipBlock, count, sizeMask) {\n        if (count < 1 || count > 256) {\n            throw new Error(`Fn::Cidr's count attribute must be betwen 1 and 256, ${count} was provided.`);\n        }\n        super('Fn::Cidr', [ipBlock, count, sizeMask]);\n    }\n}\nexports.FnCidr = FnCidr;\n/**\n * You can use intrinsic functions, such as Fn::If, Fn::Equals, and Fn::Not, to conditionally\n * create stack resources. These conditions are evaluated based on input parameters that you\n * declare when you create or update a stack. After you define all your conditions, you can\n * associate them with resources or resource properties in the Resources and Outputs sections\n * of a template.\n *\n * You define all conditions in the Conditions section of a template except for Fn::If conditions.\n * You can use the Fn::If condition in the metadata attribute, update policy attribute, and property\n * values in the Resources section and Outputs sections of a template.\n *\n * You might use conditions when you want to reuse a template that can create resources in different\n * contexts, such as a test environment versus a production environment. In your template, you can\n * add an EnvironmentType input parameter, which accepts either prod or test as inputs. For the\n * production environment, you might include Amazon EC2 instances with certain capabilities;\n * however, for the test environment, you want to use less capabilities to save costs. With\n * conditions, you can define which resources are created and how they're configured for each\n * environment type.\n */\nclass FnCondition extends Fn {\n}\nexports.FnCondition = FnCondition;\n/**\n * Returns true if all the specified conditions evaluate to true, or returns false if any one\n *  of the conditions evaluates to false. Fn::And acts as an AND operator. The minimum number of\n * conditions that you can include is 2, and the maximum is 10.\n */\nclass FnAnd extends FnCondition {\n    constructor(...condition) {\n        super('Fn::And', condition);\n    }\n}\nexports.FnAnd = FnAnd;\n/**\n * Compares if two values are equal. Returns true if the two values are equal or false\n * if they aren't.\n */\nclass FnEquals extends FnCondition {\n    /**\n     * Creates an Fn::Equals condition function.\n     * @param lhs A value of any type that you want to compare.\n     * @param rhs A value of any type that you want to compare.\n     */\n    constructor(lhs, rhs) {\n        super('Fn::Equals', [lhs, rhs]);\n    }\n}\nexports.FnEquals = FnEquals;\n/**\n * Returns one value if the specified condition evaluates to true and another value if the\n * specified condition evaluates to false. Currently, AWS CloudFormation supports the Fn::If\n * intrinsic function in the metadata attribute, update policy attribute, and property values\n * in the Resources section and Outputs sections of a template. You can use the AWS::NoValue\n * pseudo parameter as a return value to remove the corresponding property.\n */\nclass FnIf extends FnCondition {\n    /**\n     * Creates an Fn::If condition function.\n     * @param condition A reference to a condition in the Conditions section. Use the condition's name to reference it.\n     * @param valueIfTrue A value to be returned if the specified condition evaluates to true.\n     * @param valueIfFalse A value to be returned if the specified condition evaluates to false.\n     */\n    constructor(condition, valueIfTrue, valueIfFalse) {\n        super('Fn::If', [condition, valueIfTrue, valueIfFalse]);\n    }\n}\nexports.FnIf = FnIf;\n/**\n * Returns true for a condition that evaluates to false or returns false for a condition that evaluates to true.\n * Fn::Not acts as a NOT operator.\n */\nclass FnNot extends FnCondition {\n    /**\n     * Creates an Fn::Not condition function.\n     * @param condition A condition such as Fn::Equals that evaluates to true or false.\n     */\n    constructor(condition) {\n        super('Fn::Not', [condition]);\n    }\n}\nexports.FnNot = FnNot;\n/**\n * Returns true if any one of the specified conditions evaluate to true, or returns false if\n * all of the conditions evaluates to false. Fn::Or acts as an OR operator. The minimum number\n * of conditions that you can include is 2, and the maximum is 10.\n */\nclass FnOr extends FnCondition {\n    /**\n     * Creates an Fn::Or condition function.\n     * @param condition A condition that evaluates to true or false.\n     */\n    constructor(...condition) {\n        super('Fn::Or', condition);\n    }\n}\nexports.FnOr = FnOr;\n/**\n * Returns true if a specified string matches at least one value in a list of strings.\n */\nclass FnContains extends FnCondition {\n    /**\n     * Creates an Fn::Contains function.\n     * @param listOfStrings A list of strings, such as \"A\", \"B\", \"C\".\n     * @param value A string, such as \"A\", that you want to compare against a list of strings.\n     */\n    constructor(listOfStrings, value) {\n        super('Fn::Contains', [listOfStrings, value]);\n    }\n}\nexports.FnContains = FnContains;\n/**\n * Returns true if a specified string matches all values in a list.\n */\nclass FnEachMemberEquals extends FnCondition {\n    /**\n     * Creates an Fn::EachMemberEquals function.\n     * @param listOfStrings A list of strings, such as \"A\", \"B\", \"C\".\n     * @param value A string, such as \"A\", that you want to compare against a list of strings.\n     */\n    constructor(listOfStrings, value) {\n        super('Fn::EachMemberEquals', [listOfStrings, value]);\n    }\n}\nexports.FnEachMemberEquals = FnEachMemberEquals;\n/**\n * Returns true if each member in a list of strings matches at least one value in a second\n * list of strings.\n */\nclass FnEachMemberIn extends FnCondition {\n    /**\n     * Creates an Fn::EachMemberIn function.\n     * @param stringsToCheck A list of strings, such as \"A\", \"B\", \"C\". AWS CloudFormation checks whether each member in the strings_to_check parameter is in the strings_to_match parameter.\n     * @param stringsToMatch A list of strings, such as \"A\", \"B\", \"C\". Each member in the strings_to_match parameter is compared against the members of the strings_to_check parameter.\n     */\n    constructor(stringsToCheck, stringsToMatch) {\n        super('Fn::EachMemberIn', [[stringsToCheck], stringsToMatch]);\n    }\n}\nexports.FnEachMemberIn = FnEachMemberIn;\n/**\n * Returns all values for a specified parameter type.\n */\nclass FnRefAll extends FnCondition {\n    /**\n     * Creates an Fn::RefAll function.\n     * @param parameterType An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or\n     *                      AWS::EC2::VPC::Id. For more information, see Parameters in the AWS\n     *                      CloudFormation User Guide.\n     */\n    constructor(parameterType) {\n        super('Fn::RefAll', parameterType);\n    }\n}\nexports.FnRefAll = FnRefAll;\n/**\n * Returns an attribute value or list of values for a specific parameter and attribute.\n */\nclass FnValueOf extends FnCondition {\n    /**\n     * Creates an Fn::ValueOf function.\n     * @param parameterOrLogicalId The name of a parameter for which you want to retrieve attribute values. The parameter must be declared in the Parameters section of the template.\n     * @param attribute The name of an attribute from which you want to retrieve a value.\n     */\n    constructor(parameterOrLogicalId, attribute) {\n        super('Fn::ValueOf', [parameterOrLogicalId, attribute]);\n    }\n}\nexports.FnValueOf = FnValueOf;\n/**\n * Returns a list of all attribute values for a given parameter type and attribute.\n */\nclass FnValueOfAll extends FnCondition {\n    /**\n     * Creates an Fn::ValueOfAll function.\n     * @param parameterType An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide.\n     * @param attribute The name of an attribute from which you want to retrieve a value. For more information about attributes, see Supported Attributes.\n     */\n    constructor(parameterType, attribute) {\n        super('Fn::ValueOfAll', [parameterType, attribute]);\n    }\n}\nexports.FnValueOfAll = FnValueOfAll;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(2));\n__export(__webpack_require__(1));\n__export(__webpack_require__(11));\n__export(__webpack_require__(12));\n__export(__webpack_require__(3));\n__export(__webpack_require__(14));\n__export(__webpack_require__(6));\n__export(__webpack_require__(15));\n__export(__webpack_require__(16));\n__export(__webpack_require__(7));\n__export(__webpack_require__(17));\n__export(__webpack_require__(8));\n__export(__webpack_require__(18));\n__export(__webpack_require__(10));\n__export(__webpack_require__(19));\n__export(__webpack_require__(0));\n__export(__webpack_require__(20));\n__export(__webpack_require__(21));\n__export(__webpack_require__(22));\n__export(__webpack_require__(23));\n__export(__webpack_require__(26));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$_aws_cdk_cx_api$;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// tslint:disable-next-line:no-var-requires\nconst md5 = __webpack_require__(13);\nconst PATH_SEP = '/';\nconst HASH_LEN = 8;\nconst MAX_HUMAN_LEN = 240; // max ID len is 255\n/**\n * Renders a hashed ID for a resource.\n *\n * In order to make sure logical IDs are unique and stable, we hash the resource\n * construct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as\n * a suffix to the path components joined without a separator (CloudFormation\n * IDs only allow alphanumeric characters).\n *\n * The result will be:\n *\n *     <path.join('')><md5(path.join('/')>\n *         \"human\"          \"hash\"\n *\n * If the \"human\" part of the ID exceeds 240 characters, we simply trim it so\n * the total ID doesn't exceed CloudFormation's 255 character limit.\n *\n * We only take 8 characters from the md5 hash (0.000005 chance of collision).\n *\n * Special cases:\n *\n * - If the path only contains a single component (i.e. it's a top-level\n *   resource), we won't add the hash to it. The hash is not needed for\n *   disamiguation and also, it allows for a more straightforward migration an\n *   existing CloudFormation template to a CDK stack without logical ID changes\n *   (or renames).\n * - For aesthetic reasons, if the last components of the path are the same\n *   (i.e. `L1/L2/Pipeline/Pipeline`), they will be de-duplicated to make the\n *   resulting human portion of the ID more pleasing: `L1L2Pipeline<HASH>`\n *   instead of `L1L2PipelinePipeline<HASH>`\n * - If a component is named \"Resource\" it will be omitted from the path. This\n *   allows L2 construct to use this convention to \"hide\" the wrapped L1 from\n *   the logical ID.\n */\nclass HashedAddressingScheme {\n    allocateAddress(addressComponents) {\n        if (addressComponents.length === 0) {\n            throw new Error('Construct has empty Logical ID');\n        }\n        // top-level resources will simply use the `name` as-is in order to support\n        // transparent migration of cloudformation templates to the CDK without the\n        // need to rename all resources.\n        if (addressComponents.length === 1) {\n            return addressComponents[0];\n        }\n        const hash = pathHash(addressComponents);\n        const human = removeDupes(addressComponents)\n            .filter(x => x !== 'Resource')\n            .join('')\n            .slice(0, MAX_HUMAN_LEN);\n        return human + hash;\n    }\n}\nexports.HashedAddressingScheme = HashedAddressingScheme;\n/**\n * Class that keeps track of the logical IDs that are assigned to resources\n *\n * Supports renaming the generated IDs.\n */\nclass LogicalIDs {\n    constructor(namingScheme) {\n        this.namingScheme = namingScheme;\n        /**\n         * The rename table (old to new)\n         */\n        this.renames = {};\n        /**\n         * All assigned names (new to old, may be identical)\n         *\n         * This is used to ensure that:\n         *\n         * - No 2 resources end up with the same final logical ID, unless they were the same to begin with.\n         * - All renames have been used at the end of renaming.\n         */\n        this.reverse = {};\n    }\n    /**\n     * Rename a logical ID from an old ID to a new ID\n     */\n    renameLogical(oldId, newId) {\n        if (oldId in this.renames) {\n            throw new Error(`A rename has already been registered for '${oldId}'`);\n        }\n        this.renames[oldId] = newId;\n    }\n    /**\n     * Return the logical ID for the given stack element\n     */\n    getLogicalId(stackElement) {\n        const path = stackElement.stackPath.split(PATH_SEP);\n        const generatedId = this.namingScheme.allocateAddress(path);\n        const finalId = this.applyRename(generatedId);\n        validateLogicalId(finalId);\n        return finalId;\n    }\n    /**\n     * Throw an error if not all renames have been used\n     *\n     * This is to assure that users didn't make typoes when registering renames.\n     */\n    assertAllRenamesApplied() {\n        const keys = new Set();\n        Object.keys(this.renames).forEach(keys.add.bind(keys));\n        Object.keys(this.reverse).map(newId => {\n            keys.delete(this.reverse[newId]);\n        });\n        if (keys.size !== 0) {\n            const unusedRenames = Array.from(keys.values());\n            throw new Error(`The following Logical IDs were attempted to be renamed, but not found: ${unusedRenames.join(', ')}`);\n        }\n    }\n    /**\n     * Return the renamed version of an ID, if applicable\n     */\n    applyRename(oldId) {\n        let newId = oldId;\n        if (oldId in this.renames) {\n            newId = this.renames[oldId];\n        }\n        // If this newId has already been used, it must have been with the same oldId\n        if (newId in this.reverse && this.reverse[newId] !== oldId) {\n            // tslint:disable-next-line:max-line-length\n            throw new Error(`Two objects have been assigned the same Logical ID: '${this.reverse[newId]}' and '${oldId}' are now both named '${newId}'.`);\n        }\n        this.reverse[newId] = oldId;\n        return newId;\n    }\n}\nexports.LogicalIDs = LogicalIDs;\n/**\n * Take a hash of the given path.\n *\n * The hash is limited in size.\n */\nfunction pathHash(path) {\n    return md5(path.join(PATH_SEP)).slice(0, HASH_LEN).toUpperCase();\n}\nconst VALID_LOGICALID_REGEX = /^[A-Za-z][A-Za-z0-9]{1,254}$/;\n/**\n * Validate logical ID is valid for CloudFormation\n */\nfunction validateLogicalId(logicalId) {\n    if (!VALID_LOGICALID_REGEX.test(logicalId)) {\n        throw new Error(`Logical ID must adhere to the regular expression: ${VALID_LOGICALID_REGEX.toString()}, got '${logicalId}'`);\n    }\n}\n/**\n * Remove duplicate \"terms\" from the path list\n *\n * If a component name is completely the same as the suffix of\n * the previous component name, we get rid of it.\n */\nfunction removeDupes(path) {\n    const ret = new Array();\n    for (const component of path) {\n        if (ret.length === 0 || !ret[ret.length - 1].endsWith(component)) {\n            ret.push(component);\n        }\n    }\n    return ret;\n}\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stack_1 = __webpack_require__(0);\n/**\n * Use the optional Parameters section to customize your templates.\n * Parameters enable you to input custom values to your template each time you create or\n * update a stack.\n */\nclass Parameter extends stack_1.Referenceable {\n    /**\n     * Creates a parameter construct.\n     * Note that the name (logical ID) of the parameter will derive from it's `coname` and location\n     * within the stack. Therefore, it is recommended that parameters are defined at the stack level.\n     *\n     * @param parent The parent construct.\n     * @param props The parameter properties.\n     */\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.properties = props;\n        this.value = this.ref;\n    }\n    toCloudFormation() {\n        return {\n            Parameters: {\n                [this.logicalId]: {\n                    Type: this.properties.type,\n                    Default: this.properties.default,\n                    AllowedPattern: this.properties.allowedPattern,\n                    AllowedValues: this.properties.allowedValues,\n                    ConstraintDescription: this.properties.constraintDescription,\n                    Description: this.properties.description,\n                    MaxLength: this.properties.maxLength,\n                    MaxValue: this.properties.maxValue,\n                    MinLength: this.properties.minLength,\n                    MinValue: this.properties.minValue,\n                    NoEcho: this.properties.noEcho\n                }\n            }\n        };\n    }\n    /**\n     * Allows using parameters as tokens without the need to dereference them.\n     * This implicitly implements Token, until we make it an interface.\n     */\n    resolve() {\n        return this.value;\n    }\n}\nexports.Parameter = Parameter;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tokens_1 = __webpack_require__(1);\nclass PseudoParameter extends tokens_1.Token {\n    constructor(name) {\n        super(() => ({ Ref: name }));\n    }\n}\nexports.PseudoParameter = PseudoParameter;\nclass AwsAccountId extends PseudoParameter {\n    constructor() {\n        super('AWS::AccountId');\n    }\n}\nexports.AwsAccountId = AwsAccountId;\nclass AwsDomainSuffix extends PseudoParameter {\n    constructor() {\n        super('AWS::DomainSuffix');\n    }\n}\nexports.AwsDomainSuffix = AwsDomainSuffix;\nclass AwsNotificationARNs extends PseudoParameter {\n    constructor() {\n        super('AWS::NotificationARNs');\n    }\n}\nexports.AwsNotificationARNs = AwsNotificationARNs;\nclass AwsNoValue extends PseudoParameter {\n    constructor() {\n        super('AWS::NoValue');\n    }\n}\nexports.AwsNoValue = AwsNoValue;\nclass AwsPartition extends PseudoParameter {\n    constructor() {\n        super('AWS::Partition');\n    }\n}\nexports.AwsPartition = AwsPartition;\nclass AwsRegion extends PseudoParameter {\n    constructor() {\n        super('AWS::Region');\n    }\n}\nexports.AwsRegion = AwsRegion;\nclass AwsStackId extends PseudoParameter {\n    constructor() {\n        super('AWS::StackId');\n    }\n}\nexports.AwsStackId = AwsStackId;\nclass AwsStackName extends PseudoParameter {\n    constructor() {\n        super('AWS::StackName');\n    }\n}\nexports.AwsStackName = AwsStackName;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tokens_1 = __webpack_require__(1);\n/**\n * Given an object, converts all keys to PascalCase given they are currently in camel case.\n * @param obj The object.\n */\nfunction capitalizePropertyNames(obj) {\n    obj = tokens_1.resolve(obj);\n    if (typeof (obj) !== 'object') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(x => capitalizePropertyNames(x));\n    }\n    const newObj = {};\n    for (const key of Object.keys(obj)) {\n        const value = obj[key];\n        const first = key.charAt(0).toUpperCase();\n        const newKey = first + key.slice(1);\n        newObj[newKey] = capitalizePropertyNames(value);\n    }\n    return newObj;\n}\nexports.capitalizePropertyNames = capitalizePropertyNames;\n/**\n * Turns empty arrays/objects to undefined (after evaluating tokens).\n */\nfunction ignoreEmpty(o) {\n    o = tokens_1.resolve(o); // first resolve tokens, in case they evaluate to 'undefined'.\n    // undefined/null\n    if (o == null) {\n        return o;\n    }\n    if (Array.isArray(o) && o.length === 0) {\n        return undefined;\n    }\n    if (typeof (o) === 'object' && Object.keys(o).length === 0) {\n        return undefined;\n    }\n    return o;\n}\nexports.ignoreEmpty = ignoreEmpty;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\n * You specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\n * attribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\n * that lead to resources being removed.\n */\nvar DeletionPolicy;\n(function (DeletionPolicy) {\n    /**\n     * AWS CloudFormation deletes the resource and all its content if applicable during stack deletion. You can add this\n     * deletion policy to any resource type. By default, if you don't specify a DeletionPolicy, AWS CloudFormation deletes\n     * your resources. However, be aware of the following considerations:\n     */\n    DeletionPolicy[\"Delete\"] = \"Delete\";\n    /**\n     * AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted.\n     * You can add this deletion policy to any resource type. Note that when AWS CloudFormation completes the stack deletion,\n     * the stack will be in Delete_Complete state; however, resources that are retained continue to exist and continue to incur\n     * applicable charges until you delete those resources.\n     */\n    DeletionPolicy[\"Retain\"] = \"Retain\";\n    /**\n     * For resources that support snapshots (AWS::EC2::Volume, AWS::ElastiCache::CacheCluster, AWS::ElastiCache::ReplicationGroup,\n     * AWS::RDS::DBInstance, AWS::RDS::DBCluster, and AWS::Redshift::Cluster), AWS CloudFormation creates a snapshot for the\n     * resource before deleting it. Note that when AWS CloudFormation completes the stack deletion, the stack will be in the\n     * Delete_Complete state; however, the snapshots that are created with this policy continue to exist and continue to\n     * incur applicable charges until you delete those snapshots.\n     */\n    DeletionPolicy[\"Snapshot\"] = \"Snapshot\";\n})(DeletionPolicy = exports.DeletionPolicy || (exports.DeletionPolicy = {}));\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst construct_1 = __webpack_require__(2);\nvar jsx;\n(function (jsx) {\n    /**\n     * The JSX factory function. This is what TypeScript converts a JSX statement to.\n     *\n     * For example:\n     *      <Foo p1='a' p2={2}/>\n     * will produce this code:\n     *      jsx.create(Foo, { p1: 'a', p2: 2 }, []);\n     *\n     * This function will not actually create any objects, but rather just return a tree of\n     * element information for later consumption by jsx.construct(tree), which can be used\n     * to materialize an actual construct tree from.\n     *\n     * @param type The class\n     * @param props Property hash\n     * @param children Array of children\n     * @returns element tree\n     */\n    function create(type, props, ...children) {\n        if (!(type.prototype instanceof construct_1.Construct)) {\n            throw new Error('All nodes must derive from Construct: ' + type);\n        }\n        return {\n            type, props, children\n        };\n    }\n    jsx.create = create;\n    /**\n     * Converts a JSX tree to a construct tree.\n     * Creates all construct objects and associate them together as children.\n     * @param tree The JSX tree\n     * @param parent Optional parent for the construct tree\n     * @returns A Construct object\n     */\n    function construct(tree, parent) {\n        const name = (tree.props && tree.props.name) || '';\n        const root = new tree.type(parent, name, tree.props); // create root\n        createChildren(root, tree.children);\n        return root;\n    }\n    jsx.construct = construct;\n    function createChildren(parent, children) {\n        for (const child of children) {\n            const name = (child.props && child.props.name) || '';\n            const childObj = new child.type(parent, name, child.props);\n            createChildren(childObj, child.children);\n        }\n    }\n})(jsx = exports.jsx || (exports.jsx = {}));\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stack_1 = __webpack_require__(0);\n/**\n * Represents a CloudFormation condition, for resources which must be conditionally created and\n * the determination must be made at deploy time.\n */\nclass Condition extends stack_1.Referenceable {\n    /**\n     * Build a new condition. The condition must be constructed with a condition token,\n     * that the condition is based on.\n     */\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.expression = props && props.expression;\n    }\n    toCloudFormation() {\n        return {\n            Conditions: {\n                [this.logicalId]: this.expression\n            }\n        };\n    }\n}\nexports.Condition = Condition;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/* global define */\n\n;(function ($) {\n  'use strict'\n\n  /*\n  * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n  * to work around bugs in some JS interpreters.\n  */\n  function safeAdd (x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff)\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n    return (msw << 16) | (lsw & 0xffff)\n  }\n\n  /*\n  * Bitwise rotate a 32-bit number to the left.\n  */\n  function bitRotateLeft (num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt))\n  }\n\n  /*\n  * These functions implement the four basic operations the algorithm uses.\n  */\n  function md5cmn (q, a, b, x, s, t) {\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)\n  }\n  function md5ff (a, b, c, d, x, s, t) {\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t)\n  }\n  function md5gg (a, b, c, d, x, s, t) {\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t)\n  }\n  function md5hh (a, b, c, d, x, s, t) {\n    return md5cmn(b ^ c ^ d, a, b, x, s, t)\n  }\n  function md5ii (a, b, c, d, x, s, t) {\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t)\n  }\n\n  /*\n  * Calculate the MD5 of an array of little-endian words, and a bit length.\n  */\n  function binlMD5 (x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (len % 32)\n    x[((len + 64) >>> 9 << 4) + 14] = len\n\n    var i\n    var olda\n    var oldb\n    var oldc\n    var oldd\n    var a = 1732584193\n    var b = -271733879\n    var c = -1732584194\n    var d = 271733878\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a\n      oldb = b\n      oldc = c\n      oldd = d\n\n      a = md5ff(a, b, c, d, x[i], 7, -680876936)\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063)\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)\n\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)\n      b = md5gg(b, c, d, a, x[i], 20, -373897302)\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)\n\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558)\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)\n      d = md5hh(d, a, b, c, x[i], 11, -358537222)\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)\n\n      a = md5ii(a, b, c, d, x[i], 6, -198630844)\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)\n\n      a = safeAdd(a, olda)\n      b = safeAdd(b, oldb)\n      c = safeAdd(c, oldc)\n      d = safeAdd(d, oldd)\n    }\n    return [a, b, c, d]\n  }\n\n  /*\n  * Convert an array of little-endian words to a string\n  */\n  function binl2rstr (input) {\n    var i\n    var output = ''\n    var length32 = input.length * 32\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff)\n    }\n    return output\n  }\n\n  /*\n  * Convert a raw string to an array of little-endian words\n  * Characters >255 have their high-byte silently ignored.\n  */\n  function rstr2binl (input) {\n    var i\n    var output = []\n    output[(input.length >> 2) - 1] = undefined\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0\n    }\n    var length8 = input.length * 8\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32)\n    }\n    return output\n  }\n\n  /*\n  * Calculate the MD5 of a raw string\n  */\n  function rstrMD5 (s) {\n    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))\n  }\n\n  /*\n  * Calculate the HMAC-MD5, of a key and some data (raw strings)\n  */\n  function rstrHMACMD5 (key, data) {\n    var i\n    var bkey = rstr2binl(key)\n    var ipad = []\n    var opad = []\n    var hash\n    ipad[15] = opad[15] = undefined\n    if (bkey.length > 16) {\n      bkey = binlMD5(bkey, key.length * 8)\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636\n      opad[i] = bkey[i] ^ 0x5c5c5c5c\n    }\n    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\n    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))\n  }\n\n  /*\n  * Convert a raw string to a hex string\n  */\n  function rstr2hex (input) {\n    var hexTab = '0123456789abcdef'\n    var output = ''\n    var x\n    var i\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i)\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f)\n    }\n    return output\n  }\n\n  /*\n  * Encode a string as utf-8\n  */\n  function str2rstrUTF8 (input) {\n    return unescape(encodeURIComponent(input))\n  }\n\n  /*\n  * Take string arguments and return either raw or hex encoded strings\n  */\n  function rawMD5 (s) {\n    return rstrMD5(str2rstrUTF8(s))\n  }\n  function hexMD5 (s) {\n    return rstr2hex(rawMD5(s))\n  }\n  function rawHMACMD5 (k, d) {\n    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))\n  }\n  function hexHMACMD5 (k, d) {\n    return rstr2hex(rawHMACMD5(k, d))\n  }\n\n  function md5 (string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return hexMD5(string)\n      }\n      return rawMD5(string)\n    }\n    if (!raw) {\n      return hexHMACMD5(key, string)\n    }\n    return rawHMACMD5(key, string)\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return md5\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = md5\n  } else {\n    $.md5 = md5\n  }\n})(this)\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stack_1 = __webpack_require__(0);\n/**\n * Includes a CloudFormation template into a stack. All elements of the template will be merged into\n * the current stack, together with any elements created programmatically.\n */\nclass Include extends stack_1.StackElement {\n    /**\n     * Creates an adopted template construct. The template will be incorporated into the stack as-is with no changes at all.\n     * This means that logical IDs of entities within this template may conflict with logical IDs of entities that are part of the\n     * stack.\n     * @param parent The parent construct of this template\n     * @param id The ID of this construct\n     * @param template The template to adopt.\n     */\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.template = props.template;\n    }\n    toCloudFormation() {\n        return this.template;\n    }\n}\nexports.Include = Include;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fn_1 = __webpack_require__(3);\nconst stack_1 = __webpack_require__(0);\n/**\n * Represents a CloudFormation mapping.\n */\nclass Mapping extends stack_1.Referenceable {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.mapping = {};\n        this.mapping = props.mapping || {};\n    }\n    /**\n     * Sets a value in the map based on the two keys.\n     */\n    setValue(key1, key2, value) {\n        if (!(key1 in this.mapping)) {\n            this.mapping[key1] = {};\n        }\n        this.mapping[key1][key2] = value;\n    }\n    /**\n     * @returns A reference to a value in the map based on the two keys.\n     */\n    findInMap(key1, key2) {\n        if (!(key1 in this.mapping)) {\n            throw new Error(`Mapping doesn't contain top-level key '${key1}'`);\n        }\n        if (!(key2 in this.mapping[key1])) {\n            throw new Error(`Mapping doesn't contain second-level key '${key2}'`);\n        }\n        return new fn_1.FnFindInMap(this.logicalId, key1, key2);\n    }\n    toCloudFormation() {\n        return {\n            Mappings: {\n                [this.logicalId]: this.mapping\n            }\n        };\n    }\n}\nexports.Mapping = Mapping;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst construct_1 = __webpack_require__(2);\nconst fn_1 = __webpack_require__(3);\nconst stack_1 = __webpack_require__(0);\nclass Output extends stack_1.StackElement {\n    /**\n     * Creates an Output value for this stack.\n     * @param parent The parent construct.\n     * @param props Output properties.\n     */\n    constructor(parent, name, props = {}) {\n        super(parent, name);\n        this.description = props.description;\n        this.value = props.value;\n        this.condition = props.condition;\n        if (props.export) {\n            if (props.disableExport) {\n                throw new Error('Cannot set `disableExport` and specify an export name');\n            }\n            this.export = props.export;\n        }\n        else if (!props.disableExport) {\n            // prefix export name with stack name since exports are global within account + region.\n            const stackName = stack_1.Stack.find(this).name;\n            this.export = stackName ? stackName + ':' : '';\n            this.export += this.logicalId;\n        }\n    }\n    /**\n     * Returns an FnImportValue bound to this export name.\n     */\n    makeImportValue() {\n        if (!this.export) {\n            throw new Error('Cannot create an ImportValue without an export name');\n        }\n        return new fn_1.FnImportValue(this.export);\n    }\n    toCloudFormation() {\n        return {\n            Outputs: {\n                [this.logicalId]: {\n                    Description: this.description,\n                    Value: this.value,\n                    Export: this.export != null ? { Name: this.export } : undefined,\n                    Condition: this.condition ? this.condition.logicalId : undefined\n                }\n            }\n        };\n    }\n    get ref() {\n        throw new Error('Outputs cannot be referenced');\n    }\n}\nexports.Output = Output;\n/**\n * An output for a list of strings.\n *\n * Exports a list of Tokens via an Output variable, and return a list of Tokens\n * that selects the imported values for them.\n */\nclass StringListOutput extends construct_1.Construct {\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.separator = props.separator || ',';\n        this.length = props.values.length;\n        this.output = new Output(this, 'Resource', {\n            description: props.description,\n            condition: props.condition,\n            disableExport: props.disableExport,\n            export: props.export,\n            value: new fn_1.FnJoin(this.separator, ...props.values)\n        });\n    }\n    /**\n     * Return an array of imported values for this Output\n     */\n    makeImportValues() {\n        const combined = this.output.makeImportValue();\n        const ret = [];\n        for (let i = 0; i < this.length; i++) {\n            ret.push(new fn_1.FnSelect(i, new fn_1.FnSplit(this.separator, combined)));\n        }\n        return ret;\n    }\n}\nexports.StringListOutput = StringListOutput;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tokens_1 = __webpack_require__(1);\nconst fn_1 = __webpack_require__(3);\nconst pseudo_1 = __webpack_require__(8);\nclass PolicyDocument extends tokens_1.Token {\n    /**\n     * Creates a new IAM policy document.\n     * @param defaultDocument An IAM policy document to use as an initial\n     * policy. All statements of this document will be copied in.\n     */\n    constructor(baseDocument) {\n        super();\n        this.baseDocument = baseDocument;\n        this.statements = new Array();\n    }\n    resolve() {\n        if (this.isEmpty) {\n            return undefined;\n        }\n        const doc = this.baseDocument || {};\n        doc.Statement = doc.Statement || [];\n        doc.Version = doc.Version || '2012-10-17';\n        doc.Statement = doc.Statement.concat(this.statements);\n        return doc;\n    }\n    get isEmpty() {\n        return this.statements.length === 0;\n    }\n    /**\n     * The number of statements already added to this policy.\n     * Can be used, for example, to generate uniuqe \"sid\"s within the policy.\n     */\n    get statementCount() {\n        return this.statements.length;\n    }\n    addStatement(statement) {\n        this.statements.push(statement);\n        return this;\n    }\n}\nexports.PolicyDocument = PolicyDocument;\n/**\n * Represents an IAM principal.\n */\nclass PolicyPrincipal {\n    constructor() {\n        /**\n         * When this Principal is used in an AssumeRole policy, the action to use.\n         */\n        this.assumeRoleAction = 'sts:AssumeRole';\n    }\n}\nexports.PolicyPrincipal = PolicyPrincipal;\n/**\n * A collection of the fields in a PolicyStatement that can be used to identify a principal.\n *\n * This consists of the JSON used in the \"Principal\" field, and optionally a\n * set of \"Condition\"s that need to be applied to the policy.\n */\nclass PrincipalPolicyFragment {\n    constructor(principalJson, conditions = {}) {\n        this.principalJson = principalJson;\n        this.conditions = conditions;\n    }\n}\nexports.PrincipalPolicyFragment = PrincipalPolicyFragment;\nclass ArnPrincipal extends PolicyPrincipal {\n    constructor(arn) {\n        super();\n        this.arn = arn;\n    }\n    policyFragment() {\n        return new PrincipalPolicyFragment({ AWS: this.arn });\n    }\n}\nexports.ArnPrincipal = ArnPrincipal;\nclass AccountPrincipal extends ArnPrincipal {\n    constructor(accountId) {\n        super(new fn_1.FnConcat('arn:', new pseudo_1.AwsPartition(), ':iam::', accountId, ':root'));\n        this.accountId = accountId;\n    }\n}\nexports.AccountPrincipal = AccountPrincipal;\n/**\n * An IAM principal that represents an AWS service (i.e. sqs.amazonaws.com).\n */\nclass ServicePrincipal extends PolicyPrincipal {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    policyFragment() {\n        return new PrincipalPolicyFragment({ Service: this.service });\n    }\n}\nexports.ServicePrincipal = ServicePrincipal;\n/**\n * A policy prinicipal for canonicalUserIds - useful for S3 bucket policies that use\n * Origin Access identities.\n *\n * See https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html\n *\n * and\n *\n * https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html\n *\n * for more details.\n *\n */\nclass CanonicalUserPrincipal extends PolicyPrincipal {\n    constructor(canonicalUserId) {\n        super();\n        this.canonicalUserId = canonicalUserId;\n    }\n    policyFragment() {\n        return new PrincipalPolicyFragment({ CanonicalUser: this.canonicalUserId });\n    }\n}\nexports.CanonicalUserPrincipal = CanonicalUserPrincipal;\nclass FederatedPrincipal extends PolicyPrincipal {\n    constructor(federated, conditions, assumeRoleAction = 'sts:AssumeRole') {\n        super();\n        this.federated = federated;\n        this.conditions = conditions;\n        this.assumeRoleAction = assumeRoleAction;\n    }\n    policyFragment() {\n        return new PrincipalPolicyFragment({ Federated: this.federated }, this.conditions);\n    }\n}\nexports.FederatedPrincipal = FederatedPrincipal;\nclass AccountRootPrincipal extends AccountPrincipal {\n    constructor() {\n        super(new pseudo_1.AwsAccountId());\n    }\n}\nexports.AccountRootPrincipal = AccountRootPrincipal;\n/**\n * A principal representing all identities in all accounts\n */\nclass Anyone extends PolicyPrincipal {\n    constructor() {\n        super(...arguments);\n        /**\n         * Interface compatibility with AccountPrincipal for the purposes of the Lambda library\n         *\n         * The Lambda's addPermission() call works differently from regular\n         * statements, and will use the value of this property directly if present\n         * (which leads to the correct statement ultimately).\n         */\n        this.accountId = '*';\n    }\n    policyFragment() {\n        return new PrincipalPolicyFragment('*');\n    }\n}\nexports.Anyone = Anyone;\n/**\n * Represents a statement in an IAM policy document.\n */\nclass PolicyStatement extends tokens_1.Token {\n    constructor(effect = PolicyStatement.Effect.Allow) {\n        super();\n        this.action = new Array();\n        this.principal = new Array();\n        this.resource = new Array();\n        this.condition = {};\n        this.effect = effect;\n    }\n    //\n    // Actions\n    //\n    addAction(action) {\n        this.action.push(action);\n        return this;\n    }\n    addActions(...actions) {\n        actions.forEach(action => this.addAction(action));\n        return this;\n    }\n    //\n    // Principal\n    //\n    /**\n     * Indicates if this permission has a \"Principal\" section.\n     */\n    get hasPrincipal() {\n        return this.principal && this.principal.length > 0;\n    }\n    addPrincipal(principal) {\n        const fragment = principal.policyFragment();\n        this.principal.push(fragment.principalJson);\n        this.addConditions(fragment.conditions);\n        return this;\n    }\n    addAwsPrincipal(arn) {\n        return this.addPrincipal(new ArnPrincipal(arn));\n    }\n    addAwsAccountPrincipal(accountId) {\n        return this.addPrincipal(new AccountPrincipal(accountId));\n    }\n    addServicePrincipal(service) {\n        return this.addPrincipal(new ServicePrincipal(service));\n    }\n    addFederatedPrincipal(federated, conditions) {\n        return this.addPrincipal(new FederatedPrincipal(federated, conditions));\n    }\n    addAccountRootPrincipal() {\n        return this.addPrincipal(new AccountRootPrincipal());\n    }\n    //\n    // Resources\n    //\n    addResource(resource) {\n        this.resource.push(resource);\n        return this;\n    }\n    /**\n     * Adds a ``\"*\"`` resource to this statement.\n     */\n    addAllResources() {\n        return this.addResource('*');\n    }\n    addResources(...resources) {\n        resources.forEach(r => this.addResource(r));\n        return this;\n    }\n    /**\n     * Indicates if this permission as at least one resource associated with it.\n     */\n    get hasResource() {\n        return this.resource && this.resource.length > 0;\n    }\n    /**\n     * Indicates if this permission has only a ``\"*\"`` resource associated with it.\n     */\n    get isOnlyStarResource() {\n        return this.resource && this.resource.length === 1 && this.resource[0] === '*';\n    }\n    describe(sid) {\n        this.sid = sid;\n        return this;\n    }\n    //\n    // Effect\n    //\n    /**\n     * Sets the permission effect to deny access to resources.\n     */\n    allow() {\n        this.effect = PolicyStatement.Effect.Allow;\n        return this;\n    }\n    /**\n     * Sets the permission effect to allow access to resources.\n     */\n    deny() {\n        this.effect = PolicyStatement.Effect.Deny;\n        return this;\n    }\n    //\n    // Condition\n    //\n    /**\n     * Add a condition to the Policy\n     */\n    addCondition(key, value) {\n        this.condition[key] = value;\n        return this;\n    }\n    /**\n     * Add multiple conditions to the Policy\n     */\n    addConditions(conditions) {\n        Object.keys(conditions).map(key => {\n            this.addCondition(key, conditions[key]);\n        });\n        return this;\n    }\n    /**\n     * Add a condition to the Policy.\n     *\n     * @deprecated For backwards compatibility. Use addCondition() instead.\n     */\n    setCondition(key, value) {\n        return this.addCondition(key, value);\n    }\n    limitToAccount(accountId) {\n        return this.addCondition('StringEquals', new tokens_1.Token(() => {\n            return { 'sts:ExternalId': accountId };\n        }));\n    }\n    //\n    // Serialization\n    //\n    resolve() {\n        return this.toJson();\n    }\n    toJson() {\n        return {\n            Action: _norm(this.action),\n            Condition: _norm(this.condition),\n            Effect: _norm(this.effect),\n            Principal: _norm(this.principal),\n            Resource: _norm(this.resource),\n            Sid: _norm(this.sid),\n        };\n        function _norm(values) {\n            if (typeof (values) === 'undefined') {\n                return undefined;\n            }\n            if (Array.isArray(values)) {\n                if (!values || values.length === 0) {\n                    return undefined;\n                }\n                if (values.length === 1) {\n                    return values[0];\n                }\n            }\n            if (typeof (values) === 'object') {\n                if (Object.keys(values).length === 0) {\n                    return undefined;\n                }\n            }\n            return values;\n        }\n    }\n}\nexports.PolicyStatement = PolicyStatement;\n(function (PolicyStatement) {\n    let Effect;\n    (function (Effect) {\n        Effect[\"Allow\"] = \"Allow\";\n        Effect[\"Deny\"] = \"Deny\";\n    })(Effect = PolicyStatement.Effect || (PolicyStatement.Effect = {}));\n})(PolicyStatement = exports.PolicyStatement || (exports.PolicyStatement = {}));\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tokens_1 = __webpack_require__(1);\nconst util_1 = __webpack_require__(9);\nconst stack_1 = __webpack_require__(0);\n/**\n * Represents a CloudFormation resource.\n */\nclass Resource extends stack_1.Referenceable {\n    /**\n     * Creates a resource construct.\n     * @param resourceType The CloudFormation type of this resource (e.g. AWS::DynamoDB::Table)\n     */\n    constructor(parent, name, props) {\n        super(parent, name);\n        /**\n         * Options for this resource, such as condition, update policy etc.\n         */\n        this.options = {};\n        this.dependsOn = new Array();\n        if (!props.type) {\n            throw new Error('The `type` property is required');\n        }\n        this.resourceType = props.type;\n        this.properties = props.properties || {};\n        // 'name' is a special property included for resource constructs and passed\n        // as 'name', but we don't want it to be serialized into the template.\n        if (this.properties.name) {\n            delete this.properties.name;\n        }\n    }\n    /**\n     * A decoration used to create a CloudFormation attribute property.\n     * @param customName Custom name for the attribute (default is the name of the property)\n     * NOTE: we return \"any\" here to satistfy jsii, which doesn't support lambdas.\n     */\n    static attribute(customName) {\n        return (prototype, key) => {\n            const name = customName || key;\n            Object.defineProperty(prototype, key, {\n                get() {\n                    return this.getAtt(name);\n                }\n            });\n        };\n    }\n    /**\n     * Returns a token for an runtime attribute of this resource.\n     * Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility\n     * in case there is no generated attribute.\n     * @param attributeName The name of the attribute.\n     */\n    getAtt(attributeName) {\n        return new tokens_1.Token(() => ({ 'Fn::GetAtt': [this.logicalId, attributeName] }));\n    }\n    /**\n     * Adds a dependency on another resource.\n     * @param other The other resource.\n     */\n    addDependency(...other) {\n        this.dependsOn.push(...other);\n    }\n    /**\n     * Emits CloudFormation for this resource.\n     */\n    toCloudFormation() {\n        try {\n            return {\n                Resources: {\n                    [this.logicalId]: {\n                        Type: this.resourceType,\n                        Properties: util_1.ignoreEmpty(this.renderProperties()),\n                        DependsOn: util_1.ignoreEmpty(this.renderDependsOn()),\n                        CreationPolicy: util_1.capitalizePropertyNames(this.options.creationPolicy),\n                        UpdatePolicy: util_1.capitalizePropertyNames(this.options.updatePolicy),\n                        DeletionPolicy: util_1.capitalizePropertyNames(this.options.deletionPolicy),\n                        Metadata: util_1.ignoreEmpty(this.options.metadata),\n                        Condition: this.options.condition && this.options.condition.logicalId\n                    }\n                }\n            };\n        }\n        catch (e) {\n            // Change message\n            e.message = `While synthesizing ${this.path}: ${e.message}`;\n            // Adjust stack trace (make it look like node built it, too...)\n            const creationStack = ['--- resource created at ---', ...this.creationStackTrace].join('\\n    at ');\n            const problemTrace = e.stack.substr(e.stack.indexOf(e.message) + e.message.length);\n            e.stack = `${e.message}\\n    ${creationStack}\\n    --- problem discovered at ---${problemTrace}`;\n            // Re-throw\n            throw e;\n        }\n    }\n    renderProperties() {\n        // FIXME: default implementation is not great, it should throw, but it avoids breaking all unit tests for now.\n        return this.properties;\n    }\n    renderDependsOn() {\n        const logicalIDs = new Set();\n        for (const d of this.dependsOn) {\n            addDependency(d);\n        }\n        return Array.from(logicalIDs);\n        function addDependency(d) {\n            d.dependencyElements.forEach(dep => {\n                const logicalId = dep.logicalId;\n                if (logicalId) {\n                    logicalIDs.add(logicalId);\n                }\n            });\n            // break if dependencyElements include only 'd', which means we reached a terminal.\n            if (d.dependencyElements.length === 1 && d.dependencyElements[0] === d) {\n                return;\n            }\n            else {\n                d.dependencyElements.forEach(dep => addDependency(dep));\n            }\n        }\n    }\n}\nexports.Resource = Resource;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = __webpack_require__(9);\nconst stack_1 = __webpack_require__(0);\n/**\n * The Rules that define template constraints in an AWS Service Catalog portfolio describe when\n * end users can use the template and which values they can specify for parameters that are declared\n * in the AWS CloudFormation template used to create the product they are attempting to use. Rules\n * are useful for preventing end users from inadvertently specifying an incorrect value.\n * For example, you can add a rule to verify whether end users specified a valid subnet in a\n * given VPC or used m1.small instance types for test environments. AWS CloudFormation uses\n * rules to validate parameter values before it creates the resources for the product.\n *\n * A rule can include a RuleCondition property and must include an Assertions property.\n * For each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\n * You define a rule condition and assertions by using rule-specific intrinsic functions.\n *\n * @link https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html\n */\nclass Rule extends stack_1.Referenceable {\n    /**\n     * Creates and adds a rule.\n     * @param parent The parent construct.\n     * @param props The rule props.\n     */\n    constructor(parent, name, props) {\n        super(parent, name);\n        this.ruleCondition = props && props.ruleCondition;\n        this.assertions = props && props.assertions;\n    }\n    /**\n     * Adds an assertion to the rule.\n     * @param condition The expression to evaluation.\n     * @param description The description of the assertion.\n     */\n    addAssertion(condition, description) {\n        if (!this.assertions) {\n            this.assertions = [];\n        }\n        this.assertions.push({\n            assert: condition,\n            assertDescription: description\n        });\n    }\n    toCloudFormation() {\n        return {\n            Rules: {\n                [this.logicalId]: {\n                    RuleCondition: this.ruleCondition,\n                    Assertions: util_1.capitalizePropertyNames(this.assertions)\n                }\n            }\n        };\n    }\n}\nexports.Rule = Rule;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst resource_policy_1 = __webpack_require__(10);\nvar RemovalPolicy;\n(function (RemovalPolicy) {\n    /**\n     * This is the default removal policy for most resources. It means that when the resource\n     * is removed from the app, it will be physically destroyed.\n     */\n    RemovalPolicy[RemovalPolicy[\"Destroy\"] = 0] = \"Destroy\";\n    /**\n     * This uses the 'Retain' DeletionPolicy, which will cause the resource to be retained\n     * in the account, but orphaned from the stack.\n     */\n    RemovalPolicy[RemovalPolicy[\"Orphan\"] = 1] = \"Orphan\";\n    /**\n     * This will apply the 'Retain' DeletionPolicy and also add metadata for the toolkit\n     * to apply a CloudFormation stack policy which forbids the deletion of resource.\n     */\n    RemovalPolicy[RemovalPolicy[\"Forbid\"] = 2] = \"Forbid\";\n})(RemovalPolicy = exports.RemovalPolicy || (exports.RemovalPolicy = {}));\nfunction applyRemovalPolicy(resource, removalPolicy) {\n    if (removalPolicy === RemovalPolicy.Orphan || removalPolicy === RemovalPolicy.Forbid) {\n        resource.options.deletionPolicy = resource_policy_1.DeletionPolicy.Retain;\n    }\n    // attach metadata that will tell the toolkit to protect this resource by\n    // applying an appropriate stack update policy.\n    if (removalPolicy === RemovalPolicy.Forbid) {\n        resource.addMetadata('aws:cdk:protected', true);\n    }\n}\nexports.applyRemovalPolicy = applyRemovalPolicy;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst __1 = __webpack_require__(4);\n/**\n * An Amazon Resource Name (ARN).\n * http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\n */\nclass Arn extends __1.Token {\n    /**\n     * Creates an ARN from components.\n     * If any component is the empty string,\n     * an empty string will be inserted into the generated ARN\n     * at the location that component corresponds to.\n     */\n    static fromComponents(components) {\n        const partition = components.partition == null\n            ? new __1.AwsPartition()\n            : components.partition;\n        const region = components.region == null\n            ? new __1.AwsRegion()\n            : components.region;\n        const account = components.account == null\n            ? new __1.AwsAccountId()\n            : components.account;\n        const values = ['arn', ':', partition, ':', components.service, ':', region, ':', account, ':', components.resource];\n        const sep = components.sep || '/';\n        if (sep !== '/' && sep !== ':') {\n            throw new Error('resourcePathSep may only be \":\" or \"/\"');\n        }\n        if (components.resourceName != null) {\n            values.push(sep);\n            values.push(components.resourceName);\n        }\n        return new Arn(new __1.FnConcat(...values));\n    }\n    /**\n     * Given an ARN, parses it and returns components.\n     *\n     * The ARN it will be parsed and validated. The separator (`sep`) will be\n     * set to '/' if the 6th component includes a '/', in which case, `resource`\n     * will be set to the value before the '/' and `resourceName` will be the\n     * rest. In case there is no '/', `resource` will be set to the 6th\n     * components and `resourceName` will be set to the rest of the string.\n     *\n     * @returns an ArnComponents object which allows access to the various\n     * components of the ARN.\n     */\n    static parse(arn) {\n        const components = arn.split(':');\n        if (components.length < 6) {\n            throw new Error('ARNs must have at least 6 components: ' + arn);\n        }\n        const [arnPrefix, partition, service, region, account, sixth, ...rest] = components;\n        if (arnPrefix !== 'arn') {\n            throw new Error('ARNs must start with \"arn:\": ' + arn);\n        }\n        if (!service) {\n            throw new Error('The `service` component (3rd component) is required: ' + arn);\n        }\n        if (!sixth) {\n            throw new Error('The `resource` component (6th component) is required: ' + arn);\n        }\n        let resource;\n        let resourceName;\n        let sep;\n        let sepIndex = sixth.indexOf('/');\n        if (sepIndex !== -1) {\n            sep = '/';\n        }\n        else if (rest.length > 0) {\n            sep = ':';\n            sepIndex = -1;\n        }\n        if (sepIndex !== -1) {\n            resource = sixth.substr(0, sepIndex);\n            resourceName = sixth.substr(sepIndex + 1);\n        }\n        else {\n            resource = sixth;\n        }\n        if (rest.length > 0) {\n            if (!resourceName) {\n                resourceName = '';\n            }\n            else {\n                resourceName += ':';\n            }\n            resourceName += rest.join(':');\n        }\n        const result = { service, resource };\n        if (partition) {\n            result.partition = partition;\n        }\n        if (region) {\n            result.region = region;\n        }\n        if (account) {\n            result.account = account;\n        }\n        if (resourceName) {\n            result.resourceName = resourceName;\n        }\n        if (sep) {\n            result.sep = sep;\n        }\n        return result;\n    }\n}\nexports.Arn = Arn;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst construct_1 = __webpack_require__(2);\nconst tokens_1 = __webpack_require__(1);\nconst parameter_1 = __webpack_require__(7);\n/**\n * A token that represents a value that's expected to be a secret, like\n * passwords and keys.\n *\n * It is recommended to use the `SecretParameter` construct in order to import\n * secret values from the SSM Parameter Store instead of storing them in your\n * code.\n *\n * However, you can also just pass in values, like any other token: `new Secret('bla')`\n */\nclass Secret extends tokens_1.Token {\n}\nexports.Secret = Secret;\n/**\n * Defines a secret value resolved from the Systems Manager (SSM) Parameter\n * Store during deployment. This is useful for referencing values that you do\n * not wish to include in your code base, such as secrets, passwords and keys.\n *\n * This construct will add a CloudFormation parameter to your template bound to\n * an SSM parameter (of type \"AWS::SSM::Parameter::Value<String>\"). Deployment\n * will fail if the value doesn't exist in the target environment.\n *\n * Important: For values other than secrets, prefer to use the\n * `SSMParameterProvider` which resolves SSM parameter in design-time, and\n * ensures that stack deployments are deterministic.\n */\nclass SecretParameter extends construct_1.Construct {\n    constructor(parent, name, props) {\n        super(parent, name);\n        const param = new parameter_1.Parameter(this, 'Parameter', {\n            type: 'AWS::SSM::Parameter::Value<String>',\n            default: props.ssmParameter,\n            description: props.description,\n            allowedPattern: props.allowedPattern,\n            allowedValues: props.allowedValues,\n            constraintDescription: props.constraintDescription,\n            maxLength: props.maxLength,\n            minLength: props.minLength,\n            noEcho: true,\n        });\n        this.value = param.ref;\n    }\n    // implicitly implements Token, and therefore Secret.\n    resolve() {\n        return this.value;\n    }\n}\nexports.SecretParameter = SecretParameter;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cx_api_1 = __webpack_require__(5);\nconst js_base64_1 = __webpack_require__(24);\nconst _1 = __webpack_require__(4);\nconst stack_1 = __webpack_require__(0);\nconst construct_1 = __webpack_require__(2);\nconst tokens_1 = __webpack_require__(1);\n/**\n * Cloud Executable interface version.\n */\nconst CX_VERSION = 'CloudExecutable/1.0';\n/**\n * Represents a CDK program.\n */\nclass App extends construct_1.Root {\n    constructor(argv) {\n        super();\n        argv = argv || [];\n        if (argv.length >= 1) {\n            // if the first argument ends with \"/node\" or \"node.exe\", skip it (this is argv[0] in node programs).\n            if (/[\\/\\\\]node(?:\\.exe)?$/.test(argv[0])) {\n                argv = argv.slice(1);\n            }\n            this.progname = argv[0].split('/').pop();\n        }\n        if (argv.length > 1) {\n            try {\n                this.request = this.parseRequest(argv[1]);\n            }\n            catch (e) {\n                throw new Error(`Cannot parse request '${argv[1]}': ${e.message}`);\n            }\n            this.loadContext();\n        }\n    }\n    get stacks() {\n        const out = {};\n        for (const child of this.children) {\n            if (!(child instanceof stack_1.Stack)) {\n                throw new Error(`The child ${child.toString()} of Program must be a Stack`);\n            }\n            out[child.name] = child;\n        }\n        return out;\n    }\n    /**\n     * Runs the program\n     * @returns STDOUT\n     */\n    run() {\n        // no arguments - print usage and exit successfully.\n        if (!this.request || !this.request.type) {\n            return this.usage;\n        }\n        const result = this.runCommand();\n        return JSON.stringify(result, undefined, 2);\n    }\n    /**\n     * @deprecated Use app.run().\n     */\n    async exec() {\n        return this.run();\n    }\n    /**\n     * Lists all stacks in this app.\n     */\n    listStacks() {\n        return Object.keys(this.stacks).map(name => {\n            const stack = this.stacks[name];\n            const region = stack.env.region;\n            const account = stack.env.account;\n            let environment;\n            if (account && region) {\n                environment = { name: `${account}/${region}`, account, region };\n            }\n            return { name, environment };\n        });\n    }\n    /**\n     * Synthesize and validate a single stack\n     * @param stackName The name of the stack to synthesize\n     */\n    synthesizeStack(stackName) {\n        const stack = this.getStack(stackName);\n        // first, validate this stack and stop if there are errors.\n        const errors = stack.validateTree();\n        if (errors.length > 0) {\n            const errorList = errors.map(e => `[${e.source.path}] ${e.message}`).join('\\n    ');\n            throw new Error(`Stack validation failed with the following errors:\\n    ${errorList}`);\n        }\n        let environment;\n        if (stack.env.account && stack.env.region) {\n            environment = {\n                name: `${stack.env.account}/${stack.env.region}`,\n                account: stack.env.account,\n                region: stack.env.region\n            };\n        }\n        return {\n            name: stack.name,\n            environment,\n            missing: Object.keys(stack.missingContext).length ? stack.missingContext : undefined,\n            template: stack.toCloudFormation(),\n            metadata: this.collectMetadata(stack)\n        };\n    }\n    /**\n     * Synthesizes multiple stacks\n     */\n    synthesizeStacks(stackNames) {\n        const ret = [];\n        for (const stackName of stackNames) {\n            ret.push(this.synthesizeStack(stackName));\n        }\n        return ret;\n    }\n    /**\n     * Returns metadata for all constructs in the stack.\n     */\n    collectMetadata(stack) {\n        const output = {};\n        visit(stack);\n        // add app-level metadata under \".\"\n        if (this.metadata.length > 0) {\n            output[_1.PATH_SEP] = this.metadata;\n        }\n        return output;\n        function visit(node) {\n            if (node.metadata.length > 0) {\n                // Make the path absolute\n                output[_1.PATH_SEP + node.path] = node.metadata.map(md => tokens_1.resolve(md));\n            }\n            for (const child of node.children) {\n                visit(child);\n            }\n        }\n    }\n    getStack(stackname) {\n        if (stackname == null) {\n            throw new Error('Stack name must be defined');\n        }\n        const stack = this.stacks[stackname];\n        if (!stack) {\n            throw new Error(`Cannot find stack ${stackname}`);\n        }\n        return stack;\n    }\n    runCommand() {\n        switch (this.request.type) {\n            case 'list':\n                return {\n                    stacks: this.listStacks()\n                };\n            case 'synth':\n                return {\n                    stacks: this.synthesizeStacks(this.request.stacks)\n                };\n            default:\n                throw new Error(`Invalid command: ${this.request.type}`);\n        }\n    }\n    get usage() {\n        const progname = this.progname ? this.progname + ' ' : '';\n        return `${CX_VERSION}\n\nUsage:\n  ${progname}REQUEST\n\nREQUEST is a JSON-encoded request object.\n`;\n    }\n    loadContext() {\n        const context = (this.request && this.request.context) || {};\n        for (const key of Object.keys(context)) {\n            this.setContext(key, context[key]);\n        }\n    }\n    parseRequest(req) {\n        // allow toolkit to send request in base64 if they begin with \"base64:\"\n        // this is in order to avoid shell escaping issues when defining \"--app\"\n        // in the toolkit.\n        if (req.startsWith(cx_api_1.BASE64_REQ_PREFIX)) {\n            req = js_base64_1.Base64.fromBase64(req.slice(cx_api_1.BASE64_REQ_PREFIX.length));\n        }\n        // parse as JSON\n        return JSON.parse(req);\n    }\n}\nexports.App = App;\nclass Program extends App {\n    constructor(argv) {\n        super(argv);\n        this.addWarning('\"Program\" is deprecated in favor of \"App\"');\n    }\n}\nexports.Program = Program;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n *  base64.js\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n;(function (global, factory) {\n     true\n        ? module.exports = factory(global)\n        : typeof define === 'function' && define.amd\n        ? define(factory) : factory(global)\n}((\n    typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n: this\n), function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.4.5\";\n    // if node.js, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = __webpack_require__(25).Buffer;\n        } catch (err) {}\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){ return global.Base64 }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // that's it!\n    return {Base64: global.Base64}\n}));\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"buffer\");\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stack_1 = __webpack_require__(0);\nconst AVAILABILITY_ZONES_PROVIDER = 'availability-zones';\nconst SSM_PARAMETER_PROVIDER = 'ssm';\n/**\n * Base class for the model side of context providers\n *\n * Instances of this class communicate with context provider plugins in the 'cdk\n * toolkit' via context variables (input), outputting specialized queries for\n * more context variables (output).\n *\n * ContextProvider needs access to a Construct to hook into the context mechanism.\n */\nclass ContextProvider {\n    constructor(context) {\n        this.context = context;\n        this.stack = stack_1.Stack.find(context);\n    }\n    /**\n     * Read a provider value, verifying it's a string\n     */\n    getStringValue(provider, scope, args) {\n        const key = colonQuote([provider].concat(scope).concat(args)).join(':');\n        const value = this.context.getContext(key);\n        if (value != null) {\n            if (typeof value !== 'string') {\n                throw new TypeError(`Expected context parameter '${key}' to be a string, but got '${value}'`);\n            }\n            return value;\n        }\n        this.stack.reportMissingContext(key, { provider, scope, args });\n        return '';\n    }\n    /**\n     * Read a provider value, verifying it's a list\n     */\n    getStringListValue(provider, scope, args, defaultValue = ['']) {\n        const key = colonQuote([provider].concat(scope).concat(args)).join(':');\n        const value = this.context.getContext(key);\n        if (value != null) {\n            if (!value.map) {\n                throw new Error(`Context value '${key}' is supposed to be a list, got '${value}'`);\n            }\n            return value;\n        }\n        this.stack.reportMissingContext(key, { provider, scope, args });\n        return defaultValue;\n    }\n    /**\n     * Helper function to wrap up account and region into a scope tuple\n     */\n    accountRegionScope(providerDescription) {\n        const stack = stack_1.Stack.find(this.context);\n        if (!stack) {\n            throw new Error(`${providerDescription}: construct must be in a stack`);\n        }\n        const account = stack.env.account;\n        const region = stack.env.region;\n        if (account == null || region == null) {\n            // tslint:disable-next-line:max-line-length\n            throw new Error(`${providerDescription}: requires account and region information, but ${stack.name} doesn't have an \"env\" defined`);\n        }\n        return [account, region];\n    }\n}\nexports.ContextProvider = ContextProvider;\n/**\n * Quote colons in all strings so that we can undo the quoting at a later point\n *\n * We'll use $ as a quoting character, for no particularly good reason other\n * than that \\ is going to lead to quoting hell when the keys are stored in JSON.\n */\nfunction colonQuote(xs) {\n    return xs.map(x => x.replace('$', '$$').replace(':', '$:'));\n}\n/**\n * Context provider that will return the availability zones for the current account and region\n */\nclass AvailabilityZoneProvider {\n    constructor(context) {\n        this.provider = new ContextProvider(context);\n    }\n    /**\n     * Return the list of AZs for the current account and region\n     */\n    get availabilityZones() {\n        return this.provider.getStringListValue(AVAILABILITY_ZONES_PROVIDER, this.provider.accountRegionScope('AvailabilityZoneProvider'), [], ['dummy1a', 'dummy1b', 'dummy1c']);\n    }\n}\nexports.AvailabilityZoneProvider = AvailabilityZoneProvider;\n/**\n * Context provider that will read values from the SSM parameter store in the indicated account and region\n */\nclass SSMParameterProvider {\n    constructor(context) {\n        this.provider = new ContextProvider(context);\n    }\n    /**\n     * Return the SSM parameter string with the indicated key\n     */\n    getString(parameterName) {\n        const scope = this.provider.accountRegionScope('SSMParameterProvider');\n        return this.provider.getStringValue(SSM_PARAMETER_PROVIDER, scope, [parameterName]);\n    }\n}\nexports.SSMParameterProvider = SSMParameterProvider;\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
}
